// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Ported from SDL.h and corresponding dependencies of SDL3.
// Original source is Copyright (C) 1997-2024 Sam Lantinga. Licensed under the zlib license.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Silk.NET.SDL;

public unsafe partial class Sdl : ISdl, ISdl.Static
{
    public partial class DllImport : ISdl.Static
    {
        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AcquireCameraFrame")]
        public static extern Surface* AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        )
        {
            fixed (ulong* __dsl_timestampNS = timestampNS)
            {
                return (Surface*)AcquireCameraFrame(camera, __dsl_timestampNS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddAtomicInt")]
        public static extern int AddAtomicInt(AtomicInt* a, int v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddAtomicInt(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AddAtomicInt(__dsl_a, v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddEventWatch")]
        [return: NativeTypeName("bool")]
        public static extern byte AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)(byte)AddEventWatch(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddGamepadMapping")]
        public static extern int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)AddGamepadMapping(__dsl_mapping);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        public static extern int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] sbyte* file
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (int)AddGamepadMappingsFromFile(__dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        public static extern int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        public static int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => (int)AddGamepadMappingsFromIO(src, (byte)closeio);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddHintCallback")]
        [return: NativeTypeName("bool")]
        public static extern byte AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)AddHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [return: NativeTypeName("bool")]
        public static extern byte AddSurfaceAlternateImage(Surface* surface, Surface* image);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddSurfaceAlternateImage(
            Ref<Surface> surface,
            Ref<Surface> image
        )
        {
            fixed (Surface* __dsl_image = image)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)AddSurfaceAlternateImage(__dsl_surface, __dsl_image);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddTimer")]
        [return: NativeTypeName("SDL_TimerID")]
        public static extern uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            void* userdata
        );

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (uint)AddTimer(interval, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddTimerNS")]
        [return: NativeTypeName("SDL_TimerID")]
        public static extern uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            void* userdata
        );

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (uint)AddTimerNS(interval, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        public static MaybeBool<byte> AddVulkanRenderSemaphores(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            (MaybeBool<byte>)
                (byte)AddVulkanRenderSemaphoresRaw(
                    renderer,
                    wait_stage_mask,
                    wait_semaphore,
                    signal_semaphore
                );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [return: NativeTypeName("bool")]
        public static extern byte AddVulkanRenderSemaphoresRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AttachVirtualJoystick")]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        );

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        )
        {
            fixed (VirtualJoystickDesc* __dsl_desc = desc)
            {
                return (uint)AttachVirtualJoystick(__dsl_desc);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        public static MaybeBool<byte> AudioDevicePaused(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => (MaybeBool<byte>)(byte)AudioDevicePausedRaw(dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AudioDevicePaused")]
        [return: NativeTypeName("bool")]
        public static extern byte AudioDevicePausedRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        public static MaybeBool<byte> BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        ) => (MaybeBool<byte>)(byte)BindAudioStreamRaw(devid, stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BindAudioStream")]
        [return: NativeTypeName("bool")]
        public static extern byte BindAudioStreamRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BindAudioStreams")]
        [return: NativeTypeName("bool")]
        public static extern byte BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle* streams,
            int num_streams
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioStreamHandle> streams,
            int num_streams
        )
        {
            fixed (AudioStreamHandle* __dsl_streams = streams)
            {
                return (MaybeBool<byte>)(byte)BindAudioStreams(devid, __dsl_streams, num_streams);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurface9Grid")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurface9Grid(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurface9Grid(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurface9Grid(
                        __dsl_src,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurfaceScaled")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurfaceTiled")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurfaceTiled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceTiled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceTiled(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurfaceTiledWithScale(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceTiledWithScale(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceTiledWithScale(
                        __dsl_src,
                        __dsl_srcrect,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceUnchecked(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [return: NativeTypeName("bool")]
        public static extern byte BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceUncheckedScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_BroadcastCondition")]
        public static extern void BroadcastCondition(ConditionHandle cond);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CaptureMouse")]
        [return: NativeTypeName("bool")]
        public static extern byte CaptureMouse([NativeTypeName("bool")] byte enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        public static MaybeBool<byte> CaptureMouse(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => (MaybeBool<byte>)(byte)CaptureMouse((byte)enabled);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CleanupTLS")]
        public static extern void CleanupTLS();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        public static MaybeBool<byte> ClearAudioStream(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)ClearAudioStreamRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearAudioStream")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearAudioStreamRaw(AudioStreamHandle stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
        public static MaybeBool<byte> ClearClipboardData() =>
            (MaybeBool<byte>)(byte)ClearClipboardDataRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearClipboardData")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearClipboardDataRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
        public static MaybeBool<byte> ClearComposition(WindowHandle window) =>
            (MaybeBool<byte>)(byte)ClearCompositionRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearComposition")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearCompositionRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
        public static MaybeBool<byte> ClearError() => (MaybeBool<byte>)(byte)ClearErrorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearError")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearErrorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)ClearProperty(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ClearSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte ClearSurface(
            Surface* surface,
            float r,
            float g,
            float b,
            float a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearSurface(
            Ref<Surface> surface,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)ClearSurface(__dsl_surface, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseAudioDevice")]
        public static extern void CloseAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseCamera")]
        public static extern void CloseCamera(CameraHandle camera);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseGamepad")]
        public static extern void CloseGamepad(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseHaptic")]
        public static extern void CloseHaptic(HapticHandle haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        public static MaybeBool<byte> CloseIO(IOStreamHandle context) =>
            (MaybeBool<byte>)(byte)CloseIORaw(context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseIO")]
        [return: NativeTypeName("bool")]
        public static extern byte CloseIORaw(IOStreamHandle context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseJoystick")]
        public static extern void CloseJoystick(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseSensor")]
        public static extern void CloseSensor(SensorHandle sensor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        public static MaybeBool<byte> CloseStorage(StorageHandle storage) =>
            (MaybeBool<byte>)(byte)CloseStorageRaw(storage);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CloseStorage")]
        [return: NativeTypeName("bool")]
        public static extern byte CloseStorageRaw(StorageHandle storage);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [return: NativeTypeName("bool")]
        public static extern byte CompareAndSwapAtomicInt(AtomicInt* a, int oldval, int newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicInt(
            Ref<AtomicInt> a,
            int oldval,
            int newval
        )
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (MaybeBool<byte>)(byte)CompareAndSwapAtomicInt(__dsl_a, oldval, newval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [return: NativeTypeName("bool")]
        public static extern byte CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicPointer(Ref2D a, Ref oldval, Ref newval)
        {
            fixed (void* __dsl_newval = newval)
            fixed (void* __dsl_oldval = oldval)
            fixed (void** __dsl_a = a)
            {
                return (MaybeBool<byte>)
                    (byte)CompareAndSwapAtomicPointer(__dsl_a, __dsl_oldval, __dsl_newval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [return: NativeTypeName("bool")]
        public static extern byte CompareAndSwapAtomicU32(
            AtomicU32* a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicU32(
            Ref<AtomicU32> a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        )
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (MaybeBool<byte>)(byte)CompareAndSwapAtomicU32(__dsl_a, oldval, newval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ComposeCustomBlendMode")]
        [return: NativeTypeName("SDL_BlendMode")]
        public static extern uint ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ConvertAudioSamples")]
        [return: NativeTypeName("bool")]
        public static extern byte ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        )
        {
            fixed (int* __dsl_dst_len = dst_len)
            fixed (byte** __dsl_dst_data = dst_data)
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (byte* __dsl_src_data = src_data)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertAudioSamples(
                        __dsl_src_spec,
                        __dsl_src_data,
                        src_len,
                        __dsl_dst_spec,
                        __dsl_dst_data,
                        __dsl_dst_len
                    );
            }
        }

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_ConvertEventToRenderCoordinates"
        )]
        [return: NativeTypeName("bool")]
        public static extern byte ConvertEventToRenderCoordinates(
            RendererHandle renderer,
            Event* @event
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertEventToRenderCoordinates(
            RendererHandle renderer,
            Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertEventToRenderCoordinates(renderer, __dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ConvertPixels")]
        [return: NativeTypeName("bool")]
        public static extern byte ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertPixels(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [return: NativeTypeName("bool")]
        public static extern byte ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertPixelsAndColorspace(
                        width,
                        height,
                        src_format,
                        src_colorspace,
                        src_properties,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        dst_colorspace,
                        dst_properties,
                        __dsl_dst,
                        dst_pitch
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ConvertSurface")]
        public static extern Surface* ConvertSurface(Surface* surface, PixelFormat format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurface(Ref<Surface> surface, PixelFormat format)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurface(__dsl_surface, format);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        public static extern Surface* ConvertSurfaceAndColorspace(
            Surface* surface,
            PixelFormat format,
            Palette* palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceAndColorspace(
            Ref<Surface> surface,
            PixelFormat format,
            Ref<Palette> palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceAndColorspace(
                    __dsl_surface,
                    format,
                    __dsl_palette,
                    colorspace,
                    props
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CopyFile")]
        [return: NativeTypeName("bool")]
        public static extern byte CopyFile(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CopyFile(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)(byte)CopyFile(__dsl_oldpath, __dsl_newpath);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
        public static MaybeBool<byte> CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => (MaybeBool<byte>)(byte)CopyPropertiesRaw(src, dst);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CopyProperties")]
        [return: NativeTypeName("bool")]
        public static extern byte CopyPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CopyStorageFile")]
        [return: NativeTypeName("bool")]
        public static extern byte CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)
                    (byte)CopyStorageFile(storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateAudioStream")]
        public static extern AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (AudioStreamHandle)CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateColorCursor")]
        public static extern CursorHandle CreateColorCursor(Surface* surface, int hot_x, int hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (CursorHandle)CreateColorCursor(__dsl_surface, hot_x, hot_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateCondition")]
        public static extern ConditionHandle CreateCondition();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateCursor")]
        public static extern CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        )
        {
            fixed (byte* __dsl_mask = mask)
            fixed (byte* __dsl_data = data)
            {
                return (CursorHandle)CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateDirectory")]
        [return: NativeTypeName("bool")]
        public static extern byte CreateDirectory([NativeTypeName("const char *")] sbyte* path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)CreateDirectory(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateHapticEffect")]
        public static extern int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            {
                return (int)CreateHapticEffect(haptic, __dsl_effect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateMutex")]
        public static extern MutexHandle CreateMutex();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreatePalette(int ncolors) =>
            (Palette*)CreatePaletteRaw(ncolors);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreatePalette")]
        public static extern Palette* CreatePaletteRaw(int ncolors);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreatePopupWindow")]
        public static extern WindowHandle CreatePopupWindow(
            WindowHandle parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint CreateProperties();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateRenderer")]
        public static extern RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (RendererHandle)CreateRenderer(window, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateRendererWithProperties")]
        public static extern RendererHandle CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateRWLock")]
        public static extern RWLockHandle CreateRWLock();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSemaphore")]
        public static extern SemaphoreHandle CreateSemaphore(
            [NativeTypeName("Uint32")] uint initial_value
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSoftwareRenderer")]
        public static extern RendererHandle CreateSoftwareRenderer(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateSoftwareRenderer(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (RendererHandle)CreateSoftwareRenderer(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateStorageDirectory")]
        [return: NativeTypeName("bool")]
        public static extern byte CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)CreateStorageDirectory(storage, __dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurface(int width, int height, PixelFormat format) =>
            (Surface*)CreateSurfaceRaw(width, height, format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSurfaceFrom")]
        public static extern Surface* CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            void* pixels,
            int pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            {
                return (Surface*)CreateSurfaceFrom(width, height, format, __dsl_pixels, pitch);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSurfacePalette")]
        public static extern Palette* CreateSurfacePalette(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreateSurfacePalette(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Palette*)CreateSurfacePalette(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSurface")]
        public static extern Surface* CreateSurfaceRaw(int width, int height, PixelFormat format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSystemCursor")]
        public static extern CursorHandle CreateSystemCursor(SystemCursor id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTexture(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        ) => (Texture*)CreateTextureRaw(renderer, format, access, w, h);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateTextureFromSurface")]
        public static extern Texture* CreateTextureFromSurface(
            RendererHandle renderer,
            Surface* surface
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTextureFromSurface(
            RendererHandle renderer,
            Ref<Surface> surface
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Texture*)CreateTextureFromSurface(renderer, __dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateTexture")]
        public static extern Texture* CreateTextureRaw(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTextureWithProperties(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => (Texture*)CreateTextureWithPropertiesRaw(renderer, props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateTextureWithProperties")]
        public static extern Texture* CreateTextureWithPropertiesRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateThreadRuntime")]
        public static extern ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (ThreadHandle)CreateThreadRuntime(
                    fn,
                    __dsl_name,
                    __dsl_data,
                    pfnBeginThread,
                    pfnEndThread
                );
            }
        }

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_CreateThreadWithPropertiesRuntime"
        )]
        public static extern ThreadHandle CreateThreadWithPropertiesRuntime(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateWindow")]
        public static extern WindowHandle CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (WindowHandle)CreateWindow(__dsl_title, w, h, flags);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateWindowAndRenderer")]
        [return: NativeTypeName("bool")]
        public static extern byte CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            WindowHandle* window,
            RendererHandle* renderer
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            Ref<WindowHandle> window,
            Ref<RendererHandle> renderer
        )
        {
            fixed (RendererHandle* __dsl_renderer = renderer)
            fixed (WindowHandle* __dsl_window = window)
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)
                    (byte)CreateWindowAndRenderer(
                        __dsl_title,
                        width,
                        height,
                        window_flags,
                        __dsl_window,
                        __dsl_renderer
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateWindowWithProperties")]
        public static extern WindowHandle CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        public static MaybeBool<byte> CursorVisible() => (MaybeBool<byte>)(byte)CursorVisibleRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CursorVisible")]
        [return: NativeTypeName("bool")]
        public static extern byte CursorVisibleRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DateTimeToTime")]
        [return: NativeTypeName("bool")]
        public static extern byte DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        )
        {
            fixed (long* __dsl_ticks = ticks)
            fixed (DateTime* __dsl_dt = dt)
            {
                return (MaybeBool<byte>)(byte)DateTimeToTime(__dsl_dt, __dsl_ticks);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Delay")]
        public static extern void Delay([NativeTypeName("Uint32")] uint ms);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DelayNS")]
        public static extern void DelayNS([NativeTypeName("Uint64")] ulong ns);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DelayPrecise")]
        public static extern void DelayPrecise([NativeTypeName("Uint64")] ulong ns);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyAudioStream")]
        public static extern void DestroyAudioStream(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyCondition")]
        public static extern void DestroyCondition(ConditionHandle cond);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyCursor")]
        public static extern void DestroyCursor(CursorHandle cursor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyHapticEffect")]
        public static extern void DestroyHapticEffect(HapticHandle haptic, int effect);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyMutex")]
        public static extern void DestroyMutex(MutexHandle mutex);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyPalette")]
        public static extern void DestroyPalette(Palette* palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            {
                DestroyPalette(__dsl_palette);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyProperties")]
        public static extern void DestroyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyRenderer")]
        public static extern void DestroyRenderer(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyRWLock")]
        public static extern void DestroyRWLock(RWLockHandle rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroySemaphore")]
        public static extern void DestroySemaphore(SemaphoreHandle sem);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroySurface")]
        public static extern void DestroySurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                DestroySurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyTexture")]
        public static extern void DestroyTexture(Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                DestroyTexture(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyWindow")]
        public static extern void DestroyWindow(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        public static MaybeBool<byte> DestroyWindowSurface(WindowHandle window) =>
            (MaybeBool<byte>)(byte)DestroyWindowSurfaceRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DestroyWindowSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte DestroyWindowSurfaceRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DetachThread")]
        public static extern void DetachThread(ThreadHandle thread);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
        public static MaybeBool<byte> DetachVirtualJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (MaybeBool<byte>)(byte)DetachVirtualJoystickRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DetachVirtualJoystick")]
        [return: NativeTypeName("bool")]
        public static extern byte DetachVirtualJoystickRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
        public static MaybeBool<byte> DisableScreenSaver() =>
            (MaybeBool<byte>)(byte)DisableScreenSaverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DisableScreenSaver")]
        [return: NativeTypeName("bool")]
        public static extern byte DisableScreenSaverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_DuplicateSurface")]
        public static extern Surface* DuplicateSurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)DuplicateSurface(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentConfig() => (void*)EGLGetCurrentConfigRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [return: NativeTypeName("SDL_EGLConfig")]
        public static extern void* EGLGetCurrentConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentDisplay() => (void*)EGLGetCurrentDisplayRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [return: NativeTypeName("SDL_EGLDisplay")]
        public static extern void* EGLGetCurrentDisplayRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetProcAddress")]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern FunctionPointer EGLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (FunctionPointer)EGLGetProcAddress(__dsl_proc);
            }
        }

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetWindowSurface(WindowHandle window) =>
            (void*)EGLGetWindowSurfaceRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetWindowSurface")]
        [return: NativeTypeName("SDL_EGLSurface")]
        public static extern void* EGLGetWindowSurfaceRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        public static extern void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                EGLSetAttributeCallbacks(
                    platformAttribCallback,
                    surfaceAttribCallback,
                    contextAttribCallback,
                    __dsl_userdata
                );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
        public static MaybeBool<byte> EnableScreenSaver() =>
            (MaybeBool<byte>)(byte)EnableScreenSaverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EnableScreenSaver")]
        [return: NativeTypeName("bool")]
        public static extern byte EnableScreenSaverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EnumerateDirectory")]
        [return: NativeTypeName("bool")]
        public static extern byte EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EnumerateProperties")]
        [return: NativeTypeName("bool")]
        public static extern byte EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)(byte)EnumerateProperties(props, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EnumerateStorageDirectory")]
        [return: NativeTypeName("bool")]
        public static extern byte EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)EnumerateStorageDirectory(storage, __dsl_path, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        public static MaybeBool<byte> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            (MaybeBool<byte>)(byte)EventEnabledRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EventEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte EventEnabledRaw([NativeTypeName("Uint32")] uint type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FillSurfaceRect")]
        [return: NativeTypeName("bool")]
        public static extern byte FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)(byte)FillSurfaceRect(__dsl_dst, __dsl_rect, color);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FillSurfaceRects")]
        [return: NativeTypeName("bool")]
        public static extern byte FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (Surface* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)
                    (byte)FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FilterEvents")]
        public static extern void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                FilterEvents(filter, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        public static MaybeBool<byte> FlashWindow(WindowHandle window, FlashOperation operation) =>
            (MaybeBool<byte>)(byte)FlashWindowRaw(window, operation);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlashWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte FlashWindowRaw(WindowHandle window, FlashOperation operation);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlipSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte FlipSurface(Surface* surface, FlipMode flip);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlipSurface(Ref<Surface> surface, FlipMode flip)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)FlipSurface(__dsl_surface, flip);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        public static MaybeBool<byte> FlushAudioStream(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)FlushAudioStreamRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlushAudioStream")]
        [return: NativeTypeName("bool")]
        public static extern byte FlushAudioStreamRaw(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlushEvent")]
        public static extern void FlushEvent([NativeTypeName("Uint32")] uint type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlushEvents")]
        public static extern void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
        public static MaybeBool<byte> FlushIO(IOStreamHandle context) =>
            (MaybeBool<byte>)(byte)FlushIORaw(context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlushIO")]
        [return: NativeTypeName("bool")]
        public static extern byte FlushIORaw(IOStreamHandle context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        public static MaybeBool<byte> FlushRenderer(RendererHandle renderer) =>
            (MaybeBool<byte>)(byte)FlushRendererRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_FlushRenderer")]
        [return: NativeTypeName("bool")]
        public static extern byte FlushRendererRaw(RendererHandle renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        public static MaybeBool<byte> GamepadConnected(GamepadHandle gamepad) =>
            (MaybeBool<byte>)(byte)GamepadConnectedRaw(gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadConnected")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadConnectedRaw(GamepadHandle gamepad);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        public static MaybeBool<byte> GamepadEventsEnabled() =>
            (MaybeBool<byte>)(byte)GamepadEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadEventsEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadEventsEnabledRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        public static MaybeBool<byte> GamepadHasAxis(GamepadHandle gamepad, GamepadAxis axis) =>
            (MaybeBool<byte>)(byte)GamepadHasAxisRaw(gamepad, axis);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadHasAxis")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadHasAxisRaw(GamepadHandle gamepad, GamepadAxis axis);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        public static MaybeBool<byte> GamepadHasButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => (MaybeBool<byte>)(byte)GamepadHasButtonRaw(gamepad, button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadHasButton")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadHasButtonRaw(GamepadHandle gamepad, GamepadButton button);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        public static MaybeBool<byte> GamepadHasSensor(GamepadHandle gamepad, SensorType type) =>
            (MaybeBool<byte>)(byte)GamepadHasSensorRaw(gamepad, type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadHasSensor")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadHasSensorRaw(GamepadHandle gamepad, SensorType type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        public static MaybeBool<byte> GamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type
        ) => (MaybeBool<byte>)(byte)GamepadSensorEnabledRaw(gamepad, type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadSensorEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte GamepadSensorEnabledRaw(GamepadHandle gamepad, SensorType type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAppMetadataProperty")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetAppMetadataProperty(
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetAppMetadataProperty(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAssertionHandler")]
        [return: NativeTypeName("SDL_AssertionHandler")]
        public static extern AssertionHandler GetAssertionHandler(void** puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertionHandler GetAssertionHandler(Ref2D puserdata)
        {
            fixed (void** __dsl_puserdata = puserdata)
            {
                return (AssertionHandler)GetAssertionHandler(__dsl_puserdata);
            }
        }

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<AssertData> GetAssertionReport() => (AssertData*)GetAssertionReportRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAssertionReport")]
        [return: NativeTypeName("const SDL_AssertData *")]
        public static extern AssertData* GetAssertionReportRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAtomicInt")]
        public static extern int GetAtomicInt(AtomicInt* a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAtomicInt(Ref<AtomicInt> a)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)GetAtomicInt(__dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAtomicPointer")]
        public static extern void* GetAtomicPointer(void** a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetAtomicPointer(Ref2D a)
        {
            fixed (void** __dsl_a = a)
            {
                return (void*)GetAtomicPointer(__dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAtomicU32")]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetAtomicU32(AtomicU32* a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAtomicU32(Ref<AtomicU32> a)
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (uint)GetAtomicU32(__dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        public static extern int* GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioDeviceChannelMap(devid, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDeviceFormat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        )
        {
            fixed (int* __dsl_sample_frames = sample_frames)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)
                    (byte)GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDeviceGain")]
        public static extern float GetAudioDeviceGain(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDeviceName(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => (sbyte*)GetAudioDeviceNameRaw(devid);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDeviceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetAudioDeviceNameRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDriver(int index) => (sbyte*)GetAudioDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetAudioDriverRaw(int index);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioFormatName(AudioFormat format) =>
            (sbyte*)GetAudioFormatNameRaw(format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioFormatName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetAudioFormatNameRaw(AudioFormat format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [return: NativeTypeName("SDL_AudioDeviceID *")]
        public static extern uint* GetAudioPlaybackDevices(int* count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioPlaybackDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioPlaybackDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioRecordingDevices")]
        [return: NativeTypeName("SDL_AudioDeviceID *")]
        public static extern uint* GetAudioRecordingDevices(int* count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioRecordingDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioRecordingDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamAvailable")]
        public static extern int GetAudioStreamAvailable(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamData")]
        public static extern int GetAudioStreamData(AudioStreamHandle stream, void* buf, int len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(AudioStreamHandle stream, Ref buf, int len)
        {
            fixed (void* __dsl_buf = buf)
            {
                return (int)GetAudioStreamData(stream, __dsl_buf, len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamDevice")]
        [return: NativeTypeName("SDL_AudioDeviceID")]
        public static extern uint GetAudioStreamDevice(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamFormat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetAudioStreamFormat(
            AudioStreamHandle stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetAudioStreamFormat(
            AudioStreamHandle stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)GetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        public static extern float GetAudioStreamFrequencyRatio(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamGain")]
        public static extern float GetAudioStreamGain(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        public static extern int* GetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioStreamInputChannelMap(stream, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        public static extern int* GetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioStreamOutputChannelMap(stream, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetAudioStreamProperties(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioStreamQueued")]
        public static extern int GetAudioStreamQueued(AudioStreamHandle stream);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetBasePath() => (sbyte*)GetBasePathRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetBasePath")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetBasePathRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetBooleanProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)GetBooleanProperty(props, __dsl_name, (byte)default_value);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDriver(int index) => (sbyte*)GetCameraDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCameraDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraFormat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetCameraFormat(CameraHandle camera, CameraSpec* spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCameraFormat(CameraHandle camera, Ref<CameraSpec> spec)
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)(byte)GetCameraFormat(camera, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraID")]
        [return: NativeTypeName("SDL_CameraID")]
        public static extern uint GetCameraID(CameraHandle camera);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraName([NativeTypeName("SDL_CameraID")] uint instance_id) =>
            (sbyte*)GetCameraNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCameraNameRaw(
            [NativeTypeName("SDL_CameraID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraPermissionState")]
        public static extern int GetCameraPermissionState(CameraHandle camera);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraPosition")]
        public static extern CameraPosition GetCameraPosition(
            [NativeTypeName("SDL_CameraID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetCameraProperties(CameraHandle camera);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameras")]
        [return: NativeTypeName("SDL_CameraID *")]
        public static extern uint* GetCameras(int* count);

        [return: NativeTypeName("SDL_CameraID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetCameras(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetCameras(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraSupportedFormats")]
        public static extern CameraSpec** GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<CameraSpec> GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (CameraSpec**)GetCameraSupportedFormats(devid, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetClipboardData")]
        public static extern void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (void*)GetClipboardData(__dsl_mime_type, __dsl_size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetClipboardMimeTypes")]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GetClipboardMimeTypes(
            [NativeTypeName("size_t *")] nuint* num_mime_types
        );

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetClipboardMimeTypes(
            [NativeTypeName("size_t *")] Ref<nuint> num_mime_types
        )
        {
            fixed (nuint* __dsl_num_mime_types = num_mime_types)
            {
                return (sbyte**)GetClipboardMimeTypes(__dsl_num_mime_types);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetClipboardText() => (sbyte*)GetClipboardTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetClipboardText")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetClipboardTextRaw();

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_GetClosestFullscreenDisplayMode"
        )]
        [return: NativeTypeName("bool")]
        public static extern byte GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] byte include_high_density_modes,
            DisplayMode* mode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] MaybeBool<byte> include_high_density_modes,
            Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            {
                return (MaybeBool<byte>)
                    (byte)GetClosestFullscreenDisplayMode(
                        displayID,
                        w,
                        h,
                        refresh_rate,
                        (byte)include_high_density_modes,
                        __dsl_mode
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCPUCacheLineSize")]
        public static extern int GetCPUCacheLineSize();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentAudioDriver() => (sbyte*)GetCurrentAudioDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentAudioDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentCameraDriver() => (sbyte*)GetCurrentCameraDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentCameraDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => (DisplayMode*)GetCurrentDisplayModeRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentDisplayMode")]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentDisplayOrientation")]
        public static extern DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetCurrentRenderOutputSize(
            RendererHandle renderer,
            int* w,
            int* h
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCurrentRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)
                    (byte)GetCurrentRenderOutputSize(renderer, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentThreadID")]
        [return: NativeTypeName("SDL_ThreadID")]
        public static extern ulong GetCurrentThreadID();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentTime")]
        [return: NativeTypeName("bool")]
        public static extern byte GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
        {
            fixed (long* __dsl_ticks = ticks)
            {
                return (MaybeBool<byte>)(byte)GetCurrentTime(__dsl_ticks);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentVideoDriver() => (sbyte*)GetCurrentVideoDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentVideoDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentVideoDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCursor")]
        public static extern CursorHandle GetCursor();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [return: NativeTypeName("bool")]
        public static extern byte GetDateTimeLocalePreferences(
            DateFormat* dateFormat,
            TimeFormat* timeFormat
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDateTimeLocalePreferences(
            Ref<DateFormat> dateFormat,
            Ref<TimeFormat> timeFormat
        )
        {
            fixed (TimeFormat* __dsl_timeFormat = timeFormat)
            fixed (DateFormat* __dsl_dateFormat = dateFormat)
            {
                return (MaybeBool<byte>)
                    (byte)GetDateTimeLocalePreferences(__dsl_dateFormat, __dsl_timeFormat);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDayOfWeek")]
        public static extern int GetDayOfWeek(int year, int month, int day);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDayOfYear")]
        public static extern int GetDayOfYear(int year, int month, int day);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDaysInMonth")]
        public static extern int GetDaysInMonth(int year, int month);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDefaultAssertionHandler")]
        [return: NativeTypeName("SDL_AssertionHandler")]
        public static extern AssertionHandler GetDefaultAssertionHandler();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDefaultCursor")]
        public static extern CursorHandle GetDefaultCursor();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDefaultLogOutputFunction")]
        [return: NativeTypeName("SDL_LogOutputFunction")]
        public static extern LogOutputFunction GetDefaultLogOutputFunction();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => (DisplayMode*)GetDesktopDisplayModeRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDesktopDisplayMode")]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayBounds")]
        [return: NativeTypeName("bool")]
        public static extern byte GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetDisplayBounds(displayID, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayContentScale")]
        public static extern float GetDisplayContentScale(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayForPoint")]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Point* point
        );

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Ref<Point> point
        )
        {
            fixed (Point* __dsl_point = point)
            {
                return (uint)GetDisplayForPoint(__dsl_point);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayForRect")]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForRect(
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (uint)GetDisplayForRect(__dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayForWindow")]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForWindow(WindowHandle window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            (sbyte*)GetDisplayNameRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetDisplayNameRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetDisplayProperties(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplays")]
        [return: NativeTypeName("SDL_DisplayID *")]
        public static extern uint* GetDisplays(int* count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetDisplays(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetDisplays(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayUsableBounds")]
        [return: NativeTypeName("bool")]
        public static extern byte GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetDisplayUsableBounds(displayID, __dsl_rect);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetError() => (sbyte*)GetErrorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetError")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetErrorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetEventFilter")]
        [return: NativeTypeName("bool")]
        public static extern byte GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] EventFilter* filter,
            void** userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] Ref<EventFilter> filter,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            fixed (EventFilter* __dsl_filter = filter)
            {
                return (MaybeBool<byte>)(byte)GetEventFilter(__dsl_filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetFloatProperty")]
        public static extern float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (float)GetFloatProperty(props, __dsl_name, default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetFullscreenDisplayModes")]
        public static extern DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (DisplayMode**)GetFullscreenDisplayModes(displayID, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            GamepadHandle gamepad,
            GamepadAxis axis
        ) => (sbyte*)GetGamepadAppleSFSymbolsNameForAxisRaw(gamepad, axis);

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis"
        )]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadAppleSFSymbolsNameForAxisRaw(
            GamepadHandle gamepad,
            GamepadAxis axis
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => (sbyte*)GetGamepadAppleSFSymbolsNameForButtonRaw(gamepad, button);

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton"
        )]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadAppleSFSymbolsNameForButtonRaw(
            GamepadHandle gamepad,
            GamepadButton button
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadAxis")]
        [return: NativeTypeName("Sint16")]
        public static extern short GetGamepadAxis(GamepadHandle gamepad, GamepadAxis axis);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadAxisFromString")]
        public static extern GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadAxis)GetGamepadAxisFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadBindings")]
        public static extern GamepadBinding** GetGamepadBindings(GamepadHandle gamepad, int* count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<GamepadBinding> GetGamepadBindings(
            GamepadHandle gamepad,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (GamepadBinding**)GetGamepadBindings(gamepad, __dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        public static MaybeBool<byte> GetGamepadButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => (MaybeBool<byte>)(byte)GetGamepadButtonRaw(gamepad, button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadButtonFromString")]
        public static extern GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadButton)GetGamepadButtonFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadButtonLabel")]
        public static extern GamepadButtonLabel GetGamepadButtonLabel(
            GamepadHandle gamepad,
            GamepadButton button
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadButtonLabelForType")]
        public static extern GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadButton")]
        [return: NativeTypeName("bool")]
        public static extern byte GetGamepadButtonRaw(GamepadHandle gamepad, GamepadButton button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadConnectionState")]
        public static extern JoystickConnectionState GetGamepadConnectionState(
            GamepadHandle gamepad
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadFirmwareVersion(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadFromID")]
        public static extern GamepadHandle GetGamepadFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        public static extern GamepadHandle GetGamepadFromPlayerIndex(int player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadGUIDForID")]
        public static extern Guid GetGamepadGuidForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadID")]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint GetGamepadID(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadJoystick")]
        public static extern JoystickHandle GetGamepadJoystick(GamepadHandle gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMapping(GamepadHandle gamepad) =>
            (sbyte*)GetGamepadMappingRaw(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForGuid(Guid guid) =>
            (sbyte*)GetGamepadMappingForGuidRaw(guid);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadMappingForGuidRaw(Guid guid);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadMappingForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadMappingForID")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadMappingForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadMapping")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadMappingRaw(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadMappings")]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GetGamepadMappings(int* count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (sbyte**)GetGamepadMappings(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadName(GamepadHandle gamepad) =>
            (sbyte*)GetGamepadNameRaw(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadNameForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadNameRaw(GamepadHandle gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPath(GamepadHandle gamepad) =>
            (sbyte*)GetGamepadPathRaw(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadPathForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadPathForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadPathForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadPath")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadPathRaw(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadPlayerIndex")]
        public static extern int GetGamepadPlayerIndex(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
        public static extern int GetGamepadPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadPowerInfo")]
        public static extern PowerState GetGamepadPowerInfo(GamepadHandle gamepad, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(GamepadHandle gamepad, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            {
                return (PowerState)GetGamepadPowerInfo(gamepad, __dsl_percent);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadProduct")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProduct(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadProductForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProductForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadProductVersion")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProductVersion(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadProductVersionForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetGamepadProperties(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepads")]
        [return: NativeTypeName("SDL_JoystickID *")]
        public static extern uint* GetGamepads(int* count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetGamepads(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetGamepads(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadSensorData")]
        [return: NativeTypeName("bool")]
        public static extern byte GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            float* data,
            int num_values
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)
                    (byte)GetGamepadSensorData(gamepad, type, __dsl_data, num_values);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadSensorDataRate")]
        public static extern float GetGamepadSensorDataRate(GamepadHandle gamepad, SensorType type);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadSerial(GamepadHandle gamepad) =>
            (sbyte*)GetGamepadSerialRaw(gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadSerial")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadSerialRaw(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadSteamHandle")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetGamepadSteamHandle(GamepadHandle gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            (sbyte*)GetGamepadStringForAxisRaw(axis);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForAxis")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            (sbyte*)GetGamepadStringForButtonRaw(button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForButton")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForButtonRaw(GamepadButton button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            (sbyte*)GetGamepadStringForTypeRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForType")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForTypeRaw(GamepadType type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [return: NativeTypeName("bool")]
        public static extern byte GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            bool* down,
            float* x,
            float* y,
            float* pressure
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            Ref<bool> down,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        )
        {
            fixed (float* __dsl_pressure = pressure)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (bool* __dsl_down = down)
            {
                return (MaybeBool<byte>)
                    (byte)GetGamepadTouchpadFinger(
                        gamepad,
                        touchpad,
                        finger,
                        __dsl_down,
                        __dsl_x,
                        __dsl_y,
                        __dsl_pressure
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadType")]
        public static extern GamepadType GetGamepadType(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadTypeForID")]
        public static extern GamepadType GetGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadTypeFromString")]
        public static extern GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadType)GetGamepadTypeFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadVendor")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadVendor(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadVendorForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadVendorForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGlobalMouseState")]
        [return: NativeTypeName("SDL_MouseButtonFlags")]
        public static extern uint GetGlobalMouseState(float* x, float* y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetGlobalMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGlobalProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetGlobalProperties();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGrabbedWindow")]
        public static extern WindowHandle GetGrabbedWindow();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        public static MaybeBool<byte> GetHapticEffectStatus(HapticHandle haptic, int effect) =>
            (MaybeBool<byte>)(byte)GetHapticEffectStatusRaw(haptic, effect);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticEffectStatus")]
        [return: NativeTypeName("bool")]
        public static extern byte GetHapticEffectStatusRaw(HapticHandle haptic, int effect);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticFeatures")]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetHapticFeatures(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticFromID")]
        public static extern HapticHandle GetHapticFromID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticID")]
        [return: NativeTypeName("SDL_HapticID")]
        public static extern uint GetHapticID(HapticHandle haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticName(HapticHandle haptic) =>
            (sbyte*)GetHapticNameRaw(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticNameForID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => (sbyte*)GetHapticNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHapticNameForIDRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHapticNameRaw(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHaptics")]
        [return: NativeTypeName("SDL_HapticID *")]
        public static extern uint* GetHaptics(int* count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetHaptics(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetHaptics(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHint")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHint([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetHint(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHintBoolean")]
        [return: NativeTypeName("bool")]
        public static extern byte GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)GetHintBoolean(__dsl_name, (byte)default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetIOProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetIOProperties(IOStreamHandle context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetIOSize")]
        [return: NativeTypeName("Sint64")]
        public static extern long GetIOSize(IOStreamHandle context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetIOStatus")]
        public static extern IOStatus GetIOStatus(IOStreamHandle context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickAxis")]
        [return: NativeTypeName("Sint16")]
        public static extern short GetJoystickAxis(JoystickHandle joystick, int axis);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [return: NativeTypeName("bool")]
        public static extern byte GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        )
        {
            fixed (short* __dsl_state = state)
            {
                return (MaybeBool<byte>)
                    (byte)GetJoystickAxisInitialState(joystick, axis, __dsl_state);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickBall")]
        [return: NativeTypeName("bool")]
        public static extern byte GetJoystickBall(
            JoystickHandle joystick,
            int ball,
            int* dx,
            int* dy
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetJoystickBall(
            JoystickHandle joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        )
        {
            fixed (int* __dsl_dy = dy)
            fixed (int* __dsl_dx = dx)
            {
                return (MaybeBool<byte>)(byte)GetJoystickBall(joystick, ball, __dsl_dx, __dsl_dy);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        public static MaybeBool<byte> GetJoystickButton(JoystickHandle joystick, int button) =>
            (MaybeBool<byte>)(byte)GetJoystickButtonRaw(joystick, button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickButton")]
        [return: NativeTypeName("bool")]
        public static extern byte GetJoystickButtonRaw(JoystickHandle joystick, int button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickConnectionState")]
        public static extern JoystickConnectionState GetJoystickConnectionState(
            JoystickHandle joystick
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickFirmwareVersion(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickFromID")]
        public static extern JoystickHandle GetJoystickFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        public static extern JoystickHandle GetJoystickFromPlayerIndex(int player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickGUID")]
        public static extern Guid GetJoystickGuid(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickGUIDForID")]
        public static extern Guid GetJoystickGuidForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickGUIDInfo")]
        public static extern void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        )
        {
            fixed (ushort* __dsl_crc16 = crc16)
            fixed (ushort* __dsl_version = version)
            fixed (ushort* __dsl_product = product)
            fixed (ushort* __dsl_vendor = vendor)
            {
                GetJoystickGuidInfo(guid, __dsl_vendor, __dsl_product, __dsl_version, __dsl_crc16);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickHat")]
        [return: NativeTypeName("Uint8")]
        public static extern byte GetJoystickHat(JoystickHandle joystick, int hat);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickID")]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint GetJoystickID(JoystickHandle joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickName(JoystickHandle joystick) =>
            (sbyte*)GetJoystickNameRaw(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetJoystickNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickNameForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickNameRaw(JoystickHandle joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPath(JoystickHandle joystick) =>
            (sbyte*)GetJoystickPathRaw(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetJoystickPathForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickPathForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickPathForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickPath")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickPathRaw(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickPlayerIndex")]
        public static extern int GetJoystickPlayerIndex(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
        public static extern int GetJoystickPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickPowerInfo")]
        public static extern PowerState GetJoystickPowerInfo(JoystickHandle joystick, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(JoystickHandle joystick, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            {
                return (PowerState)GetJoystickPowerInfo(joystick, __dsl_percent);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickProduct")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProduct(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickProductForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProductForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickProductVersion")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProductVersion(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickProductVersionForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetJoystickProperties(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoysticks")]
        [return: NativeTypeName("SDL_JoystickID *")]
        public static extern uint* GetJoysticks(int* count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetJoysticks(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetJoysticks(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickSerial(JoystickHandle joystick) =>
            (sbyte*)GetJoystickSerialRaw(joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickSerial")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickSerialRaw(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickType")]
        public static extern JoystickType GetJoystickType(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickTypeForID")]
        public static extern JoystickType GetJoystickTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickVendor")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickVendor(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickVendorForID")]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickVendorForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboardFocus")]
        public static extern WindowHandle GetKeyboardFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyboardNameForID(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => (sbyte*)GetKeyboardNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboardNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetKeyboardNameForIDRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboards")]
        [return: NativeTypeName("SDL_KeyboardID *")]
        public static extern uint* GetKeyboards(int* count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetKeyboards(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetKeyboards(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboardState")]
        [return: NativeTypeName("const bool *")]
        public static extern bool* GetKeyboardState(int* numkeys);

        [return: NativeTypeName("const bool *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<bool> GetKeyboardState(Ref<int> numkeys)
        {
            fixed (int* __dsl_numkeys = numkeys)
            {
                return (bool*)GetKeyboardState(__dsl_numkeys);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyFromName")]
        [return: NativeTypeName("SDL_Keycode")]
        public static extern uint GetKeyFromName([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (uint)GetKeyFromName(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyFromScancode")]
        [return: NativeTypeName("SDL_Keycode")]
        public static extern uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] byte key_event
        );

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
        public static uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] MaybeBool<byte> key_event
        ) => (uint)GetKeyFromScancode(scancode, modstate, (byte)key_event);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] uint key) =>
            (sbyte*)GetKeyNameRaw(key);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] uint key);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetLogOutputFunction")]
        public static extern void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] LogOutputFunction* callback,
            void** userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] Ref<LogOutputFunction> callback,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            fixed (LogOutputFunction* __dsl_callback = callback)
            {
                GetLogOutputFunction(__dsl_callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetLogPriority")]
        public static extern LogPriority GetLogPriority(int category);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMasksForPixelFormat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetMasksForPixelFormat(
            PixelFormat format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetMasksForPixelFormat(
            PixelFormat format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        )
        {
            fixed (uint* __dsl_Amask = Amask)
            fixed (uint* __dsl_Bmask = Bmask)
            fixed (uint* __dsl_Gmask = Gmask)
            fixed (uint* __dsl_Rmask = Rmask)
            fixed (int* __dsl_bpp = bpp)
            {
                return (MaybeBool<byte>)
                    (byte)GetMasksForPixelFormat(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMaxHapticEffects")]
        public static extern int GetMaxHapticEffects(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        public static extern int GetMaxHapticEffectsPlaying(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMice")]
        [return: NativeTypeName("SDL_MouseID *")]
        public static extern uint* GetMice(int* count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetMice(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetMice(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetModState")]
        [return: NativeTypeName("SDL_Keymod")]
        public static extern ushort GetModState();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMouseFocus")]
        public static extern WindowHandle GetMouseFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetMouseNameForID(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => (sbyte*)GetMouseNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMouseNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetMouseNameForIDRaw(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMouseState")]
        [return: NativeTypeName("SDL_MouseButtonFlags")]
        public static extern uint GetMouseState(float* x, float* y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNaturalDisplayOrientation")]
        public static extern DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumAudioDrivers")]
        public static extern int GetNumAudioDrivers();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumberProperty")]
        [return: NativeTypeName("Sint64")]
        public static extern long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        );

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (long)GetNumberProperty(props, __dsl_name, default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumCameraDrivers")]
        public static extern int GetNumCameraDrivers();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        public static extern int GetNumGamepadTouchpadFingers(GamepadHandle gamepad, int touchpad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumGamepadTouchpads")]
        public static extern int GetNumGamepadTouchpads(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumHapticAxes")]
        public static extern int GetNumHapticAxes(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumJoystickAxes")]
        public static extern int GetNumJoystickAxes(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumJoystickBalls")]
        public static extern int GetNumJoystickBalls(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumJoystickButtons")]
        public static extern int GetNumJoystickButtons(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumJoystickHats")]
        public static extern int GetNumJoystickHats(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumLogicalCPUCores")]
        public static extern int GetNumLogicalCPUCores();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumRenderDrivers")]
        public static extern int GetNumRenderDrivers();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetNumVideoDrivers")]
        public static extern int GetNumVideoDrivers();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPathInfo")]
        [return: NativeTypeName("bool")]
        public static extern byte GetPathInfo(
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetPathInfo(__dsl_path, __dsl_info);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPerformanceCounter")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetPerformanceCounter();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPerformanceFrequency")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetPerformanceFrequency();

        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<PixelFormatDetails> GetPixelFormatDetails(PixelFormat format) =>
            (PixelFormatDetails*)GetPixelFormatDetailsRaw(format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPixelFormatDetails")]
        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        public static extern PixelFormatDetails* GetPixelFormatDetailsRaw(PixelFormat format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPixelFormatForMasks")]
        public static extern PixelFormat GetPixelFormatForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPixelFormatName(PixelFormat format) =>
            (sbyte*)GetPixelFormatNameRaw(format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPixelFormatName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetPixelFormatNameRaw(PixelFormat format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPlatform() => (sbyte*)GetPlatformRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPlatform")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetPlatformRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPointerProperty")]
        public static extern void* GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        )
        {
            fixed (void* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (void*)GetPointerProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPowerInfo")]
        public static extern PowerState GetPowerInfo(int* seconds, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (int* __dsl_seconds = seconds)
            {
                return (PowerState)GetPowerInfo(__dsl_seconds, __dsl_percent);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPreferredLocales")]
        public static extern Locale** GetPreferredLocales(int* count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Locale> GetPreferredLocales(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (Locale**)GetPreferredLocales(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPrefPath")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        );

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (sbyte*)GetPrefPath(__dsl_org, __dsl_app);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPrimaryDisplay")]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrimarySelectionText() => (sbyte*)GetPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPrimarySelectionText")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPropertyType")]
        public static extern PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (PropertyType)GetPropertyType(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRealGamepadType")]
        public static extern GamepadType GetRealGamepadType(GamepadHandle gamepad);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRealGamepadTypeForID")]
        public static extern GamepadType GetRealGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectAndLineIntersection")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        )
        {
            fixed (int* __dsl_Y2 = Y2)
            fixed (int* __dsl_X2 = X2)
            fixed (int* __dsl_Y1 = Y1)
            fixed (int* __dsl_X1 = X1)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_GetRectAndLineIntersectionFloat"
        )]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        )
        {
            fixed (float* __dsl_Y2 = Y2)
            fixed (float* __dsl_X2 = X2)
            fixed (float* __dsl_Y1 = Y1)
            fixed (float* __dsl_X1 = X1)
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectEnclosingPoints")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_clip = clip)
            fixed (Point* __dsl_points = points)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectEnclosingPoints(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_clip = clip)
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectEnclosingPointsFloat(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectIntersection")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectIntersectionFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectUnion")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRectUnionFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRelativeMouseState")]
        [return: NativeTypeName("SDL_MouseButtonFlags")]
        public static extern uint GetRelativeMouseState(float* x, float* y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetRelativeMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderClipRect")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderClipRect(RendererHandle renderer, Rect* rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderClipRect(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderClipRect(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderColorScale")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderColorScale(RendererHandle renderer, float* scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderColorScale(RendererHandle renderer, Ref<float> scale)
        {
            fixed (float* __dsl_scale = scale)
            {
                return (MaybeBool<byte>)(byte)GetRenderColorScale(renderer, __dsl_scale);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            {
                return (MaybeBool<byte>)(byte)GetRenderDrawBlendMode(renderer, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderDrawColor")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderDrawColor(renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderDrawColorFloat(
            RendererHandle renderer,
            float* r,
            float* g,
            float* b,
            float* a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawColorFloat(
            RendererHandle renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderDrawColorFloat(renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRenderDriver(int index) => (sbyte*)GetRenderDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetRenderDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderer")]
        public static extern RendererHandle GetRenderer(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRendererFromTexture")]
        public static extern RendererHandle GetRendererFromTexture(Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle GetRendererFromTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (RendererHandle)GetRendererFromTexture(__dsl_texture);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRendererName(RendererHandle renderer) =>
            (sbyte*)GetRendererNameRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRendererName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetRendererNameRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRendererProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetRendererProperties(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderLogicalPresentation(
            RendererHandle renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderLogicalPresentation(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode
        )
        {
            fixed (RendererLogicalPresentation* __dsl_mode = mode)
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderLogicalPresentation(renderer, __dsl_w, __dsl_h, __dsl_mode);
            }
        }

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_GetRenderLogicalPresentationRect"
        )]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderLogicalPresentationRect(
            RendererHandle renderer,
            FRect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderLogicalPresentationRect(
            RendererHandle renderer,
            Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderLogicalPresentationRect(renderer, __dsl_rect);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalCommandEncoder(RendererHandle renderer) =>
            (void*)GetRenderMetalCommandEncoderRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        public static extern void* GetRenderMetalCommandEncoderRaw(RendererHandle renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalLayer(RendererHandle renderer) =>
            (void*)GetRenderMetalLayerRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderMetalLayer")]
        public static extern void* GetRenderMetalLayerRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderOutputSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderOutputSize(RendererHandle renderer, int* w, int* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetRenderOutputSize(renderer, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderSafeArea")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderSafeArea(RendererHandle renderer, Rect* rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderSafeArea(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderSafeArea(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderScale")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderScale(
            RendererHandle renderer,
            float* scaleX,
            float* scaleY
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderScale(
            RendererHandle renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        )
        {
            fixed (float* __dsl_scaleY = scaleY)
            fixed (float* __dsl_scaleX = scaleX)
            {
                return (MaybeBool<byte>)(byte)GetRenderScale(renderer, __dsl_scaleX, __dsl_scaleY);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> GetRenderTarget(RendererHandle renderer) =>
            (Texture*)GetRenderTargetRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderTarget")]
        public static extern Texture* GetRenderTargetRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderViewport")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderViewport(RendererHandle renderer, Rect* rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderViewport(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderViewport(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderVSync")]
        [return: NativeTypeName("bool")]
        public static extern byte GetRenderVSync(RendererHandle renderer, int* vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderVSync(RendererHandle renderer, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            {
                return (MaybeBool<byte>)(byte)GetRenderVSync(renderer, __dsl_vsync);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderWindow")]
        public static extern WindowHandle GetRenderWindow(RendererHandle renderer);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRevision() => (sbyte*)GetRevisionRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRevision")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetRevisionRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRGB")]
        public static extern void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                GetRGB(pixel, __dsl_format, __dsl_palette, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRGBA")]
        public static extern void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                GetRgba(pixel, __dsl_format, __dsl_palette, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSandbox")]
        public static extern Sandbox GetSandbox();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetScancodeFromKey")]
        public static extern Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] ushort* modstate
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] Ref<ushort> modstate
        )
        {
            fixed (ushort* __dsl_modstate = modstate)
            {
                return (Scancode)GetScancodeFromKey(key, __dsl_modstate);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetScancodeFromName")]
        public static extern Scancode GetScancodeFromName(
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (Scancode)GetScancodeFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
            (sbyte*)GetScancodeNameRaw(scancode);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetScancodeName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetScancodeNameRaw(Scancode scancode);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSemaphoreValue")]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetSemaphoreValue(SemaphoreHandle sem);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorData")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSensorData(SensorHandle sensor, float* data, int num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSensorData(
            SensorHandle sensor,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)GetSensorData(sensor, __dsl_data, num_values);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorFromID")]
        public static extern SensorHandle GetSensorFromID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorID")]
        [return: NativeTypeName("SDL_SensorID")]
        public static extern uint GetSensorID(SensorHandle sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorName(SensorHandle sensor) =>
            (sbyte*)GetSensorNameRaw(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorNameForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => (sbyte*)GetSensorNameForIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorNameForID")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetSensorNameForIDRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetSensorNameRaw(SensorHandle sensor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorNonPortableType")]
        public static extern int GetSensorNonPortableType(SensorHandle sensor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
        public static extern int GetSensorNonPortableTypeForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetSensorProperties(SensorHandle sensor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensors")]
        [return: NativeTypeName("SDL_SensorID *")]
        public static extern uint* GetSensors(int* count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetSensors(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetSensors(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorType")]
        public static extern SensorType GetSensorType(SensorHandle sensor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorTypeForID")]
        public static extern SensorType GetSensorTypeForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSilenceValueForFormat")]
        public static extern int GetSilenceValueForFormat(AudioFormat format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSIMDAlignment")]
        [return: NativeTypeName("size_t")]
        public static extern nuint GetSimdAlignment();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetStorageFileSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        )
        {
            fixed (ulong* __dsl_length = length)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetStorageFileSize(storage, __dsl_path, __dsl_length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetStoragePathInfo")]
        [return: NativeTypeName("bool")]
        public static extern byte GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetStoragePathInfo(storage, __dsl_path, __dsl_info);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetStorageSpaceRemaining(StorageHandle storage);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetStringProperty")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        )
        {
            fixed (sbyte* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetStringProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* alpha
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceClipRect")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSurfaceClipRect(Surface* surface, Rect* rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceColorKey")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("Uint32 *")] uint* key
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        )
        {
            fixed (uint* __dsl_key = key)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceColorKey(__dsl_surface, __dsl_key);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceColorMod")]
        [return: NativeTypeName("bool")]
        public static extern byte GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceColorspace")]
        public static extern Colorspace GetSurfaceColorspace(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Colorspace GetSurfaceColorspace(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Colorspace)GetSurfaceColorspace(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceImages")]
        public static extern Surface** GetSurfaceImages(Surface* surface, int* count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Surface> GetSurfaceImages(Ref<Surface> surface, Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface**)GetSurfaceImages(__dsl_surface, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfacePalette")]
        public static extern Palette* GetSurfacePalette(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> GetSurfacePalette(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Palette*)GetSurfacePalette(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSurfaceProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetSurfaceProperties(Surface* surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)GetSurfaceProperties(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSystemRAM")]
        public static extern int GetSystemRAM();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSystemTheme")]
        public static extern SystemTheme GetSystemTheme();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextInputArea")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextInputArea(WindowHandle window, Rect* rect, int* cursor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextInputArea(
            WindowHandle window,
            Ref<Rect> rect,
            Ref<int> cursor
        )
        {
            fixed (int* __dsl_cursor = cursor)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetTextInputArea(window, __dsl_rect, __dsl_cursor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureAlphaMod")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureAlphaMod(
            Texture* texture,
            [NativeTypeName("Uint8 *")] byte* alpha
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureAlphaModFloat(Texture* texture, float* alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureAlphaModFloat(
            Ref<Texture> texture,
            Ref<float> alpha
        )
        {
            fixed (float* __dsl_alpha = alpha)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureColorMod")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureColorModFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureColorModFloat(
            Texture* texture,
            float* r,
            float* g,
            float* b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureColorModFloat(
            Ref<Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        )
        {
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetTextureProperties(Texture* texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (uint)GetTextureProperties(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureScaleMode")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureScaleMode(Texture* texture, ScaleMode* scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureScaleMode(
            Ref<Texture> texture,
            Ref<ScaleMode> scaleMode
        )
        {
            fixed (ScaleMode* __dsl_scaleMode = scaleMode)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTextureSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetTextureSize(Texture* texture, float* w, float* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureSize(
            Ref<Texture> texture,
            Ref<float> w,
            Ref<float> h
        )
        {
            fixed (float* __dsl_h = h)
            fixed (float* __dsl_w = w)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureSize(__dsl_texture, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetThreadID")]
        [return: NativeTypeName("SDL_ThreadID")]
        public static extern ulong GetThreadID(ThreadHandle thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetThreadName(ThreadHandle thread) =>
            (sbyte*)GetThreadNameRaw(thread);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetThreadName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetThreadNameRaw(ThreadHandle thread);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTicks")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetTicks();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTicksNS")]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetTicksNS();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTLS")]
        public static extern void* GetTLS([NativeTypeName("SDL_TLSID *")] AtomicInt* id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetTLS([NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id)
        {
            fixed (AtomicInt* __dsl_id = id)
            {
                return (void*)GetTLS(__dsl_id);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetTouchDeviceName(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => (sbyte*)GetTouchDeviceNameRaw(touchID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTouchDeviceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetTouchDeviceNameRaw(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTouchDevices")]
        [return: NativeTypeName("SDL_TouchID *")]
        public static extern ulong* GetTouchDevices(int* count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<ulong> GetTouchDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (ulong*)GetTouchDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTouchDeviceType")]
        public static extern TouchDeviceType GetTouchDeviceType(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTouchFingers")]
        public static extern Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (Finger**)GetTouchFingers(touchID, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetUserFolder(Folder folder) => (sbyte*)GetUserFolderRaw(folder);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetUserFolder")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetUserFolderRaw(Folder folder);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetVersion")]
        public static extern int GetVersion();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetVideoDriver(int index) => (sbyte*)GetVideoDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetVideoDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetVideoDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowAspectRatio")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowAspectRatio(
            WindowHandle window,
            float* min_aspect,
            float* max_aspect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowAspectRatio(
            WindowHandle window,
            Ref<float> min_aspect,
            Ref<float> max_aspect
        )
        {
            fixed (float* __dsl_max_aspect = max_aspect)
            fixed (float* __dsl_min_aspect = min_aspect)
            {
                return (MaybeBool<byte>)
                    (byte)GetWindowAspectRatio(window, __dsl_min_aspect, __dsl_max_aspect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowBordersSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowBordersSize(
            WindowHandle window,
            int* top,
            int* left,
            int* bottom,
            int* right
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowBordersSize(
            WindowHandle window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        )
        {
            fixed (int* __dsl_right = right)
            fixed (int* __dsl_bottom = bottom)
            fixed (int* __dsl_left = left)
            fixed (int* __dsl_top = top)
            {
                return (MaybeBool<byte>)
                    (byte)GetWindowBordersSize(
                        window,
                        __dsl_top,
                        __dsl_left,
                        __dsl_bottom,
                        __dsl_right
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowDisplayScale")]
        public static extern float GetWindowDisplayScale(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowFlags")]
        [return: NativeTypeName("SDL_WindowFlags")]
        public static extern ulong GetWindowFlags(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowFromEvent")]
        public static extern WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Event* @event
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (WindowHandle)GetWindowFromEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowFromID")]
        public static extern WindowHandle GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetWindowFullscreenMode(WindowHandle window) =>
            (DisplayMode*)GetWindowFullscreenModeRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowFullscreenMode")]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetWindowFullscreenModeRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowICCProfile")]
        public static extern void* GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] nuint* size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            {
                return (void*)GetWindowICCProfile(window, __dsl_size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowID")]
        [return: NativeTypeName("SDL_WindowID")]
        public static extern uint GetWindowID(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        public static MaybeBool<byte> GetWindowKeyboardGrab(WindowHandle window) =>
            (MaybeBool<byte>)(byte)GetWindowKeyboardGrabRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowKeyboardGrabRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowMaximumSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowMaximumSize(WindowHandle window, int* w, int* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowMaximumSize(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowMaximumSize(window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowMinimumSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowMinimumSize(WindowHandle window, int* w, int* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowMinimumSize(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowMinimumSize(window, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        public static MaybeBool<byte> GetWindowMouseGrab(WindowHandle window) =>
            (MaybeBool<byte>)(byte)GetWindowMouseGrabRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowMouseGrab")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowMouseGrabRaw(WindowHandle window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Rect> GetWindowMouseRect(WindowHandle window) =>
            (Rect*)GetWindowMouseRectRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowMouseRect")]
        [return: NativeTypeName("const SDL_Rect *")]
        public static extern Rect* GetWindowMouseRectRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowOpacity")]
        public static extern float GetWindowOpacity(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowParent")]
        public static extern WindowHandle GetWindowParent(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowPixelDensity")]
        public static extern float GetWindowPixelDensity(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowPixelFormat")]
        public static extern PixelFormat GetWindowPixelFormat(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowPosition")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowPosition(WindowHandle window, int* x, int* y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowPosition(WindowHandle window, Ref<int> x, Ref<int> y)
        {
            fixed (int* __dsl_y = y)
            fixed (int* __dsl_x = x)
            {
                return (MaybeBool<byte>)(byte)GetWindowPosition(window, __dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowProperties")]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetWindowProperties(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        public static MaybeBool<byte> GetWindowRelativeMouseMode(WindowHandle window) =>
            (MaybeBool<byte>)(byte)GetWindowRelativeMouseModeRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowRelativeMouseModeRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindows")]
        public static extern WindowHandle* GetWindows(int* count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<WindowHandle> GetWindows(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (WindowHandle*)GetWindows(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowSafeArea")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowSafeArea(WindowHandle window, Rect* rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSafeArea(WindowHandle window, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetWindowSafeArea(window, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowSize")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowSize(WindowHandle window, int* w, int* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSize(WindowHandle window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowSize(window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowSizeInPixels")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowSizeInPixels(WindowHandle window, int* w, int* h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSizeInPixels(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowSizeInPixels(window, __dsl_w, __dsl_h);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> GetWindowSurface(WindowHandle window) =>
            (Surface*)GetWindowSurfaceRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowSurface")]
        public static extern Surface* GetWindowSurfaceRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [return: NativeTypeName("bool")]
        public static extern byte GetWindowSurfaceVSync(WindowHandle window, int* vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSurfaceVSync(WindowHandle window, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            {
                return (MaybeBool<byte>)(byte)GetWindowSurfaceVSync(window, __dsl_vsync);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetWindowTitle(WindowHandle window) =>
            (sbyte*)GetWindowTitleRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowTitle")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetWindowTitleRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_CreateContext")]
        [return: NativeTypeName("SDL_GLContext")]
        public static extern GLContextStateHandle GLCreateContext(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
        public static MaybeBool<byte> GLDestroyContext(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => (MaybeBool<byte>)(byte)GLDestroyContextRaw(context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_DestroyContext")]
        [return: NativeTypeName("bool")]
        public static extern byte GLDestroyContextRaw(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_ExtensionSupported")]
        [return: NativeTypeName("bool")]
        public static extern byte GLExtensionSupported(
            [NativeTypeName("const char *")] sbyte* extension
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        )
        {
            fixed (sbyte* __dsl_extension = extension)
            {
                return (MaybeBool<byte>)(byte)GLExtensionSupported(__dsl_extension);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetAttribute")]
        [return: NativeTypeName("bool")]
        public static extern byte GLGetAttribute(GLAttr attr, int* value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLGetAttribute(GLAttr attr, Ref<int> value)
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)GLGetAttribute(attr, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetCurrentContext")]
        [return: NativeTypeName("SDL_GLContext")]
        public static extern GLContextStateHandle GLGetCurrentContext();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetCurrentWindow")]
        public static extern WindowHandle GLGetCurrentWindow();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetProcAddress")]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern FunctionPointer GLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer GLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (FunctionPointer)GLGetProcAddress(__dsl_proc);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetSwapInterval")]
        [return: NativeTypeName("bool")]
        public static extern byte GLGetSwapInterval(int* interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLGetSwapInterval(Ref<int> interval)
        {
            fixed (int* __dsl_interval = interval)
            {
                return (MaybeBool<byte>)(byte)GLGetSwapInterval(__dsl_interval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_LoadLibrary")]
        [return: NativeTypeName("bool")]
        public static extern byte GLLoadLibrary([NativeTypeName("const char *")] sbyte* path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLLoadLibrary(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GLLoadLibrary(__dsl_path);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        public static MaybeBool<byte> GLMakeCurrent(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => (MaybeBool<byte>)(byte)GLMakeCurrentRaw(window, context);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_MakeCurrent")]
        [return: NativeTypeName("bool")]
        public static extern byte GLMakeCurrentRaw(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_ResetAttributes")]
        public static extern void GLResetAttributes();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
        public static MaybeBool<byte> GLSetAttribute(GLAttr attr, int value) =>
            (MaybeBool<byte>)(byte)GLSetAttributeRaw(attr, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_SetAttribute")]
        [return: NativeTypeName("bool")]
        public static extern byte GLSetAttributeRaw(GLAttr attr, int value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
        public static MaybeBool<byte> GLSetSwapInterval(int interval) =>
            (MaybeBool<byte>)(byte)GLSetSwapIntervalRaw(interval);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_SetSwapInterval")]
        [return: NativeTypeName("bool")]
        public static extern byte GLSetSwapIntervalRaw(int interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        public static MaybeBool<byte> GLSwapWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)GLSwapWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_SwapWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte GLSwapWindowRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_UnloadLibrary")]
        public static extern void GLUnloadLibrary();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GlobDirectory")]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        );

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GlobStorageDirectory")]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        );

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobStorageDirectory(
                    storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GUIDToString")]
        public static extern void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                GuidToString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HapticEffectSupported")]
        [return: NativeTypeName("bool")]
        public static extern byte HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            {
                return (MaybeBool<byte>)(byte)HapticEffectSupported(haptic, __dsl_effect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        public static MaybeBool<byte> HapticRumbleSupported(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)HapticRumbleSupportedRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HapticRumbleSupported")]
        [return: NativeTypeName("bool")]
        public static extern byte HapticRumbleSupportedRaw(HapticHandle haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        public static MaybeBool<byte> HasAltiVec() => (MaybeBool<byte>)(byte)HasAltiVecRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAltiVec")]
        [return: NativeTypeName("bool")]
        public static extern byte HasAltiVecRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        public static MaybeBool<byte> HasArmsimd() => (MaybeBool<byte>)(byte)HasArmsimdRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasARMSIMD")]
        [return: NativeTypeName("bool")]
        public static extern byte HasArmsimdRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        public static MaybeBool<byte> HasAVX() => (MaybeBool<byte>)(byte)HasAVXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        public static MaybeBool<byte> HasAVX2() => (MaybeBool<byte>)(byte)HasAVX2Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX2")]
        [return: NativeTypeName("bool")]
        public static extern byte HasAVX2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        public static MaybeBool<byte> HasAVX512F() => (MaybeBool<byte>)(byte)HasAVX512FRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX512F")]
        [return: NativeTypeName("bool")]
        public static extern byte HasAVX512FRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX")]
        [return: NativeTypeName("bool")]
        public static extern byte HasAVXRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasClipboardData")]
        [return: NativeTypeName("bool")]
        public static extern byte HasClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        )
        {
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (MaybeBool<byte>)(byte)HasClipboardData(__dsl_mime_type);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        public static MaybeBool<byte> HasClipboardText() =>
            (MaybeBool<byte>)(byte)HasClipboardTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasClipboardText")]
        [return: NativeTypeName("bool")]
        public static extern byte HasClipboardTextRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        public static MaybeBool<byte> HasEvent([NativeTypeName("Uint32")] uint type) =>
            (MaybeBool<byte>)(byte)HasEventRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasEvent")]
        [return: NativeTypeName("bool")]
        public static extern byte HasEventRaw([NativeTypeName("Uint32")] uint type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        public static MaybeBool<byte> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => (MaybeBool<byte>)(byte)HasEventsRaw(minType, maxType);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasEvents")]
        [return: NativeTypeName("bool")]
        public static extern byte HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        public static MaybeBool<byte> HasGamepad() => (MaybeBool<byte>)(byte)HasGamepadRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasGamepad")]
        [return: NativeTypeName("bool")]
        public static extern byte HasGamepadRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        public static MaybeBool<byte> HasJoystick() => (MaybeBool<byte>)(byte)HasJoystickRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasJoystick")]
        [return: NativeTypeName("bool")]
        public static extern byte HasJoystickRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        public static MaybeBool<byte> HasKeyboard() => (MaybeBool<byte>)(byte)HasKeyboardRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasKeyboard")]
        [return: NativeTypeName("bool")]
        public static extern byte HasKeyboardRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        public static MaybeBool<byte> HasLasx() => (MaybeBool<byte>)(byte)HasLasxRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasLASX")]
        [return: NativeTypeName("bool")]
        public static extern byte HasLasxRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        public static MaybeBool<byte> HasLSX() => (MaybeBool<byte>)(byte)HasLSXRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasLSX")]
        [return: NativeTypeName("bool")]
        public static extern byte HasLSXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        public static MaybeBool<byte> HasMMX() => (MaybeBool<byte>)(byte)HasMMXRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasMMX")]
        [return: NativeTypeName("bool")]
        public static extern byte HasMMXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        public static MaybeBool<byte> HasMouse() => (MaybeBool<byte>)(byte)HasMouseRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasMouse")]
        [return: NativeTypeName("bool")]
        public static extern byte HasMouseRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        public static MaybeBool<byte> HasNeon() => (MaybeBool<byte>)(byte)HasNeonRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasNEON")]
        [return: NativeTypeName("bool")]
        public static extern byte HasNeonRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        public static MaybeBool<byte> HasPrimarySelectionText() =>
            (MaybeBool<byte>)(byte)HasPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasPrimarySelectionText")]
        [return: NativeTypeName("bool")]
        public static extern byte HasPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)HasProperty(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasRectIntersection")]
        [return: NativeTypeName("bool")]
        public static extern byte HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        )
        {
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)HasRectIntersection(__dsl_A, __dsl_B);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasRectIntersectionFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        )
        {
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)HasRectIntersectionFloat(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        public static MaybeBool<byte> HasScreenKeyboardSupport() =>
            (MaybeBool<byte>)(byte)HasScreenKeyboardSupportRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [return: NativeTypeName("bool")]
        public static extern byte HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        public static MaybeBool<byte> HasSSE() => (MaybeBool<byte>)(byte)HasSSERaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        public static MaybeBool<byte> HasSSE2() => (MaybeBool<byte>)(byte)HasSSE2Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE2")]
        [return: NativeTypeName("bool")]
        public static extern byte HasSSE2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        public static MaybeBool<byte> HasSSE3() => (MaybeBool<byte>)(byte)HasSSE3Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE3")]
        [return: NativeTypeName("bool")]
        public static extern byte HasSSE3Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        public static MaybeBool<byte> HasSSE41() => (MaybeBool<byte>)(byte)HasSSE41Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE41")]
        [return: NativeTypeName("bool")]
        public static extern byte HasSSE41Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        public static MaybeBool<byte> HasSSE42() => (MaybeBool<byte>)(byte)HasSSE42Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE42")]
        [return: NativeTypeName("bool")]
        public static extern byte HasSSE42Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE")]
        [return: NativeTypeName("bool")]
        public static extern byte HasSSERaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_ble_scan")]
        public static extern void HidBleScan([NativeTypeName("bool")] byte active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        public static void HidBleScan([NativeTypeName("bool")] MaybeBool<byte> active) =>
            HidBleScan((byte)active);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_close")]
        public static extern int HidClose(HidDeviceHandle dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_device_change_count")]
        [return: NativeTypeName("Uint32")]
        public static extern uint HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => (HidDeviceInfo*)HidEnumerateRaw(vendor_id, product_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_enumerate")]
        public static extern HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_exit")]
        public static extern int HidExit();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_free_enumeration")]
        public static extern void HidFreeEnumeration(HidDeviceInfo* devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs)
        {
            fixed (HidDeviceInfo* __dsl_devs = devs)
            {
                HidFreeEnumeration(__dsl_devs);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidGetDeviceInfo(HidDeviceHandle dev) =>
            (HidDeviceInfo*)HidGetDeviceInfoRaw(dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_device_info")]
        public static extern HidDeviceInfo* HidGetDeviceInfoRaw(HidDeviceHandle dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_feature_report")]
        public static extern int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidGetFeatureReport(dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_indexed_string")]
        public static extern int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetIndexedString(dev, string_index, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_input_report")]
        public static extern int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidGetInputReport(dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_manufacturer_string")]
        public static extern int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetManufacturerString(dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_product_string")]
        public static extern int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetProductString(dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_report_descriptor")]
        public static extern int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        )
        {
            fixed (byte* __dsl_buf = buf)
            {
                return (int)HidGetReportDescriptor(dev, __dsl_buf, buf_size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_get_serial_number_string")]
        public static extern int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetSerialNumberString(dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_init")]
        public static extern int HidInit();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_open")]
        public static extern HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        )
        {
            fixed (uint* __dsl_serial_number = serial_number)
            {
                return (HidDeviceHandle)HidOpen(vendor_id, product_id, __dsl_serial_number);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_open_path")]
        public static extern HidDeviceHandle HidOpenPath(
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (HidDeviceHandle)HidOpenPath(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_read")]
        public static extern int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidRead(dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_read_timeout")]
        public static extern int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidReadTimeout(dev, __dsl_data, length, milliseconds);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_send_feature_report")]
        public static extern int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidSendFeatureReport(dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_set_nonblocking")]
        public static extern int HidSetNonblocking(HidDeviceHandle dev, int nonblock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_write")]
        public static extern int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidWrite(dev, __dsl_data, length);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
        public static MaybeBool<byte> HideCursor() => (MaybeBool<byte>)(byte)HideCursorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HideCursor")]
        [return: NativeTypeName("bool")]
        public static extern byte HideCursorRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        public static MaybeBool<byte> HideWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)HideWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HideWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte HideWindowRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
        public static MaybeBool<byte> Init([NativeTypeName("SDL_InitFlags")] uint flags) =>
            (MaybeBool<byte>)(byte)InitRaw(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        public static MaybeBool<byte> InitHapticRumble(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)InitHapticRumbleRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_InitHapticRumble")]
        [return: NativeTypeName("bool")]
        public static extern byte InitHapticRumbleRaw(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Init")]
        [return: NativeTypeName("bool")]
        public static extern byte InitRaw([NativeTypeName("SDL_InitFlags")] uint flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
        public static MaybeBool<byte> InitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
            (MaybeBool<byte>)(byte)InitSubSystemRaw(flags);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_InitSubSystem")]
        [return: NativeTypeName("bool")]
        public static extern byte InitSubSystemRaw([NativeTypeName("SDL_InitFlags")] uint flags);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOFromConstMem")]
        public static extern IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_mem = mem)
            {
                return (IOStreamHandle)IOFromConstMem(__dsl_mem, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOFromDynamicMem")]
        public static extern IOStreamHandle IOFromDynamicMem();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOFromFile")]
        public static extern IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        )
        {
            fixed (sbyte* __dsl_mode = mode)
            fixed (sbyte* __dsl_file = file)
            {
                return (IOStreamHandle)IOFromFile(__dsl_file, __dsl_mode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOFromMem")]
        public static extern IOStreamHandle IOFromMem(
            void* mem,
            [NativeTypeName("size_t")] nuint size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
        {
            fixed (void* __dsl_mem = mem)
            {
                return (IOStreamHandle)IOFromMem(__dsl_mem, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOvprintf")]
        [return: NativeTypeName("size_t")]
        public static extern nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                return (nuint)IOvprintf(context, __dsl_fmt, __dsl_ap);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        public static MaybeBool<byte> IsGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (MaybeBool<byte>)(byte)IsGamepadRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsGamepad")]
        [return: NativeTypeName("bool")]
        public static extern byte IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        public static MaybeBool<byte> IsJoystickHaptic(JoystickHandle joystick) =>
            (MaybeBool<byte>)(byte)IsJoystickHapticRaw(joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsJoystickHaptic")]
        [return: NativeTypeName("bool")]
        public static extern byte IsJoystickHapticRaw(JoystickHandle joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        public static MaybeBool<byte> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (MaybeBool<byte>)(byte)IsJoystickVirtualRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsJoystickVirtual")]
        [return: NativeTypeName("bool")]
        public static extern byte IsJoystickVirtualRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        public static MaybeBool<byte> IsMouseHaptic() => (MaybeBool<byte>)(byte)IsMouseHapticRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsMouseHaptic")]
        [return: NativeTypeName("bool")]
        public static extern byte IsMouseHapticRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        public static MaybeBool<byte> IsTablet() => (MaybeBool<byte>)(byte)IsTabletRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsTablet")]
        [return: NativeTypeName("bool")]
        public static extern byte IsTabletRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
        public static MaybeBool<byte> IsTV() => (MaybeBool<byte>)(byte)IsTVRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsTV")]
        [return: NativeTypeName("bool")]
        public static extern byte IsTVRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        public static MaybeBool<byte> JoystickConnected(JoystickHandle joystick) =>
            (MaybeBool<byte>)(byte)JoystickConnectedRaw(joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_JoystickConnected")]
        [return: NativeTypeName("bool")]
        public static extern byte JoystickConnectedRaw(JoystickHandle joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        public static MaybeBool<byte> JoystickEventsEnabled() =>
            (MaybeBool<byte>)(byte)JoystickEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_JoystickEventsEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte JoystickEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadBMP")]
        public static extern Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (Surface*)LoadBMP(__dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadBMP_IO")]
        public static extern Surface* LoadBMPIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMPIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => (Surface*)LoadBMPIO(src, (byte)closeio);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadFile")]
        public static extern void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (sbyte* __dsl_file = file)
            {
                return (void*)LoadFile(__dsl_file, __dsl_datasize);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadFile_IO")]
        public static extern void* LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("bool")] byte closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            {
                return (void*)LoadFileIO(src, __dsl_datasize, (byte)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadFunction")]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (FunctionPointer)LoadFunction(handle, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadObject")]
        public static extern SharedObjectHandle LoadObject(
            [NativeTypeName("const char *")] sbyte* sofile
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SharedObjectHandle LoadObject(
            [NativeTypeName("const char *")] Ref<sbyte> sofile
        )
        {
            fixed (sbyte* __dsl_sofile = sofile)
            {
                return (SharedObjectHandle)LoadObject(__dsl_sofile);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadWAV")]
        [return: NativeTypeName("bool")]
        public static extern byte LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LoadWAV_IO")]
        [return: NativeTypeName("bool")]
        public static extern byte LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)
                    (byte)LoadWAVIO(
                        src,
                        (byte)closeio,
                        __dsl_spec,
                        __dsl_audio_buf,
                        __dsl_audio_len
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        public static MaybeBool<byte> LockAudioStream(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)LockAudioStreamRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockAudioStream")]
        [return: NativeTypeName("bool")]
        public static extern byte LockAudioStreamRaw(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockJoysticks")]
        public static extern void LockJoysticks();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockMutex")]
        public static extern void LockMutex(MutexHandle mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
        public static MaybeBool<byte> LockProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => (MaybeBool<byte>)(byte)LockPropertiesRaw(props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockProperties")]
        [return: NativeTypeName("bool")]
        public static extern byte LockPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockRWLockForReading")]
        public static extern void LockRWLockForReading(RWLockHandle rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockRWLockForWriting")]
        public static extern void LockRWLockForWriting(RWLockHandle rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockSpinlock")]
        public static extern void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                LockSpinlock(__dsl_lock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte LockSurface(Surface* surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)LockSurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockTexture")]
        [return: NativeTypeName("bool")]
        public static extern byte LockTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        )
        {
            fixed (int* __dsl_pitch = pitch)
            fixed (void** __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LockTextureToSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte LockTextureToSurface(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockTextureToSurface(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        )
        {
            fixed (Surface** __dsl_surface = surface)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_LogMessageV")]
        public static extern void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MapRGB")]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                return (uint)MapRGB(__dsl_format, __dsl_palette, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MapRGBA")]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                return (uint)MapRgba(__dsl_format, __dsl_palette, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MapSurfaceRGB")]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapSurfaceRGB(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRGB(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)MapSurfaceRGB(__dsl_surface, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MapSurfaceRGBA")]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapSurfaceRgba(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRgba(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)MapSurfaceRgba(__dsl_surface, r, g, b, a);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        public static MaybeBool<byte> MaximizeWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)MaximizeWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MaximizeWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte MaximizeWindowRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
        public static extern void MemoryBarrierAcquireFunction();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
        public static extern void MemoryBarrierReleaseFunction();

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalCreateView(WindowHandle window) => (void*)MetalCreateViewRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Metal_CreateView")]
        [return: NativeTypeName("SDL_MetalView")]
        public static extern void* MetalCreateViewRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Metal_DestroyView")]
        public static extern void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                MetalDestroyView(__dsl_view);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Metal_GetLayer")]
        public static extern void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                return (void*)MetalGetLayer(__dsl_view);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        public static MaybeBool<byte> MinimizeWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)MinimizeWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MinimizeWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte MinimizeWindowRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_MixAudio")]
        [return: NativeTypeName("bool")]
        public static extern byte MixAudio(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> MixAudio(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        )
        {
            fixed (byte* __dsl_src = src)
            fixed (byte* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)(byte)MixAudio(__dsl_dst, __dsl_src, format, len, volume);
            }
        }

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_OnApplicationDidEnterBackground"
        )]
        public static extern void OnApplicationDidEnterBackground();

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_OnApplicationDidEnterForeground"
        )]
        public static extern void OnApplicationDidEnterForeground();

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning"
        )]
        public static extern void OnApplicationDidReceiveMemoryWarning();

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_OnApplicationWillEnterBackground"
        )]
        public static extern void OnApplicationWillEnterBackground();

        [DllImport(
            "SDL3",
            ExactSpelling = true,
            EntryPoint = "SDL_OnApplicationWillEnterForeground"
        )]
        public static extern void OnApplicationWillEnterForeground();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OnApplicationWillTerminate")]
        public static extern void OnApplicationWillTerminate();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenAudioDevice")]
        [return: NativeTypeName("SDL_AudioDeviceID")]
        public static extern uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        );

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        )
        {
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (uint)OpenAudioDevice(devid, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenAudioDeviceStream")]
        public static extern AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (AudioStreamHandle)OpenAudioDeviceStream(
                    devid,
                    __dsl_spec,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenCamera")]
        public static extern CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        )
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (CameraHandle)OpenCamera(instance_id, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenFileStorage")]
        public static extern StorageHandle OpenFileStorage(
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenFileStorage(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (StorageHandle)OpenFileStorage(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenGamepad")]
        public static extern GamepadHandle OpenGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenHaptic")]
        public static extern HapticHandle OpenHaptic(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenHapticFromJoystick")]
        public static extern HapticHandle OpenHapticFromJoystick(JoystickHandle joystick);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenHapticFromMouse")]
        public static extern HapticHandle OpenHapticFromMouse();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenIO")]
        public static extern IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (IOStreamInterface* __dsl_iface = iface)
            {
                return (IOStreamHandle)OpenIO(__dsl_iface, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenJoystick")]
        public static extern JoystickHandle OpenJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenSensor")]
        public static extern SensorHandle OpenSensor(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenStorage")]
        public static extern StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (StorageInterface* __dsl_iface = iface)
            {
                return (StorageHandle)OpenStorage(__dsl_iface, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenTitleStorage")]
        public static extern StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_override = @override)
            {
                return (StorageHandle)OpenTitleStorage(__dsl_override, props);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenURL")]
        [return: NativeTypeName("bool")]
        public static extern byte OpenURL([NativeTypeName("const char *")] sbyte* url);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
        {
            fixed (sbyte* __dsl_url = url)
            {
                return (MaybeBool<byte>)(byte)OpenURL(__dsl_url);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenUserStorage")]
        public static extern StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (StorageHandle)OpenUserStorage(__dsl_org, __dsl_app, props);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
        public static MaybeBool<byte> OutOfMemory() => (MaybeBool<byte>)(byte)OutOfMemoryRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OutOfMemory")]
        [return: NativeTypeName("bool")]
        public static extern byte OutOfMemoryRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
        public static MaybeBool<byte> PauseAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => (MaybeBool<byte>)(byte)PauseAudioDeviceRaw(dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PauseAudioDevice")]
        [return: NativeTypeName("bool")]
        public static extern byte PauseAudioDeviceRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
        public static MaybeBool<byte> PauseAudioStreamDevice(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)PauseAudioStreamDeviceRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PauseAudioStreamDevice")]
        [return: NativeTypeName("bool")]
        public static extern byte PauseAudioStreamDeviceRaw(AudioStreamHandle stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        public static MaybeBool<byte> PauseHaptic(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)PauseHapticRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PauseHaptic")]
        [return: NativeTypeName("bool")]
        public static extern byte PauseHapticRaw(HapticHandle haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PeepEvents")]
        public static extern int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        )
        {
            fixed (Event* __dsl_events = events)
            {
                return (int)PeepEvents(__dsl_events, numevents, action, minType, maxType);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        public static MaybeBool<byte> PlayHapticRumble(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => (MaybeBool<byte>)(byte)PlayHapticRumbleRaw(haptic, strength, length);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PlayHapticRumble")]
        [return: NativeTypeName("bool")]
        public static extern byte PlayHapticRumbleRaw(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PollEvent")]
        [return: NativeTypeName("bool")]
        public static extern byte PollEvent(Event* @event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PollEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)PollEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PremultiplyAlpha")]
        [return: NativeTypeName("bool")]
        public static extern byte PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch,
            [NativeTypeName("bool")] byte linear
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)PremultiplyAlpha(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch,
                        (byte)linear
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [return: NativeTypeName("bool")]
        public static extern byte PremultiplySurfaceAlpha(
            Surface* surface,
            [NativeTypeName("bool")] byte linear
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PremultiplySurfaceAlpha(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)PremultiplySurfaceAlpha(__dsl_surface, (byte)linear);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PumpEvents")]
        public static extern void PumpEvents();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PushEvent")]
        [return: NativeTypeName("bool")]
        public static extern byte PushEvent(Event* @event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PushEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)PushEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PutAudioStreamData")]
        [return: NativeTypeName("bool")]
        public static extern byte PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        )
        {
            fixed (void* __dsl_buf = buf)
            {
                return (MaybeBool<byte>)(byte)PutAudioStreamData(stream, __dsl_buf, len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_Quit")]
        public static extern void Quit();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_QuitSubSystem")]
        public static extern void QuitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        public static MaybeBool<byte> RaiseWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)RaiseWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RaiseWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte RaiseWindowRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadIO")]
        [return: NativeTypeName("size_t")]
        public static extern nuint ReadIO(
            IOStreamHandle context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            IOStreamHandle context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            {
                return (nuint)ReadIO(context, __dsl_ptr, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS16BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS16BE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] short* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS16BE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS16BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS16LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS16LE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] short* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS16LE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS16LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS32BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS32BE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] int* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS32BE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS32BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS32LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS32LE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] int* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS32LE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS32LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS64BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS64BE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] long* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS64BE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS64BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS64LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS64LE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] long* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS64LE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS64LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadS8")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadS8(
            IOStreamHandle src,
            [NativeTypeName("Sint8 *")] sbyte* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS8(
            IOStreamHandle src,
            [NativeTypeName("Sint8 *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS8(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadStorageFile")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_destination = destination)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)ReadStorageFile(storage, __dsl_path, __dsl_destination, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadSurfacePixel")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)ReadSurfacePixel(__dsl_surface, x, y, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float* r,
            float* g,
            float* b,
            float* a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)ReadSurfacePixelFloat(
                        __dsl_surface,
                        x,
                        y,
                        __dsl_r,
                        __dsl_g,
                        __dsl_b,
                        __dsl_a
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU16BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU16BE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] ushort* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU16BE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU16BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU16LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU16LE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] ushort* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU16LE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU16LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU32BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU32BE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] uint* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU32BE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU32BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU32LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU32LE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] uint* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU32LE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU32LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU64BE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU64BE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] ulong* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU64BE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU64BE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU64LE")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU64LE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] ulong* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU64LE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU64LE(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReadU8")]
        [return: NativeTypeName("bool")]
        public static extern byte ReadU8(
            IOStreamHandle src,
            [NativeTypeName("Uint8 *")] byte* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU8(
            IOStreamHandle src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        )
        {
            fixed (byte* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU8(src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RegisterEvents")]
        [return: NativeTypeName("Uint32")]
        public static extern uint RegisterEvents(int numevents);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReleaseCameraFrame")]
        public static extern void ReleaseCameraFrame(CameraHandle camera, Surface* frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ReleaseCameraFrame(CameraHandle camera, Ref<Surface> frame)
        {
            fixed (Surface* __dsl_frame = frame)
            {
                ReleaseCameraFrame(camera, __dsl_frame);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
        public static MaybeBool<byte> ReloadGamepadMappings() =>
            (MaybeBool<byte>)(byte)ReloadGamepadMappingsRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReloadGamepadMappings")]
        [return: NativeTypeName("bool")]
        public static extern byte ReloadGamepadMappingsRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveEventWatch")]
        public static extern void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                RemoveEventWatch(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveHintCallback")]
        public static extern void RemoveHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                RemoveHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemovePath")]
        [return: NativeTypeName("bool")]
        public static extern byte RemovePath([NativeTypeName("const char *")] sbyte* path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)RemovePath(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveStoragePath")]
        [return: NativeTypeName("bool")]
        public static extern byte RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)RemoveStoragePath(storage, __dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        public static extern void RemoveSurfaceAlternateImages(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveSurfaceAlternateImages(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                RemoveSurfaceAlternateImages(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        public static MaybeBool<byte> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            (MaybeBool<byte>)(byte)RemoveTimerRaw(id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveTimer")]
        [return: NativeTypeName("bool")]
        public static extern byte RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenamePath")]
        [return: NativeTypeName("bool")]
        public static extern byte RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)(byte)RenamePath(__dsl_oldpath, __dsl_newpath);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenameStoragePath")]
        [return: NativeTypeName("bool")]
        public static extern byte RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)
                    (byte)RenameStoragePath(storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        public static MaybeBool<byte> RenderClear(RendererHandle renderer) =>
            (MaybeBool<byte>)(byte)RenderClearRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderClear")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderClearRaw(RendererHandle renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        public static MaybeBool<byte> RenderClipEnabled(RendererHandle renderer) =>
            (MaybeBool<byte>)(byte)RenderClipEnabledRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderClipEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderClipEnabledRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        )
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (MaybeBool<byte>)
                    (byte)RenderCoordinatesFromWindow(
                        renderer,
                        window_x,
                        window_y,
                        __dsl_x,
                        __dsl_y
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        )
        {
            fixed (float* __dsl_window_y = window_y)
            fixed (float* __dsl_window_x = window_x)
            {
                return (MaybeBool<byte>)
                    (byte)RenderCoordinatesToWindow(renderer, x, y, __dsl_window_x, __dsl_window_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderDebugText")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] sbyte* str
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (MaybeBool<byte>)(byte)RenderDebugText(renderer, x, y, __dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderFillRect")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)RenderFillRect(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderFillRects")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)(byte)RenderFillRects(renderer, __dsl_rects, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderGeometry")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderGeometry(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderGeometry(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        )
        {
            fixed (int* __dsl_indices = indices)
            fixed (Vertex* __dsl_vertices = vertices)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderGeometry(
                        renderer,
                        __dsl_texture,
                        __dsl_vertices,
                        num_vertices,
                        __dsl_indices,
                        num_indices
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderGeometryRaw")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderGeometryRaw(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderGeometryRaw(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (FColor* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderGeometryRaw(
                        renderer,
                        __dsl_texture,
                        __dsl_xy,
                        xy_stride,
                        __dsl_color,
                        color_stride,
                        __dsl_uv,
                        uv_stride,
                        num_vertices,
                        __dsl_indices,
                        num_indices,
                        size_indices
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        public static MaybeBool<byte> RenderLine(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => (MaybeBool<byte>)(byte)RenderLineRaw(renderer, x1, y1, x2, y2);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderLine")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderLineRaw(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderLines")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)(byte)RenderLines(renderer, __dsl_points, count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        public static MaybeBool<byte> RenderPoint(RendererHandle renderer, float x, float y) =>
            (MaybeBool<byte>)(byte)RenderPointRaw(renderer, x, y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderPoint")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderPointRaw(RendererHandle renderer, float x, float y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderPoints")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)(byte)RenderPoints(renderer, __dsl_points, count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        public static MaybeBool<byte> RenderPresent(RendererHandle renderer) =>
            (MaybeBool<byte>)(byte)RenderPresentRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderPresent")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderPresentRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderReadPixels")]
        public static extern Surface* RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (Surface*)RenderReadPixels(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderRect")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)RenderRect(renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderRects")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)(byte)RenderRects(renderer, __dsl_rects, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderTexture")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderTexture(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTexture(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTexture(renderer, __dsl_texture, __dsl_srcrect, __dsl_dstrect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderTexture9Grid")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderTexture9Grid(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTexture9Grid(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTexture9Grid(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        __dsl_dstrect
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderTextureRotated")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderTextureRotated(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            FlipMode flip
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTextureRotated(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            FlipMode flip
        )
        {
            fixed (FPoint* __dsl_center = center)
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTextureRotated(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        __dsl_dstrect,
                        angle,
                        __dsl_center,
                        flip
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderTextureTiled")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderTextureTiled(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTextureTiled(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTextureTiled(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        scale,
                        __dsl_dstrect
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        public static MaybeBool<byte> RenderViewportSet(RendererHandle renderer) =>
            (MaybeBool<byte>)(byte)RenderViewportSetRaw(renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RenderViewportSet")]
        [return: NativeTypeName("bool")]
        public static extern byte RenderViewportSetRaw(RendererHandle renderer);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ReportAssertion")]
        public static extern AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (sbyte* __dsl_func = func)
            fixed (AssertData* __dsl_data = data)
            {
                return (AssertState)ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResetAssertionReport")]
        public static extern void ResetAssertionReport();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResetHint")]
        [return: NativeTypeName("bool")]
        public static extern byte ResetHint([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)ResetHint(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResetHints")]
        public static extern void ResetHints();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResetKeyboard")]
        public static extern void ResetKeyboard();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResetLogPriorities")]
        public static extern void ResetLogPriorities();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        public static MaybeBool<byte> RestoreWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)RestoreWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RestoreWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte RestoreWindowRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
        public static MaybeBool<byte> ResumeAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => (MaybeBool<byte>)(byte)ResumeAudioDeviceRaw(dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResumeAudioDevice")]
        [return: NativeTypeName("bool")]
        public static extern byte ResumeAudioDeviceRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
        public static MaybeBool<byte> ResumeAudioStreamDevice(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)ResumeAudioStreamDeviceRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResumeAudioStreamDevice")]
        [return: NativeTypeName("bool")]
        public static extern byte ResumeAudioStreamDeviceRaw(AudioStreamHandle stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        public static MaybeBool<byte> ResumeHaptic(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)ResumeHapticRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ResumeHaptic")]
        [return: NativeTypeName("bool")]
        public static extern byte ResumeHapticRaw(HapticHandle haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        public static MaybeBool<byte> RumbleGamepad(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            (MaybeBool<byte>)
                (byte)RumbleGamepadRaw(
                    gamepad,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RumbleGamepad")]
        [return: NativeTypeName("bool")]
        public static extern byte RumbleGamepadRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        public static MaybeBool<byte> RumbleGamepadTriggers(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            (MaybeBool<byte>)
                (byte)RumbleGamepadTriggersRaw(gamepad, left_rumble, right_rumble, duration_ms);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RumbleGamepadTriggers")]
        [return: NativeTypeName("bool")]
        public static extern byte RumbleGamepadTriggersRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        public static MaybeBool<byte> RumbleJoystick(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            (MaybeBool<byte>)
                (byte)RumbleJoystickRaw(
                    joystick,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RumbleJoystick")]
        [return: NativeTypeName("bool")]
        public static extern byte RumbleJoystickRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        public static MaybeBool<byte> RumbleJoystickTriggers(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            (MaybeBool<byte>)
                (byte)RumbleJoystickTriggersRaw(joystick, left_rumble, right_rumble, duration_ms);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RumbleJoystickTriggers")]
        [return: NativeTypeName("bool")]
        public static extern byte RumbleJoystickTriggersRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        public static MaybeBool<byte> RunHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => (MaybeBool<byte>)(byte)RunHapticEffectRaw(haptic, effect, iterations);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RunHapticEffect")]
        [return: NativeTypeName("bool")]
        public static extern byte RunHapticEffectRaw(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SaveBMP")]
        [return: NativeTypeName("bool")]
        public static extern byte SaveBMP(
            Surface* surface,
            [NativeTypeName("const char *")] sbyte* file
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SaveBMP(__dsl_surface, __dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SaveBMP_IO")]
        [return: NativeTypeName("bool")]
        public static extern byte SaveBMPIO(
            Surface* surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] byte closeio
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SaveBMPIO(
            Ref<Surface> surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SaveBMPIO(__dsl_surface, dst, (byte)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ScaleSurface")]
        public static extern Surface* ScaleSurface(
            Surface* surface,
            int width,
            int height,
            ScaleMode scaleMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ScaleSurface(
            Ref<Surface> surface,
            int width,
            int height,
            ScaleMode scaleMode
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ScaleSurface(__dsl_surface, width, height, scaleMode);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        public static MaybeBool<byte> ScreenKeyboardShown(WindowHandle window) =>
            (MaybeBool<byte>)(byte)ScreenKeyboardShownRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ScreenKeyboardShown")]
        [return: NativeTypeName("bool")]
        public static extern byte ScreenKeyboardShownRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        public static MaybeBool<byte> ScreenSaverEnabled() =>
            (MaybeBool<byte>)(byte)ScreenSaverEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ScreenSaverEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte ScreenSaverEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SeekIO")]
        [return: NativeTypeName("Sint64")]
        public static extern long SeekIO(
            IOStreamHandle context,
            [NativeTypeName("Sint64")] long offset,
            IOWhence whence
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SendGamepadEffect")]
        [return: NativeTypeName("bool")]
        public static extern byte SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)SendGamepadEffect(gamepad, __dsl_data, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SendJoystickEffect")]
        [return: NativeTypeName("bool")]
        public static extern byte SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)SendJoystickEffect(joystick, __dsl_data, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [return: NativeTypeName("bool")]
        public static extern byte SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] float* data,
            int num_values
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)
                    (byte)SendJoystickVirtualSensorData(
                        joystick,
                        type,
                        sensor_timestamp,
                        __dsl_data,
                        num_values
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAppMetadata")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAppMetadata(
            [NativeTypeName("const char *")] sbyte* appname,
            [NativeTypeName("const char *")] sbyte* appversion,
            [NativeTypeName("const char *")] sbyte* appidentifier
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAppMetadata(
            [NativeTypeName("const char *")] Ref<sbyte> appname,
            [NativeTypeName("const char *")] Ref<sbyte> appversion,
            [NativeTypeName("const char *")] Ref<sbyte> appidentifier
        )
        {
            fixed (sbyte* __dsl_appidentifier = appidentifier)
            fixed (sbyte* __dsl_appversion = appversion)
            fixed (sbyte* __dsl_appname = appname)
            {
                return (MaybeBool<byte>)
                    (byte)SetAppMetadata(__dsl_appname, __dsl_appversion, __dsl_appidentifier);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAppMetadataProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAppMetadataProperty(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetAppMetadataProperty(__dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAssertionHandler")]
        public static extern void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetAssertionHandler(handler, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAtomicInt")]
        public static extern int SetAtomicInt(AtomicInt* a, int v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAtomicInt(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)SetAtomicInt(__dsl_a, v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAtomicPointer")]
        public static extern void* SetAtomicPointer(void** a, void* v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr SetAtomicPointer(Ref2D a, Ref v)
        {
            fixed (void* __dsl_v = v)
            fixed (void** __dsl_a = a)
            {
                return (void*)SetAtomicPointer(__dsl_a, __dsl_v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAtomicU32")]
        [return: NativeTypeName("Uint32")]
        public static extern uint SetAtomicU32(AtomicU32* a, [NativeTypeName("Uint32")] uint v);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint SetAtomicU32(Ref<AtomicU32> a, [NativeTypeName("Uint32")] uint v)
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (uint)SetAtomicU32(__dsl_a, v);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
        public static MaybeBool<byte> SetAudioDeviceGain(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        ) => (MaybeBool<byte>)(byte)SetAudioDeviceGainRaw(devid, gain);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioDeviceGain")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioDeviceGainRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioPostmixCallback")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioPostmixCallback(devid, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamFormat")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        public static MaybeBool<byte> SetAudioStreamFrequencyRatio(
            AudioStreamHandle stream,
            float ratio
        ) => (MaybeBool<byte>)(byte)SetAudioStreamFrequencyRatioRaw(stream, ratio);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamFrequencyRatioRaw(
            AudioStreamHandle stream,
            float ratio
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
        public static MaybeBool<byte> SetAudioStreamGain(AudioStreamHandle stream, float gain) =>
            (MaybeBool<byte>)(byte)SetAudioStreamGainRaw(stream, gain);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamGain")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamGainRaw(AudioStreamHandle stream, float gain);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamGetCallback(stream, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        )
        {
            fixed (int* __dsl_chmap = chmap)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamInputChannelMap(stream, __dsl_chmap, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        )
        {
            fixed (int* __dsl_chmap = chmap)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamOutputChannelMap(stream, __dsl_chmap, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [return: NativeTypeName("bool")]
        public static extern byte SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamPutCallback(stream, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetBooleanProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetBooleanProperty(props, __dsl_name, (byte)value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetClipboardData")]
        [return: NativeTypeName("bool")]
        public static extern byte SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        )
        {
            fixed (sbyte** __dsl_mime_types = mime_types)
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetClipboardData(
                        callback,
                        cleanup,
                        __dsl_userdata,
                        __dsl_mime_types,
                        num_mime_types
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetClipboardText")]
        [return: NativeTypeName("bool")]
        public static extern byte SetClipboardText([NativeTypeName("const char *")] sbyte* text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetClipboardText(
            [NativeTypeName("const char *")] Ref<sbyte> text
        )
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (MaybeBool<byte>)(byte)SetClipboardText(__dsl_text);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
        public static MaybeBool<byte> SetCurrentThreadPriority(ThreadPriority priority) =>
            (MaybeBool<byte>)(byte)SetCurrentThreadPriorityRaw(priority);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetCurrentThreadPriority")]
        [return: NativeTypeName("bool")]
        public static extern byte SetCurrentThreadPriorityRaw(ThreadPriority priority);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        public static MaybeBool<byte> SetCursor(CursorHandle cursor) =>
            (MaybeBool<byte>)(byte)SetCursorRaw(cursor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetCursor")]
        [return: NativeTypeName("bool")]
        public static extern byte SetCursorRaw(CursorHandle cursor);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetErrorV")]
        [return: NativeTypeName("bool")]
        public static extern byte SetErrorV(
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetErrorV(
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                return (MaybeBool<byte>)(byte)SetErrorV(__dsl_fmt, __dsl_ap);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetEventEnabled")]
        public static extern void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] byte enabled
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => SetEventEnabled(type, (byte)enabled);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetEventFilter")]
        public static extern void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetEventFilter(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetFloatProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetFloatProperty(props, __dsl_name, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetGamepadEventsEnabled")]
        public static extern void SetGamepadEventsEnabled([NativeTypeName("bool")] byte enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        public static void SetGamepadEventsEnabled(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => SetGamepadEventsEnabled((byte)enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        public static MaybeBool<byte> SetGamepadLED(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => (MaybeBool<byte>)(byte)SetGamepadLEDRaw(gamepad, red, green, blue);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetGamepadLED")]
        [return: NativeTypeName("bool")]
        public static extern byte SetGamepadLEDRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetGamepadMapping")]
        [return: NativeTypeName("bool")]
        public static extern byte SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        )
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (MaybeBool<byte>)(byte)SetGamepadMapping(instance_id, __dsl_mapping);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        public static MaybeBool<byte> SetGamepadPlayerIndex(
            GamepadHandle gamepad,
            int player_index
        ) => (MaybeBool<byte>)(byte)SetGamepadPlayerIndexRaw(gamepad, player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [return: NativeTypeName("bool")]
        public static extern byte SetGamepadPlayerIndexRaw(GamepadHandle gamepad, int player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [return: NativeTypeName("bool")]
        public static extern byte SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] byte enabled
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        public static MaybeBool<byte> SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => (MaybeBool<byte>)(byte)SetGamepadSensorEnabled(gamepad, type, (byte)enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        public static MaybeBool<byte> SetHapticAutocenter(HapticHandle haptic, int autocenter) =>
            (MaybeBool<byte>)(byte)SetHapticAutocenterRaw(haptic, autocenter);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetHapticAutocenter")]
        [return: NativeTypeName("bool")]
        public static extern byte SetHapticAutocenterRaw(HapticHandle haptic, int autocenter);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        public static MaybeBool<byte> SetHapticGain(HapticHandle haptic, int gain) =>
            (MaybeBool<byte>)(byte)SetHapticGainRaw(haptic, gain);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetHapticGain")]
        [return: NativeTypeName("bool")]
        public static extern byte SetHapticGainRaw(HapticHandle haptic, int gain);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetHint")]
        [return: NativeTypeName("bool")]
        public static extern byte SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetHint(__dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetHintWithPriority")]
        [return: NativeTypeName("bool")]
        public static extern byte SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)SetHintWithPriority(__dsl_name, __dsl_value, priority);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetInitialized")]
        public static extern void SetInitialized(
            InitState* state,
            [NativeTypeName("bool")] byte initialized
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetInitialized(
            Ref<InitState> state,
            [NativeTypeName("bool")] MaybeBool<byte> initialized
        )
        {
            fixed (InitState* __dsl_state = state)
            {
                SetInitialized(__dsl_state, (byte)initialized);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickEventsEnabled")]
        public static extern void SetJoystickEventsEnabled([NativeTypeName("bool")] byte enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        public static void SetJoystickEventsEnabled(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => SetJoystickEventsEnabled((byte)enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        public static MaybeBool<byte> SetJoystickLED(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => (MaybeBool<byte>)(byte)SetJoystickLEDRaw(joystick, red, green, blue);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickLED")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickLEDRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        public static MaybeBool<byte> SetJoystickPlayerIndex(
            JoystickHandle joystick,
            int player_index
        ) => (MaybeBool<byte>)(byte)SetJoystickPlayerIndexRaw(joystick, player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickPlayerIndexRaw(
            JoystickHandle joystick,
            int player_index
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        public static MaybeBool<byte> SetJoystickVirtualAxis(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => (MaybeBool<byte>)(byte)SetJoystickVirtualAxisRaw(joystick, axis, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickVirtualAxisRaw(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
        public static MaybeBool<byte> SetJoystickVirtualBall(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        ) => (MaybeBool<byte>)(byte)SetJoystickVirtualBallRaw(joystick, ball, xrel, yrel);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickVirtualBall")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickVirtualBallRaw(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickVirtualButton")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] byte down
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        public static MaybeBool<byte> SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] MaybeBool<byte> down
        ) => (MaybeBool<byte>)(byte)SetJoystickVirtualButton(joystick, button, (byte)down);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        public static MaybeBool<byte> SetJoystickVirtualHat(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => (MaybeBool<byte>)(byte)SetJoystickVirtualHatRaw(joystick, hat, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickVirtualHat")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickVirtualHatRaw(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        [return: NativeTypeName("bool")]
        public static extern byte SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] byte down,
            float x,
            float y,
            float pressure
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        public static MaybeBool<byte> SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] MaybeBool<byte> down,
            float x,
            float y,
            float pressure
        ) =>
            (MaybeBool<byte>)
                (byte)SetJoystickVirtualTouchpad(
                    joystick,
                    touchpad,
                    finger,
                    (byte)down,
                    x,
                    y,
                    pressure
                );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetLogOutputFunction")]
        public static extern void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetLogPriorities")]
        public static extern void SetLogPriorities(LogPriority priority);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetLogPriority")]
        public static extern void SetLogPriority(int category, LogPriority priority);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetLogPriorityPrefix")]
        [return: NativeTypeName("bool")]
        public static extern byte SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* prefix
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> prefix
        )
        {
            fixed (sbyte* __dsl_prefix = prefix)
            {
                return (MaybeBool<byte>)(byte)SetLogPriorityPrefix(priority, __dsl_prefix);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetModState")]
        public static extern void SetModState([NativeTypeName("SDL_Keymod")] ushort modstate);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetNumberProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetNumberProperty(props, __dsl_name, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetPaletteColors")]
        [return: NativeTypeName("bool")]
        public static extern byte SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        )
        {
            fixed (Color* __dsl_colors = colors)
            fixed (Palette* __dsl_palette = palette)
            {
                return (MaybeBool<byte>)
                    (byte)SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetPointerProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        )
        {
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetPointerProperty(props, __dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [return: NativeTypeName("bool")]
        public static extern byte SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            void* userdata
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)SetPointerPropertyWithCleanup(
                        props,
                        __dsl_name,
                        __dsl_value,
                        cleanup,
                        __dsl_userdata
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetPrimarySelectionText")]
        [return: NativeTypeName("bool")]
        public static extern byte SetPrimarySelectionText(
            [NativeTypeName("const char *")] sbyte* text
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPrimarySelectionText(
            [NativeTypeName("const char *")] Ref<sbyte> text
        )
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (MaybeBool<byte>)(byte)SetPrimarySelectionText(__dsl_text);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderClipRect")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetRenderClipRect(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        public static MaybeBool<byte> SetRenderColorScale(RendererHandle renderer, float scale) =>
            (MaybeBool<byte>)(byte)SetRenderColorScaleRaw(renderer, scale);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderColorScale")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderColorScaleRaw(RendererHandle renderer, float scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        public static MaybeBool<byte> SetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => (MaybeBool<byte>)(byte)SetRenderDrawBlendModeRaw(renderer, blendMode);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderDrawBlendModeRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        public static MaybeBool<byte> SetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => (MaybeBool<byte>)(byte)SetRenderDrawColorRaw(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        public static MaybeBool<byte> SetRenderDrawColorFloat(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        ) => (MaybeBool<byte>)(byte)SetRenderDrawColorFloatRaw(renderer, r, g, b, a);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderDrawColorFloatRaw(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderDrawColor")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderDrawColorRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        public static MaybeBool<byte> SetRenderLogicalPresentation(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        ) => (MaybeBool<byte>)(byte)SetRenderLogicalPresentationRaw(renderer, w, h, mode);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderLogicalPresentationRaw(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        public static MaybeBool<byte> SetRenderScale(
            RendererHandle renderer,
            float scaleX,
            float scaleY
        ) => (MaybeBool<byte>)(byte)SetRenderScaleRaw(renderer, scaleX, scaleY);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderScale")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderScaleRaw(
            RendererHandle renderer,
            float scaleX,
            float scaleY
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderTarget")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderTarget(RendererHandle renderer, Texture* texture);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderTarget(RendererHandle renderer, Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetRenderTarget(renderer, __dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderViewport")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetRenderViewport(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        public static MaybeBool<byte> SetRenderVSync(RendererHandle renderer, int vsync) =>
            (MaybeBool<byte>)(byte)SetRenderVSyncRaw(renderer, vsync);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetRenderVSync")]
        [return: NativeTypeName("bool")]
        public static extern byte SetRenderVSyncRaw(RendererHandle renderer, int vsync);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetScancodeName")]
        [return: NativeTypeName("bool")]
        public static extern byte SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetScancodeName(scancode, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetStringProperty")]
        [return: NativeTypeName("bool")]
        public static extern byte SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetStringProperty(props, __dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte alpha
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceAlphaMod(__dsl_surface, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceBlendMode(__dsl_surface, blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceClipRect")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceColorKey")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("bool")] byte enabled,
            [NativeTypeName("Uint32")] uint key
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled,
            [NativeTypeName("Uint32")] uint key
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorKey(__dsl_surface, (byte)enabled, key);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceColorMod")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorMod(__dsl_surface, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceColorspace")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceColorspace(Surface* surface, Colorspace colorspace);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorspace(
            Ref<Surface> surface,
            Colorspace colorspace
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorspace(__dsl_surface, colorspace);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfacePalette")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfacePalette(Surface* surface, Palette* palette);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfacePalette(__dsl_surface, __dsl_palette);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetSurfaceRLE")]
        [return: NativeTypeName("bool")]
        public static extern byte SetSurfaceRLE(
            Surface* surface,
            [NativeTypeName("bool")] byte enabled
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceRLE(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceRLE(__dsl_surface, (byte)enabled);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextInputArea")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int cursor
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            int cursor
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetTextInputArea(window, __dsl_rect, cursor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureAlphaMod")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureAlphaMod(
            Texture* texture,
            [NativeTypeName("Uint8")] byte alpha
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureAlphaMod(__dsl_texture, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureAlphaModFloat(Texture* texture, float alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureAlphaModFloat(Ref<Texture> texture, float alpha)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureAlphaModFloat(__dsl_texture, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureBlendMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureBlendMode(__dsl_texture, blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureColorMod")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureColorMod(__dsl_texture, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureColorModFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureColorModFloat(
            Texture* texture,
            float r,
            float g,
            float b
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureColorModFloat(
            Ref<Texture> texture,
            float r,
            float g,
            float b
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureColorModFloat(__dsl_texture, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTextureScaleMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTextureScaleMode(Texture* texture, ScaleMode scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureScaleMode(Ref<Texture> texture, ScaleMode scaleMode)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureScaleMode(__dsl_texture, scaleMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetTLS")]
        [return: NativeTypeName("bool")]
        public static extern byte SetTLS(
            [NativeTypeName("SDL_TLSID *")] AtomicInt* id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTLS(
            [NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        )
        {
            fixed (void* __dsl_value = value)
            fixed (AtomicInt* __dsl_id = id)
            {
                return (MaybeBool<byte>)(byte)SetTLS(__dsl_id, __dsl_value, destructor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] byte on_top
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        public static MaybeBool<byte> SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> on_top
        ) => (MaybeBool<byte>)(byte)SetWindowAlwaysOnTop(window, (byte)on_top);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
        public static MaybeBool<byte> SetWindowAspectRatio(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        ) => (MaybeBool<byte>)(byte)SetWindowAspectRatioRaw(window, min_aspect, max_aspect);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowAspectRatio")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowAspectRatioRaw(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowBordered")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] byte bordered
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        public static MaybeBool<byte> SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> bordered
        ) => (MaybeBool<byte>)(byte)SetWindowBordered(window, (byte)bordered);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowFocusable")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] byte focusable
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        public static MaybeBool<byte> SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> focusable
        ) => (MaybeBool<byte>)(byte)SetWindowFocusable(window, (byte)focusable);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowFullscreen")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] byte fullscreen
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        public static MaybeBool<byte> SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> fullscreen
        ) => (MaybeBool<byte>)(byte)SetWindowFullscreen(window, (byte)fullscreen);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowFullscreenMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            {
                return (MaybeBool<byte>)(byte)SetWindowFullscreenMode(window, __dsl_mode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowHitTest")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            void* callback_data
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            Ref callback_data
        )
        {
            fixed (void* __dsl_callback_data = callback_data)
            {
                return (MaybeBool<byte>)
                    (byte)SetWindowHitTest(window, callback, __dsl_callback_data);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowIcon")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowIcon(WindowHandle window, Surface* icon);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowIcon(WindowHandle window, Ref<Surface> icon)
        {
            fixed (Surface* __dsl_icon = icon)
            {
                return (MaybeBool<byte>)(byte)SetWindowIcon(window, __dsl_icon);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        public static MaybeBool<byte> SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => (MaybeBool<byte>)(byte)SetWindowKeyboardGrab(window, (byte)grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        public static MaybeBool<byte> SetWindowMaximumSize(
            WindowHandle window,
            int max_w,
            int max_h
        ) => (MaybeBool<byte>)(byte)SetWindowMaximumSizeRaw(window, max_w, max_h);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowMaximumSize")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowMaximumSizeRaw(
            WindowHandle window,
            int max_w,
            int max_h
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        public static MaybeBool<byte> SetWindowMinimumSize(
            WindowHandle window,
            int min_w,
            int min_h
        ) => (MaybeBool<byte>)(byte)SetWindowMinimumSizeRaw(window, min_w, min_h);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowMinimumSize")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowMinimumSizeRaw(
            WindowHandle window,
            int min_w,
            int min_h
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowModal")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowModal(
            WindowHandle window,
            [NativeTypeName("bool")] byte modal
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
        public static MaybeBool<byte> SetWindowModal(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> modal
        ) => (MaybeBool<byte>)(byte)SetWindowModal(window, (byte)modal);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowMouseGrab")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        public static MaybeBool<byte> SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => (MaybeBool<byte>)(byte)SetWindowMouseGrab(window, (byte)grabbed);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowMouseRect")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetWindowMouseRect(window, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        public static MaybeBool<byte> SetWindowOpacity(WindowHandle window, float opacity) =>
            (MaybeBool<byte>)(byte)SetWindowOpacityRaw(window, opacity);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowOpacity")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowOpacityRaw(WindowHandle window, float opacity);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
        public static MaybeBool<byte> SetWindowParent(WindowHandle window, WindowHandle parent) =>
            (MaybeBool<byte>)(byte)SetWindowParentRaw(window, parent);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowParent")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowParentRaw(WindowHandle window, WindowHandle parent);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        public static MaybeBool<byte> SetWindowPosition(WindowHandle window, int x, int y) =>
            (MaybeBool<byte>)(byte)SetWindowPositionRaw(window, x, y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowPosition")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowPositionRaw(WindowHandle window, int x, int y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] byte enabled
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        public static MaybeBool<byte> SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => (MaybeBool<byte>)(byte)SetWindowRelativeMouseMode(window, (byte)enabled);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowResizable")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] byte resizable
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        public static MaybeBool<byte> SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> resizable
        ) => (MaybeBool<byte>)(byte)SetWindowResizable(window, (byte)resizable);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowShape")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowShape(WindowHandle window, Surface* shape);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowShape(WindowHandle window, Ref<Surface> shape)
        {
            fixed (Surface* __dsl_shape = shape)
            {
                return (MaybeBool<byte>)(byte)SetWindowShape(window, __dsl_shape);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        public static MaybeBool<byte> SetWindowSize(WindowHandle window, int w, int h) =>
            (MaybeBool<byte>)(byte)SetWindowSizeRaw(window, w, h);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowSize")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowSizeRaw(WindowHandle window, int w, int h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
        public static MaybeBool<byte> SetWindowSurfaceVSync(WindowHandle window, int vsync) =>
            (MaybeBool<byte>)(byte)SetWindowSurfaceVSyncRaw(window, vsync);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowSurfaceVSync")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowSurfaceVSyncRaw(WindowHandle window, int vsync);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SetWindowTitle")]
        [return: NativeTypeName("bool")]
        public static extern byte SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* title
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)(byte)SetWindowTitle(window, __dsl_title);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShouldInit")]
        [return: NativeTypeName("bool")]
        public static extern byte ShouldInit(InitState* state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShouldInit(Ref<InitState> state)
        {
            fixed (InitState* __dsl_state = state)
            {
                return (MaybeBool<byte>)(byte)ShouldInit(__dsl_state);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShouldQuit")]
        [return: NativeTypeName("bool")]
        public static extern byte ShouldQuit(InitState* state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShouldQuit(Ref<InitState> state)
        {
            fixed (InitState* __dsl_state = state)
            {
                return (MaybeBool<byte>)(byte)ShouldQuit(__dsl_state);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
        public static MaybeBool<byte> ShowCursor() => (MaybeBool<byte>)(byte)ShowCursorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowCursor")]
        [return: NativeTypeName("bool")]
        public static extern byte ShowCursorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowMessageBox")]
        [return: NativeTypeName("bool")]
        public static extern byte ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        )
        {
            fixed (int* __dsl_buttonid = buttonid)
            fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
            {
                return (MaybeBool<byte>)(byte)ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowOpenFileDialog")]
        public static extern void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFileDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_filters,
                    nfilters,
                    __dsl_default_location,
                    (byte)allow_many
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowOpenFolderDialog")]
        public static extern void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFolderDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_default_location,
                    (byte)allow_many
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowSaveFileDialog")]
        public static extern void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowSaveFileDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_filters,
                    nfilters,
                    __dsl_default_location
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowSimpleMessageBox")]
        [return: NativeTypeName("bool")]
        public static extern byte ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            WindowHandle window
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            WindowHandle window
        )
        {
            fixed (sbyte* __dsl_message = message)
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)
                    (byte)ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, window);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        public static MaybeBool<byte> ShowWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)ShowWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte ShowWindowRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        public static MaybeBool<byte> ShowWindowSystemMenu(WindowHandle window, int x, int y) =>
            (MaybeBool<byte>)(byte)ShowWindowSystemMenuRaw(window, x, y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ShowWindowSystemMenu")]
        [return: NativeTypeName("bool")]
        public static extern byte ShowWindowSystemMenuRaw(WindowHandle window, int x, int y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SignalCondition")]
        public static extern void SignalCondition(ConditionHandle cond);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SignalSemaphore")]
        public static extern void SignalSemaphore(SemaphoreHandle sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
        public static MaybeBool<byte> StartTextInput(WindowHandle window) =>
            (MaybeBool<byte>)(byte)StartTextInputRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StartTextInput")]
        [return: NativeTypeName("bool")]
        public static extern byte StartTextInputRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
        public static MaybeBool<byte> StartTextInputWithProperties(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => (MaybeBool<byte>)(byte)StartTextInputWithPropertiesRaw(window, props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StartTextInputWithProperties")]
        [return: NativeTypeName("bool")]
        public static extern byte StartTextInputWithPropertiesRaw(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        public static MaybeBool<byte> StopHapticEffect(HapticHandle haptic, int effect) =>
            (MaybeBool<byte>)(byte)StopHapticEffectRaw(haptic, effect);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StopHapticEffect")]
        [return: NativeTypeName("bool")]
        public static extern byte StopHapticEffectRaw(HapticHandle haptic, int effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        public static MaybeBool<byte> StopHapticEffects(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)StopHapticEffectsRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StopHapticEffects")]
        [return: NativeTypeName("bool")]
        public static extern byte StopHapticEffectsRaw(HapticHandle haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        public static MaybeBool<byte> StopHapticRumble(HapticHandle haptic) =>
            (MaybeBool<byte>)(byte)StopHapticRumbleRaw(haptic);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StopHapticRumble")]
        [return: NativeTypeName("bool")]
        public static extern byte StopHapticRumbleRaw(HapticHandle haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
        public static MaybeBool<byte> StopTextInput(WindowHandle window) =>
            (MaybeBool<byte>)(byte)StopTextInputRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StopTextInput")]
        [return: NativeTypeName("bool")]
        public static extern byte StopTextInputRaw(WindowHandle window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        public static MaybeBool<byte> StorageReady(StorageHandle storage) =>
            (MaybeBool<byte>)(byte)StorageReadyRaw(storage);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StorageReady")]
        [return: NativeTypeName("bool")]
        public static extern byte StorageReadyRaw(StorageHandle storage);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_StringToGUID")]
        public static extern Guid StringToGuid([NativeTypeName("const char *")] sbyte* pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid StringToGuid([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)StringToGuid(__dsl_pchGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [return: NativeTypeName("bool")]
        public static extern byte SurfaceHasAlternateImages(Surface* surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasAlternateImages(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasAlternateImages(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SurfaceHasColorKey")]
        [return: NativeTypeName("bool")]
        public static extern byte SurfaceHasColorKey(Surface* surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasColorKey(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasColorKey(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SurfaceHasRLE")]
        [return: NativeTypeName("bool")]
        public static extern byte SurfaceHasRLE(Surface* surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasRLE(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasRLE(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        public static MaybeBool<byte> SyncWindow(WindowHandle window) =>
            (MaybeBool<byte>)(byte)SyncWindowRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_SyncWindow")]
        [return: NativeTypeName("bool")]
        public static extern byte SyncWindowRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TellIO")]
        [return: NativeTypeName("Sint64")]
        public static extern long TellIO(IOStreamHandle context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        public static MaybeBool<byte> TextInputActive(WindowHandle window) =>
            (MaybeBool<byte>)(byte)TextInputActiveRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TextInputActive")]
        [return: NativeTypeName("bool")]
        public static extern byte TextInputActiveRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TimeFromWindows")]
        [return: NativeTypeName("SDL_Time")]
        public static extern long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TimeToDateTime")]
        [return: NativeTypeName("bool")]
        public static extern byte TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("bool")] byte localTime
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("bool")] MaybeBool<byte> localTime
        )
        {
            fixed (DateTime* __dsl_dt = dt)
            {
                return (MaybeBool<byte>)(byte)TimeToDateTime(ticks, __dsl_dt, (byte)localTime);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TimeToWindows")]
        public static extern void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        )
        {
            fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
            fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
            {
                TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        public static MaybeBool<byte> TryLockMutex(MutexHandle mutex) =>
            (MaybeBool<byte>)(byte)TryLockMutexRaw(mutex);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TryLockMutex")]
        [return: NativeTypeName("bool")]
        public static extern byte TryLockMutexRaw(MutexHandle mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        public static MaybeBool<byte> TryLockRWLockForReading(RWLockHandle rwlock) =>
            (MaybeBool<byte>)(byte)TryLockRWLockForReadingRaw(rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TryLockRWLockForReading")]
        [return: NativeTypeName("bool")]
        public static extern byte TryLockRWLockForReadingRaw(RWLockHandle rwlock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        public static MaybeBool<byte> TryLockRWLockForWriting(RWLockHandle rwlock) =>
            (MaybeBool<byte>)(byte)TryLockRWLockForWritingRaw(rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TryLockRWLockForWriting")]
        [return: NativeTypeName("bool")]
        public static extern byte TryLockRWLockForWritingRaw(RWLockHandle rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TryLockSpinlock")]
        [return: NativeTypeName("bool")]
        public static extern byte TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryLockSpinlock(
            [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
        )
        {
            fixed (int* __dsl_lock = @lock)
            {
                return (MaybeBool<byte>)(byte)TryLockSpinlock(__dsl_lock);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        public static MaybeBool<byte> TryWaitSemaphore(SemaphoreHandle sem) =>
            (MaybeBool<byte>)(byte)TryWaitSemaphoreRaw(sem);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TryWaitSemaphore")]
        [return: NativeTypeName("bool")]
        public static extern byte TryWaitSemaphoreRaw(SemaphoreHandle sem);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnbindAudioStream")]
        public static extern void UnbindAudioStream(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnbindAudioStreams")]
        public static extern void UnbindAudioStreams(AudioStreamHandle* streams, int num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(Ref<AudioStreamHandle> streams, int num_streams)
        {
            fixed (AudioStreamHandle* __dsl_streams = streams)
            {
                UnbindAudioStreams(__dsl_streams, num_streams);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnloadObject")]
        public static extern void UnloadObject(SharedObjectHandle handle);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        public static MaybeBool<byte> UnlockAudioStream(AudioStreamHandle stream) =>
            (MaybeBool<byte>)(byte)UnlockAudioStreamRaw(stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockAudioStream")]
        [return: NativeTypeName("bool")]
        public static extern byte UnlockAudioStreamRaw(AudioStreamHandle stream);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockJoysticks")]
        public static extern void UnlockJoysticks();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockMutex")]
        public static extern void UnlockMutex(MutexHandle mutex);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockProperties")]
        public static extern void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockRWLock")]
        public static extern void UnlockRWLock(RWLockHandle rwlock);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockSpinlock")]
        public static extern void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                UnlockSpinlock(__dsl_lock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockSurface")]
        public static extern void UnlockSurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                UnlockSurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UnlockTexture")]
        public static extern void UnlockTexture(Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                UnlockTexture(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateGamepads")]
        public static extern void UpdateGamepads();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateHapticEffect")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        )
        {
            fixed (HapticEffect* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)UpdateHapticEffect(haptic, effect, __dsl_data);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateJoysticks")]
        public static extern void UpdateJoysticks();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateNVTexture")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateNVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateNVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        )
        {
            fixed (byte* __dsl_UVplane = UVplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateNVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_UVplane,
                        UVpitch
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateSensors")]
        public static extern void UpdateSensors();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateTexture")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        public static MaybeBool<byte> UpdateWindowSurface(WindowHandle window) =>
            (MaybeBool<byte>)(byte)UpdateWindowSurfaceRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateWindowSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateWindowSurfaceRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        )
        {
            fixed (Rect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateWindowSurfaceRects(window, __dsl_rects, numrects);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_UpdateYUVTexture")]
        [return: NativeTypeName("bool")]
        public static extern byte UpdateYUVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateYUVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        )
        {
            fixed (byte* __dsl_Vplane = Vplane)
            fixed (byte* __dsl_Uplane = Uplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateYUVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_Uplane,
                        Upitch,
                        __dsl_Vplane,
                        Vpitch
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitCondition")]
        public static extern void WaitCondition(ConditionHandle cond, MutexHandle mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        public static MaybeBool<byte> WaitConditionTimeout(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => (MaybeBool<byte>)(byte)WaitConditionTimeoutRaw(cond, mutex, timeoutMS);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitConditionTimeout")]
        [return: NativeTypeName("bool")]
        public static extern byte WaitConditionTimeoutRaw(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitEvent")]
        [return: NativeTypeName("bool")]
        public static extern byte WaitEvent(Event* @event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)WaitEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitEventTimeout")]
        [return: NativeTypeName("bool")]
        public static extern byte WaitEventTimeout(
            Event* @event,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)WaitEventTimeout(__dsl_event, timeoutMS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitSemaphore")]
        public static extern void WaitSemaphore(SemaphoreHandle sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        public static MaybeBool<byte> WaitSemaphoreTimeout(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => (MaybeBool<byte>)(byte)WaitSemaphoreTimeoutRaw(sem, timeoutMS);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [return: NativeTypeName("bool")]
        public static extern byte WaitSemaphoreTimeoutRaw(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WaitThread")]
        public static extern void WaitThread(ThreadHandle thread, int* status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(ThreadHandle thread, Ref<int> status)
        {
            fixed (int* __dsl_status = status)
            {
                WaitThread(thread, __dsl_status);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
        public static MaybeBool<byte> WarpMouseGlobal(float x, float y) =>
            (MaybeBool<byte>)(byte)WarpMouseGlobalRaw(x, y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WarpMouseGlobal")]
        [return: NativeTypeName("bool")]
        public static extern byte WarpMouseGlobalRaw(float x, float y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WarpMouseInWindow")]
        public static extern void WarpMouseInWindow(WindowHandle window, float x, float y);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WasInit")]
        [return: NativeTypeName("SDL_InitFlags")]
        public static extern uint WasInit([NativeTypeName("SDL_InitFlags")] uint flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        public static MaybeBool<byte> WindowHasSurface(WindowHandle window) =>
            (MaybeBool<byte>)(byte)WindowHasSurfaceRaw(window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WindowHasSurface")]
        [return: NativeTypeName("bool")]
        public static extern byte WindowHasSurfaceRaw(WindowHandle window);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteIO")]
        [return: NativeTypeName("size_t")]
        public static extern nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            {
                return (nuint)WriteIO(context, __dsl_ptr, size);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        public static MaybeBool<byte> WriteS16BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => (MaybeBool<byte>)(byte)WriteS16BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS16BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS16BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        public static MaybeBool<byte> WriteS16LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => (MaybeBool<byte>)(byte)WriteS16LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS16LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS16LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        public static MaybeBool<byte> WriteS32BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => (MaybeBool<byte>)(byte)WriteS32BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS32BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS32BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        public static MaybeBool<byte> WriteS32LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => (MaybeBool<byte>)(byte)WriteS32LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS32LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS32LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        public static MaybeBool<byte> WriteS64BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => (MaybeBool<byte>)(byte)WriteS64BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS64BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS64BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        public static MaybeBool<byte> WriteS64LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => (MaybeBool<byte>)(byte)WriteS64LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS64LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS64LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
        public static MaybeBool<byte> WriteS8(
            IOStreamHandle dst,
            [NativeTypeName("Sint8")] sbyte value
        ) => (MaybeBool<byte>)(byte)WriteS8Raw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteS8")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteS8Raw(
            IOStreamHandle dst,
            [NativeTypeName("Sint8")] sbyte value
        );

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteStorageFile")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_source = source)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)WriteStorageFile(storage, __dsl_path, __dsl_source, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteSurfacePixel")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)WriteSurfacePixel(__dsl_surface, x, y, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)WriteSurfacePixelFloat(__dsl_surface, x, y, r, g, b, a);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        public static MaybeBool<byte> WriteU16BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => (MaybeBool<byte>)(byte)WriteU16BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU16BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU16BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        public static MaybeBool<byte> WriteU16LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => (MaybeBool<byte>)(byte)WriteU16LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU16LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU16LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        public static MaybeBool<byte> WriteU32BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => (MaybeBool<byte>)(byte)WriteU32BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU32BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU32BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        public static MaybeBool<byte> WriteU32LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => (MaybeBool<byte>)(byte)WriteU32LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU32LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU32LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        public static MaybeBool<byte> WriteU64BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => (MaybeBool<byte>)(byte)WriteU64BERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU64BE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU64BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        public static MaybeBool<byte> WriteU64LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => (MaybeBool<byte>)(byte)WriteU64LERaw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU64LE")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU64LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        public static MaybeBool<byte> WriteU8(
            IOStreamHandle dst,
            [NativeTypeName("Uint8")] byte value
        ) => (MaybeBool<byte>)(byte)WriteU8Raw(dst, value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_WriteU8")]
        [return: NativeTypeName("bool")]
        public static extern byte WriteU8Raw(
            IOStreamHandle dst,
            [NativeTypeName("Uint8")] byte value
        );
    }

    public partial class StaticWrapper<T> : ISdl
        where T : ISdl.Static
    {
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        ) => T.AcquireCameraFrame(camera, timestampNS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        ) => T.AcquireCameraFrame(camera, timestampNS);

        [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddAtomicInt(AtomicInt* a, int v) => T.AddAtomicInt(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddAtomicInt(Ref<AtomicInt> a, int v) => T.AddAtomicInt(a, v);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => T.AddEventWatch(filter, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        ) => T.AddEventWatch(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
            T.AddGamepadMapping(mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping) =>
            T.AddGamepadMapping(mapping);

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
            T.AddGamepadMappingsFromFile(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromFile([NativeTypeName("const char *")] Ref<sbyte> file) =>
            T.AddGamepadMappingsFromFile(file);

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio
        ) => T.AddGamepadMappingsFromIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => T.AddGamepadMappingsFromIO(src, closeio);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        ) => T.AddHintCallback(name, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        ) => T.AddHintCallback(name, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte AddSurfaceAlternateImage(Surface* surface, Surface* image) =>
            T.AddSurfaceAlternateImage(surface, image);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> AddSurfaceAlternateImage(Ref<Surface> surface, Ref<Surface> image) =>
            T.AddSurfaceAlternateImage(surface, image);

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            void* userdata
        ) => T.AddTimer(interval, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            Ref userdata
        ) => T.AddTimer(interval, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            void* userdata
        ) => T.AddTimerNS(interval, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            Ref userdata
        ) => T.AddTimerNS(interval, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> AddVulkanRenderSemaphores(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            T.AddVulkanRenderSemaphores(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte AddVulkanRenderSemaphoresRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            T.AddVulkanRenderSemaphoresRaw(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        ) => T.AttachVirtualJoystick(desc);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        ) => T.AttachVirtualJoystick(desc);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> AudioDevicePaused([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.AudioDevicePaused(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.AudioDevicePausedRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        ) => T.BindAudioStream(devid, stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BindAudioStreamRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        ) => T.BindAudioStreamRaw(devid, stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle* streams,
            int num_streams
        ) => T.BindAudioStreams(devid, streams, num_streams);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioStreamHandle> streams,
            int num_streams
        ) => T.BindAudioStreams(devid, streams, num_streams);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => T.BlitSurface(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) => T.BlitSurface(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurface9Grid(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) =>
            T.BlitSurface9Grid(
                src,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                scaleMode,
                dst,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurface9Grid(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) =>
            T.BlitSurface9Grid(
                src,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                scaleMode,
                dst,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurfaceTiled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => T.BlitSurfaceTiled(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurfaceTiled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) => T.BlitSurfaceTiled(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurfaceTiledWithScale(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => T.BlitSurfaceTiledWithScale(src, srcrect, scale, scaleMode, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurfaceTiledWithScale(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) => T.BlitSurfaceTiledWithScale(src, srcrect, scale, scaleMode, dst, dstrect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => T.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) => T.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void BroadcastCondition(ConditionHandle cond) => T.BroadcastCondition(cond);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CaptureMouse([NativeTypeName("bool")] byte enabled) => T.CaptureMouse(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CaptureMouse([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
            T.CaptureMouse(enabled);

        [NativeFunction("SDL3", EntryPoint = "SDL_CleanupTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CleanupTLS() => T.CleanupTLS();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearAudioStream(AudioStreamHandle stream) =>
            T.ClearAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearAudioStreamRaw(AudioStreamHandle stream) => T.ClearAudioStreamRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearClipboardData() => T.ClearClipboardData();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearClipboardDataRaw() => T.ClearClipboardDataRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearComposition(WindowHandle window) => T.ClearComposition(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearCompositionRaw(WindowHandle window) => T.ClearCompositionRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearError() => T.ClearError();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearErrorRaw() => T.ClearErrorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.ClearProperty(props, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.ClearProperty(props, name);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ClearSurface(Surface* surface, float r, float g, float b, float a) =>
            T.ClearSurface(surface, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ClearSurface(
            Ref<Surface> surface,
            float r,
            float g,
            float b,
            float a
        ) => T.ClearSurface(surface, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.CloseAudioDevice(devid);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseCamera(CameraHandle camera) => T.CloseCamera(camera);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseGamepad(GamepadHandle gamepad) => T.CloseGamepad(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseHaptic(HapticHandle haptic) => T.CloseHaptic(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CloseIO(IOStreamHandle context) => T.CloseIO(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CloseIORaw(IOStreamHandle context) => T.CloseIORaw(context);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseJoystick(JoystickHandle joystick) => T.CloseJoystick(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseSensor(SensorHandle sensor) => T.CloseSensor(sensor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CloseStorage(StorageHandle storage) => T.CloseStorage(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CloseStorageRaw(StorageHandle storage) => T.CloseStorageRaw(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CompareAndSwapAtomicInt(AtomicInt* a, int oldval, int newval) =>
            T.CompareAndSwapAtomicInt(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CompareAndSwapAtomicInt(Ref<AtomicInt> a, int oldval, int newval) =>
            T.CompareAndSwapAtomicInt(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval) =>
            T.CompareAndSwapAtomicPointer(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CompareAndSwapAtomicPointer(Ref2D a, Ref oldval, Ref newval) =>
            T.CompareAndSwapAtomicPointer(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CompareAndSwapAtomicU32(
            AtomicU32* a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        ) => T.CompareAndSwapAtomicU32(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CompareAndSwapAtomicU32(
            Ref<AtomicU32> a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        ) => T.CompareAndSwapAtomicU32(a, oldval, newval);

        [return: NativeTypeName("SDL_BlendMode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ComposeCustomBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        ) =>
            T.ComposeCustomBlendMode(
                srcColorFactor,
                dstColorFactor,
                colorOperation,
                srcAlphaFactor,
                dstAlphaFactor,
                alphaOperation
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        ) => T.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        ) => T.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ConvertEventToRenderCoordinates(RendererHandle renderer, Event* @event) =>
            T.ConvertEventToRenderCoordinates(renderer, @event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ConvertEventToRenderCoordinates(
            RendererHandle renderer,
            Ref<Event> @event
        ) => T.ConvertEventToRenderCoordinates(renderer, @event);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch
        ) => T.ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch
        ) => T.ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        ) =>
            T.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        ) =>
            T.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ConvertSurface(Surface* surface, PixelFormat format) =>
            T.ConvertSurface(surface, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ConvertSurface(Ref<Surface> surface, PixelFormat format) =>
            T.ConvertSurface(surface, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ConvertSurfaceAndColorspace(
            Surface* surface,
            PixelFormat format,
            Palette* palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.ConvertSurfaceAndColorspace(surface, format, palette, colorspace, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ConvertSurfaceAndColorspace(
            Ref<Surface> surface,
            PixelFormat format,
            Ref<Palette> palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.ConvertSurfaceAndColorspace(surface, format, palette, colorspace, props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CopyFile(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.CopyFile(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CopyFile(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.CopyFile(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => T.CopyProperties(src, dst);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CopyPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => T.CopyPropertiesRaw(src, dst);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.CopyStorageFile(storage, oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.CopyStorageFile(storage, oldpath, newpath);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => T.CreateAudioStream(src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        ) => T.CreateAudioStream(src_spec, dst_spec);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
            T.CreateColorCursor(surface, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y) =>
            T.CreateColorCursor(surface, hot_x, hot_y);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ConditionHandle CreateCondition() => T.CreateCondition();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => T.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => T.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
            T.CreateDirectory(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.CreateDirectory(path);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => T.CreateHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        ) => T.CreateHapticEffect(haptic, effect);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MutexHandle CreateMutex() => T.CreateMutex();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Palette> CreatePalette(int ncolors) => T.CreatePalette(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Palette* CreatePaletteRaw(int ncolors) => T.CreatePaletteRaw(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle CreatePopupWindow(
            WindowHandle parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        ) => T.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint CreateProperties() => T.CreateProperties();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.CreateRenderer(window, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.CreateRenderer(window, name);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateRendererWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RWLockHandle CreateRWLock() => T.CreateRWLock();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SemaphoreHandle CreateSemaphore([NativeTypeName("Uint32")] uint initial_value) =>
            T.CreateSemaphore(initial_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle CreateSoftwareRenderer(Surface* surface) =>
            T.CreateSoftwareRenderer(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle CreateSoftwareRenderer(Ref<Surface> surface) =>
            T.CreateSoftwareRenderer(surface);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => T.CreateStorageDirectory(storage, path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        ) => T.CreateStorageDirectory(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> CreateSurface(int width, int height, PixelFormat format) =>
            T.CreateSurface(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            void* pixels,
            int pitch
        ) => T.CreateSurfaceFrom(width, height, format, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            Ref pixels,
            int pitch
        ) => T.CreateSurfaceFrom(width, height, format, pixels, pitch);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Palette* CreateSurfacePalette(Surface* surface) => T.CreateSurfacePalette(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Palette> CreateSurfacePalette(Ref<Surface> surface) =>
            T.CreateSurfacePalette(surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* CreateSurfaceRaw(int width, int height, PixelFormat format) =>
            T.CreateSurfaceRaw(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle CreateSystemCursor(SystemCursor id) => T.CreateSystemCursor(id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Texture> CreateTexture(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        ) => T.CreateTexture(renderer, format, access, w, h);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Texture* CreateTextureFromSurface(RendererHandle renderer, Surface* surface) =>
            T.CreateTextureFromSurface(renderer, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Texture> CreateTextureFromSurface(
            RendererHandle renderer,
            Ref<Surface> surface
        ) => T.CreateTextureFromSurface(renderer, surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Texture* CreateTextureRaw(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        ) => T.CreateTextureRaw(renderer, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Texture> CreateTextureWithProperties(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateTextureWithProperties(renderer, props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Texture* CreateTextureWithPropertiesRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateTextureWithPropertiesRaw(renderer, props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        ) => T.CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        ) => T.CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithPropertiesRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ThreadHandle CreateThreadWithPropertiesRuntime(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        ) => T.CreateThreadWithPropertiesRuntime(props, pfnBeginThread, pfnEndThread);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        ) => T.CreateWindow(title, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        ) => T.CreateWindow(title, w, h, flags);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            WindowHandle* window,
            RendererHandle* renderer
        ) => T.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            Ref<WindowHandle> window,
            Ref<RendererHandle> renderer
        ) => T.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateWindowWithProperties(props);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> CursorVisible() => T.CursorVisible();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte CursorVisibleRaw() => T.CursorVisibleRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        ) => T.DateTimeToTime(dt, ticks);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        ) => T.DateTimeToTime(dt, ticks);

        [NativeFunction("SDL3", EntryPoint = "SDL_Delay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void Delay([NativeTypeName("Uint32")] uint ms) => T.Delay(ms);

        [NativeFunction("SDL3", EntryPoint = "SDL_DelayNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelayNS([NativeTypeName("Uint64")] ulong ns) => T.DelayNS(ns);

        [NativeFunction("SDL3", EntryPoint = "SDL_DelayPrecise")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelayPrecise([NativeTypeName("Uint64")] ulong ns) => T.DelayPrecise(ns);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyAudioStream(AudioStreamHandle stream) => T.DestroyAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCondition(ConditionHandle cond) => T.DestroyCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCursor(CursorHandle cursor) => T.DestroyCursor(cursor);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyHapticEffect(HapticHandle haptic, int effect) =>
            T.DestroyHapticEffect(haptic, effect);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyMutex(MutexHandle mutex) => T.DestroyMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPalette(Palette* palette) => T.DestroyPalette(palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPalette(Ref<Palette> palette) => T.DestroyPalette(palette);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.DestroyProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRenderer(RendererHandle renderer) => T.DestroyRenderer(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRWLock(RWLockHandle rwlock) => T.DestroyRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySemaphore(SemaphoreHandle sem) => T.DestroySemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySurface(Surface* surface) => T.DestroySurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySurface(Ref<Surface> surface) => T.DestroySurface(surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyTexture(Texture* texture) => T.DestroyTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyTexture(Ref<Texture> texture) => T.DestroyTexture(texture);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyWindow(WindowHandle window) => T.DestroyWindow(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> DestroyWindowSurface(WindowHandle window) =>
            T.DestroyWindowSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte DestroyWindowSurfaceRaw(WindowHandle window) =>
            T.DestroyWindowSurfaceRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DetachThread(ThreadHandle thread) => T.DetachThread(thread);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> DetachVirtualJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.DetachVirtualJoystick(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte DetachVirtualJoystickRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.DetachVirtualJoystickRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> DisableScreenSaver() => T.DisableScreenSaver();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte DisableScreenSaverRaw() => T.DisableScreenSaverRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* DuplicateSurface(Surface* surface) => T.DuplicateSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> DuplicateSurface(Ref<Surface> surface) => T.DuplicateSurface(surface);

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetCurrentConfig() => T.EGLGetCurrentConfig();

        [return: NativeTypeName("SDL_EGLConfig")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetCurrentConfigRaw() => T.EGLGetCurrentConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetCurrentDisplay() => T.EGLGetCurrentDisplay();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetCurrentDisplayRaw() => T.EGLGetCurrentDisplayRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer EGLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
            T.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        ) => T.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetWindowSurface(WindowHandle window) => T.EGLGetWindowSurface(window);

        [return: NativeTypeName("SDL_EGLSurface")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetWindowSurfaceRaw(WindowHandle window) =>
            T.EGLGetWindowSurfaceRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            void* userdata
        ) =>
            T.EGLSetAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback,
                userdata
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            Ref userdata
        ) =>
            T.EGLSetAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback,
                userdata
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> EnableScreenSaver() => T.EnableScreenSaver();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte EnableScreenSaverRaw() => T.EnableScreenSaverRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        ) => T.EnumerateDirectory(path, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        ) => T.EnumerateDirectory(path, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            void* userdata
        ) => T.EnumerateProperties(props, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            Ref userdata
        ) => T.EnumerateProperties(props, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        ) => T.EnumerateStorageDirectory(storage, path, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        ) => T.EnumerateStorageDirectory(storage, path, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            T.EventEnabled(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
            T.EventEnabledRaw(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRect(dst, rect, color);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRect(dst, rect, color);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRects(dst, rects, count, color);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRects(dst, rects, count, color);

        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => T.FilterEvents(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        ) => T.FilterEvents(filter, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FlashWindow(WindowHandle window, FlashOperation operation) =>
            T.FlashWindow(window, operation);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FlashWindowRaw(WindowHandle window, FlashOperation operation) =>
            T.FlashWindowRaw(window, operation);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FlipSurface(Surface* surface, FlipMode flip) => T.FlipSurface(surface, flip);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FlipSurface(Ref<Surface> surface, FlipMode flip) =>
            T.FlipSurface(surface, flip);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FlushAudioStream(AudioStreamHandle stream) =>
            T.FlushAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FlushAudioStreamRaw(AudioStreamHandle stream) => T.FlushAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FlushEvent([NativeTypeName("Uint32")] uint type) => T.FlushEvent(type);

        [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.FlushEvents(minType, maxType);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FlushIO(IOStreamHandle context) => T.FlushIO(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FlushIORaw(IOStreamHandle context) => T.FlushIORaw(context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> FlushRenderer(RendererHandle renderer) => T.FlushRenderer(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte FlushRendererRaw(RendererHandle renderer) => T.FlushRendererRaw(renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadConnected(GamepadHandle gamepad) =>
            T.GamepadConnected(gamepad);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadConnectedRaw(GamepadHandle gamepad) => T.GamepadConnectedRaw(gamepad);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadEventsEnabled() => T.GamepadEventsEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadEventsEnabledRaw() => T.GamepadEventsEnabledRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadHasAxis(GamepadHandle gamepad, GamepadAxis axis) =>
            T.GamepadHasAxis(gamepad, axis);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadHasAxisRaw(GamepadHandle gamepad, GamepadAxis axis) =>
            T.GamepadHasAxisRaw(gamepad, axis);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadHasButton(GamepadHandle gamepad, GamepadButton button) =>
            T.GamepadHasButton(gamepad, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadHasButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
            T.GamepadHasButtonRaw(gamepad, button);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadHasSensor(GamepadHandle gamepad, SensorType type) =>
            T.GamepadHasSensor(gamepad, type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadHasSensorRaw(GamepadHandle gamepad, SensorType type) =>
            T.GamepadHasSensorRaw(gamepad, type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GamepadSensorEnabled(GamepadHandle gamepad, SensorType type) =>
            T.GamepadSensorEnabled(gamepad, type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GamepadSensorEnabledRaw(GamepadHandle gamepad, SensorType type) =>
            T.GamepadSensorEnabledRaw(gamepad, type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAppMetadataProperty([NativeTypeName("const char *")] sbyte* name) =>
            T.GetAppMetadataProperty(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.GetAppMetadataProperty(name);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertionHandler GetAssertionHandler(void** puserdata) =>
            T.GetAssertionHandler(puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertionHandler GetAssertionHandler(Ref2D puserdata) =>
            T.GetAssertionHandler(puserdata);

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<AssertData> GetAssertionReport() => T.GetAssertionReport();

        [return: NativeTypeName("const SDL_AssertData *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertData* GetAssertionReportRaw() => T.GetAssertionReportRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAtomicInt(AtomicInt* a) => T.GetAtomicInt(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAtomicInt(Ref<AtomicInt> a) => T.GetAtomicInt(a);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetAtomicPointer(void** a) => T.GetAtomicPointer(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetAtomicPointer(Ref2D a) => T.GetAtomicPointer(a);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAtomicU32(AtomicU32* a) => T.GetAtomicU32(a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAtomicU32(Ref<AtomicU32> a) => T.GetAtomicU32(a);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int* GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            int* count
        ) => T.GetAudioDeviceChannelMap(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<int> GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<int> count
        ) => T.GetAudioDeviceChannelMap(devid, count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        ) => T.GetAudioDeviceFormat(devid, spec, sample_frames);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        ) => T.GetAudioDeviceFormat(devid, spec, sample_frames);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetAudioDeviceGain([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.GetAudioDeviceGain(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.GetAudioDeviceName(devid);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.GetAudioDeviceNameRaw(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAudioDriver(int index) => T.GetAudioDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAudioDriverRaw(int index) => T.GetAudioDriverRaw(index);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAudioFormatName(AudioFormat format) => T.GetAudioFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAudioFormatNameRaw(AudioFormat format) => T.GetAudioFormatNameRaw(format);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetAudioPlaybackDevices(int* count) => T.GetAudioPlaybackDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetAudioPlaybackDevices(Ref<int> count) =>
            T.GetAudioPlaybackDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetAudioRecordingDevices(int* count) => T.GetAudioRecordingDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetAudioRecordingDevices(Ref<int> count) =>
            T.GetAudioRecordingDevices(count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamAvailable(AudioStreamHandle stream) =>
            T.GetAudioStreamAvailable(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamData(AudioStreamHandle stream, void* buf, int len) =>
            T.GetAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamData(AudioStreamHandle stream, Ref buf, int len) =>
            T.GetAudioStreamData(stream, buf, len);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamDevice(AudioStreamHandle stream) =>
            T.GetAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetAudioStreamFormat(
            AudioStreamHandle stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        ) => T.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetAudioStreamFormat(
            AudioStreamHandle stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        ) => T.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetAudioStreamFrequencyRatio(AudioStreamHandle stream) =>
            T.GetAudioStreamFrequencyRatio(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetAudioStreamGain(AudioStreamHandle stream) => T.GetAudioStreamGain(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int* GetAudioStreamInputChannelMap(AudioStreamHandle stream, int* count) =>
            T.GetAudioStreamInputChannelMap(stream, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<int> GetAudioStreamInputChannelMap(AudioStreamHandle stream, Ref<int> count) =>
            T.GetAudioStreamInputChannelMap(stream, count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int* GetAudioStreamOutputChannelMap(AudioStreamHandle stream, int* count) =>
            T.GetAudioStreamOutputChannelMap(stream, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<int> GetAudioStreamOutputChannelMap(AudioStreamHandle stream, Ref<int> count) =>
            T.GetAudioStreamOutputChannelMap(stream, count);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamProperties(AudioStreamHandle stream) =>
            T.GetAudioStreamProperties(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamQueued(AudioStreamHandle stream) => T.GetAudioStreamQueued(stream);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetBasePath() => T.GetBasePath();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetBasePathRaw() => T.GetBasePathRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        ) => T.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        ) => T.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCameraDriver(int index) => T.GetCameraDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCameraDriverRaw(int index) => T.GetCameraDriverRaw(index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetCameraFormat(CameraHandle camera, CameraSpec* spec) =>
            T.GetCameraFormat(camera, spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetCameraFormat(CameraHandle camera, Ref<CameraSpec> spec) =>
            T.GetCameraFormat(camera, spec);

        [return: NativeTypeName("SDL_CameraID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraID(CameraHandle camera) => T.GetCameraID(camera);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCameraName([NativeTypeName("SDL_CameraID")] uint instance_id) =>
            T.GetCameraName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCameraNameRaw([NativeTypeName("SDL_CameraID")] uint instance_id) =>
            T.GetCameraNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCameraPermissionState(CameraHandle camera) =>
            T.GetCameraPermissionState(camera);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraPosition GetCameraPosition(
            [NativeTypeName("SDL_CameraID")] uint instance_id
        ) => T.GetCameraPosition(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraProperties(CameraHandle camera) => T.GetCameraProperties(camera);

        [return: NativeTypeName("SDL_CameraID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetCameras(int* count) => T.GetCameras(count);

        [return: NativeTypeName("SDL_CameraID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetCameras(Ref<int> count) => T.GetCameras(count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraSpec** GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            int* count
        ) => T.GetCameraSupportedFormats(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<CameraSpec> GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            Ref<int> count
        ) => T.GetCameraSupportedFormats(devid, count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        ) => T.GetClipboardData(mime_type, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        ) => T.GetClipboardData(mime_type, size);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GetClipboardMimeTypes([NativeTypeName("size_t *")] nuint* num_mime_types) =>
            T.GetClipboardMimeTypes(num_mime_types);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GetClipboardMimeTypes(
            [NativeTypeName("size_t *")] Ref<nuint> num_mime_types
        ) => T.GetClipboardMimeTypes(num_mime_types);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetClipboardText() => T.GetClipboardText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetClipboardTextRaw() => T.GetClipboardTextRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] byte include_high_density_modes,
            DisplayMode* mode
        ) =>
            T.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes,
                mode
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] MaybeBool<byte> include_high_density_modes,
            Ref<DisplayMode> mode
        ) =>
            T.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes,
                mode
            );

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCPUCacheLineSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCPUCacheLineSize() => T.GetCPUCacheLineSize();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentAudioDriver() => T.GetCurrentAudioDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentAudioDriverRaw() => T.GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentCameraDriver() => T.GetCurrentCameraDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentCameraDriverRaw() => T.GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayOrientation(displayID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetCurrentRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
            T.GetCurrentRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetCurrentRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        ) => T.GetCurrentRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetCurrentThreadID() => T.GetCurrentThreadID();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
            T.GetCurrentTime(ticks);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks) =>
            T.GetCurrentTime(ticks);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentVideoDriver() => T.GetCurrentVideoDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentVideoDriverRaw() => T.GetCurrentVideoDriverRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle GetCursor() => T.GetCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetDateTimeLocalePreferences(DateFormat* dateFormat, TimeFormat* timeFormat) =>
            T.GetDateTimeLocalePreferences(dateFormat, timeFormat);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetDateTimeLocalePreferences(
            Ref<DateFormat> dateFormat,
            Ref<TimeFormat> timeFormat
        ) => T.GetDateTimeLocalePreferences(dateFormat, timeFormat);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfWeek")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDayOfWeek(int year, int month, int day) => T.GetDayOfWeek(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfYear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDayOfYear(int year, int month, int day) => T.GetDayOfYear(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDaysInMonth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDaysInMonth(int year, int month) => T.GetDaysInMonth(year, month);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertionHandler GetDefaultAssertionHandler() => T.GetDefaultAssertionHandler();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CursorHandle GetDefaultCursor() => T.GetDefaultCursor();

        [return: NativeTypeName("SDL_LogOutputFunction")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public LogOutputFunction GetDefaultLogOutputFunction() => T.GetDefaultLogOutputFunction();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetDesktopDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetDesktopDisplayModeRaw(displayID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => T.GetDisplayBounds(displayID, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        ) => T.GetDisplayBounds(displayID, rect);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayContentScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayContentScale(displayID);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
            T.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point) =>
            T.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            T.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
            T.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForWindow(WindowHandle window) => T.GetDisplayForWindow(window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayName(displayID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayNameRaw(displayID);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayProperties(displayID);

        [return: NativeTypeName("SDL_DisplayID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetDisplays(int* count) => T.GetDisplays(count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetDisplays(Ref<int> count) => T.GetDisplays(count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => T.GetDisplayUsableBounds(displayID, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        ) => T.GetDisplayUsableBounds(displayID, rect);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetError() => T.GetError();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetErrorRaw() => T.GetErrorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] EventFilter* filter,
            void** userdata
        ) => T.GetEventFilter(filter, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] Ref<EventFilter> filter,
            Ref2D userdata
        ) => T.GetEventFilter(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        ) => T.GetFloatProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        ) => T.GetFloatProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        ) => T.GetFullscreenDisplayModes(displayID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        ) => T.GetFullscreenDisplayModes(displayID, count);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            GamepadHandle gamepad,
            GamepadAxis axis
        ) => T.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadAppleSFSymbolsNameForAxisRaw(
            GamepadHandle gamepad,
            GamepadAxis axis
        ) => T.GetGamepadAppleSFSymbolsNameForAxisRaw(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => T.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadAppleSFSymbolsNameForButtonRaw(
            GamepadHandle gamepad,
            GamepadButton button
        ) => T.GetGamepadAppleSFSymbolsNameForButtonRaw(gamepad, button);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetGamepadAxis(GamepadHandle gamepad, GamepadAxis axis) =>
            T.GetGamepadAxis(gamepad, axis);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadAxis GetGamepadAxisFromString([NativeTypeName("const char *")] sbyte* str) =>
            T.GetGamepadAxisFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadAxisFromString(str);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadBinding** GetGamepadBindings(GamepadHandle gamepad, int* count) =>
            T.GetGamepadBindings(gamepad, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<GamepadBinding> GetGamepadBindings(GamepadHandle gamepad, Ref<int> count) =>
            T.GetGamepadBindings(gamepad, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetGamepadButton(GamepadHandle gamepad, GamepadButton button) =>
            T.GetGamepadButton(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => T.GetGamepadButtonFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadButtonFromString(str);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButtonLabel GetGamepadButtonLabel(
            GamepadHandle gamepad,
            GamepadButton button
        ) => T.GetGamepadButtonLabel(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabelForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        ) => T.GetGamepadButtonLabelForType(type, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetGamepadButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
            T.GetGamepadButtonRaw(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetGamepadConnectionState(GamepadHandle gamepad) =>
            T.GetGamepadConnectionState(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadFirmwareVersion(GamepadHandle gamepad) =>
            T.GetGamepadFirmwareVersion(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadHandle GetGamepadFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadFromID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadHandle GetGamepadFromPlayerIndex(int player_index) =>
            T.GetGamepadFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadGUIDForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetGamepadGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadGuidForID(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadID(GamepadHandle gamepad) => T.GetGamepadID(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickHandle GetGamepadJoystick(GamepadHandle gamepad) =>
            T.GetGamepadJoystick(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadMapping(GamepadHandle gamepad) => T.GetGamepadMapping(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadMappingForGuid(Guid guid) => T.GetGamepadMappingForGuid(guid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadMappingForGuidRaw(Guid guid) => T.GetGamepadMappingForGuidRaw(guid);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadMappingForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadMappingForID(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadMappingForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadMappingForIDRaw(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadMappingRaw(GamepadHandle gamepad) =>
            T.GetGamepadMappingRaw(gamepad);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GetGamepadMappings(int* count) => T.GetGamepadMappings(count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GetGamepadMappings(Ref<int> count) => T.GetGamepadMappings(count);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadName(GamepadHandle gamepad) => T.GetGamepadName(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadNameForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadNameRaw(GamepadHandle gamepad) => T.GetGamepadNameRaw(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadPath(GamepadHandle gamepad) => T.GetGamepadPath(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadPathForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadPathForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadPathForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadPathRaw(GamepadHandle gamepad) => T.GetGamepadPathRaw(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadPlayerIndex(GamepadHandle gamepad) => T.GetGamepadPlayerIndex(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadPlayerIndexForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetGamepadPowerInfo(GamepadHandle gamepad, int* percent) =>
            T.GetGamepadPowerInfo(gamepad, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetGamepadPowerInfo(GamepadHandle gamepad, Ref<int> percent) =>
            T.GetGamepadPowerInfo(gamepad, percent);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProduct(GamepadHandle gamepad) => T.GetGamepadProduct(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProductForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadProductForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProductVersion(GamepadHandle gamepad) =>
            T.GetGamepadProductVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersionForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadProductVersionForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadProperties(GamepadHandle gamepad) => T.GetGamepadProperties(gamepad);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetGamepads(int* count) => T.GetGamepads(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetGamepads(Ref<int> count) => T.GetGamepads(count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            float* data,
            int num_values
        ) => T.GetGamepadSensorData(gamepad, type, data, num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        ) => T.GetGamepadSensorData(gamepad, type, data, num_values);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetGamepadSensorDataRate(GamepadHandle gamepad, SensorType type) =>
            T.GetGamepadSensorDataRate(gamepad, type);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadSerial(GamepadHandle gamepad) => T.GetGamepadSerial(gamepad);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadSerialRaw(GamepadHandle gamepad) => T.GetGamepadSerialRaw(gamepad);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetGamepadSteamHandle(GamepadHandle gamepad) =>
            T.GetGamepadSteamHandle(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            T.GetGamepadStringForAxis(axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
            T.GetGamepadStringForAxisRaw(axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            T.GetGamepadStringForButton(button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
            T.GetGamepadStringForButtonRaw(button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            T.GetGamepadStringForType(type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
            T.GetGamepadStringForTypeRaw(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            bool* down,
            float* x,
            float* y,
            float* pressure
        ) => T.GetGamepadTouchpadFinger(gamepad, touchpad, finger, down, x, y, pressure);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            Ref<bool> down,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        ) => T.GetGamepadTouchpadFinger(gamepad, touchpad, finger, down, x, y, pressure);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadType(GamepadHandle gamepad) => T.GetGamepadType(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadTypeForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadTypeFromString([NativeTypeName("const char *")] sbyte* str) =>
            T.GetGamepadTypeFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadTypeFromString(str);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadVendor(GamepadHandle gamepad) => T.GetGamepadVendor(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendorForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadVendorForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadVendorForID(instance_id);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalMouseState(float* x, float* y) => T.GetGlobalMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalMouseState(Ref<float> x, Ref<float> y) => T.GetGlobalMouseState(x, y);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalProperties() => T.GetGlobalProperties();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetGrabbedWindow() => T.GetGrabbedWindow();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetHapticEffectStatus(HapticHandle haptic, int effect) =>
            T.GetHapticEffectStatus(haptic, effect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetHapticEffectStatusRaw(HapticHandle haptic, int effect) =>
            T.GetHapticEffectStatusRaw(haptic, effect);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticFeatures(HapticHandle haptic) => T.GetHapticFeatures(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HapticHandle GetHapticFromID([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.GetHapticFromID(instance_id);

        [return: NativeTypeName("SDL_HapticID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticID(HapticHandle haptic) => T.GetHapticID(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHapticName(HapticHandle haptic) => T.GetHapticName(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHapticNameForID([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.GetHapticNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHapticNameForIDRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.GetHapticNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHapticNameRaw(HapticHandle haptic) => T.GetHapticNameRaw(haptic);

        [return: NativeTypeName("SDL_HapticID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetHaptics(int* count) => T.GetHaptics(count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetHaptics(Ref<int> count) => T.GetHaptics(count);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) => T.GetHint(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetHint(name);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        ) => T.GetHintBoolean(name, default_value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        ) => T.GetHintBoolean(name, default_value);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetIOProperties(IOStreamHandle context) => T.GetIOProperties(context);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetIOSize(IOStreamHandle context) => T.GetIOSize(context);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStatus GetIOStatus(IOStreamHandle context) => T.GetIOStatus(context);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetJoystickAxis(JoystickHandle joystick, int axis) =>
            T.GetJoystickAxis(joystick, axis);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        ) => T.GetJoystickAxisInitialState(joystick, axis, state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        ) => T.GetJoystickAxisInitialState(joystick, axis, state);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickBall(JoystickHandle joystick, int ball, int* dx, int* dy) =>
            T.GetJoystickBall(joystick, ball, dx, dy);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetJoystickBall(
            JoystickHandle joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        ) => T.GetJoystickBall(joystick, ball, dx, dy);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetJoystickButton(JoystickHandle joystick, int button) =>
            T.GetJoystickButton(joystick, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickButtonRaw(JoystickHandle joystick, int button) =>
            T.GetJoystickButtonRaw(joystick, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetJoystickConnectionState(JoystickHandle joystick) =>
            T.GetJoystickConnectionState(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickFirmwareVersion(JoystickHandle joystick) =>
            T.GetJoystickFirmwareVersion(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickHandle GetJoystickFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickFromID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickHandle GetJoystickFromPlayerIndex(int player_index) =>
            T.GetJoystickFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuid(JoystickHandle joystick) => T.GetJoystickGuid(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetJoystickGuidForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        ) => T.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        ) => T.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickHat(JoystickHandle joystick, int hat) =>
            T.GetJoystickHat(joystick, hat);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickID(JoystickHandle joystick) => T.GetJoystickID(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickName(JoystickHandle joystick) => T.GetJoystickName(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickNameForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickNameRaw(JoystickHandle joystick) => T.GetJoystickNameRaw(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickPath(JoystickHandle joystick) => T.GetJoystickPath(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickPathForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickPathForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickPathForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickPathRaw(JoystickHandle joystick) => T.GetJoystickPathRaw(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickPlayerIndex(JoystickHandle joystick) =>
            T.GetJoystickPlayerIndex(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickPlayerIndexForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetJoystickPowerInfo(JoystickHandle joystick, int* percent) =>
            T.GetJoystickPowerInfo(joystick, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetJoystickPowerInfo(JoystickHandle joystick, Ref<int> percent) =>
            T.GetJoystickPowerInfo(joystick, percent);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProduct(JoystickHandle joystick) => T.GetJoystickProduct(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProductForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickProductForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProductVersion(JoystickHandle joystick) =>
            T.GetJoystickProductVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersionForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickProductVersionForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickProperties(JoystickHandle joystick) =>
            T.GetJoystickProperties(joystick);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetJoysticks(int* count) => T.GetJoysticks(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetJoysticks(Ref<int> count) => T.GetJoysticks(count);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickSerial(JoystickHandle joystick) =>
            T.GetJoystickSerial(joystick);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickSerialRaw(JoystickHandle joystick) =>
            T.GetJoystickSerialRaw(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickType GetJoystickType(JoystickHandle joystick) => T.GetJoystickType(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickType GetJoystickTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickTypeForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickVendor(JoystickHandle joystick) => T.GetJoystickVendor(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendorForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickVendorForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetJoystickVendorForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetKeyboardFocus() => T.GetKeyboardFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetKeyboardNameForID(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => T.GetKeyboardNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetKeyboardNameForIDRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => T.GetKeyboardNameForIDRaw(instance_id);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetKeyboards(int* count) => T.GetKeyboards(count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetKeyboards(Ref<int> count) => T.GetKeyboards(count);

        [return: NativeTypeName("const bool *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public bool* GetKeyboardState(int* numkeys) => T.GetKeyboardState(numkeys);

        [return: NativeTypeName("const bool *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<bool> GetKeyboardState(Ref<int> numkeys) => T.GetKeyboardState(numkeys);

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
            T.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] byte key_event
        ) => T.GetKeyFromScancode(scancode, modstate, key_event);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] MaybeBool<byte> key_event
        ) => T.GetKeyFromScancode(scancode, modstate, key_event);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] uint key) => T.GetKeyName(key);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] uint key) =>
            T.GetKeyNameRaw(key);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] LogOutputFunction* callback,
            void** userdata
        ) => T.GetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] Ref<LogOutputFunction> callback,
            Ref2D userdata
        ) => T.GetLogOutputFunction(callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public LogPriority GetLogPriority(int category) => T.GetLogPriority(category);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetMasksForPixelFormat(
            PixelFormat format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        ) => T.GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetMasksForPixelFormat(
            PixelFormat format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        ) => T.GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffects(HapticHandle haptic) => T.GetMaxHapticEffects(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffectsPlaying(HapticHandle haptic) =>
            T.GetMaxHapticEffectsPlaying(haptic);

        [return: NativeTypeName("SDL_MouseID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetMice(int* count) => T.GetMice(count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetMice(Ref<int> count) => T.GetMice(count);

        [return: NativeTypeName("SDL_Keymod")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetModState() => T.GetModState();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetMouseFocus() => T.GetMouseFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetMouseNameForID([NativeTypeName("SDL_MouseID")] uint instance_id) =>
            T.GetMouseNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetMouseNameForIDRaw([NativeTypeName("SDL_MouseID")] uint instance_id) =>
            T.GetMouseNameForIDRaw(instance_id);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetMouseState(float* x, float* y) => T.GetMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetMouseState(Ref<float> x, Ref<float> y) => T.GetMouseState(x, y);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNaturalDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetNaturalDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumAudioDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumAudioDrivers() => T.GetNumAudioDrivers();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        ) => T.GetNumberProperty(props, name, default_value);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        ) => T.GetNumberProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumCameraDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumCameraDrivers() => T.GetNumCameraDrivers();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpadFingers(GamepadHandle gamepad, int touchpad) =>
            T.GetNumGamepadTouchpadFingers(gamepad, touchpad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpads(GamepadHandle gamepad) =>
            T.GetNumGamepadTouchpads(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumHapticAxes(HapticHandle haptic) => T.GetNumHapticAxes(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickAxes(JoystickHandle joystick) => T.GetNumJoystickAxes(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickBalls(JoystickHandle joystick) => T.GetNumJoystickBalls(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickButtons(JoystickHandle joystick) =>
            T.GetNumJoystickButtons(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickHats(JoystickHandle joystick) => T.GetNumJoystickHats(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumLogicalCPUCores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumLogicalCPUCores() => T.GetNumLogicalCPUCores();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumRenderDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumRenderDrivers() => T.GetNumRenderDrivers();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumVideoDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumVideoDrivers() => T.GetNumVideoDrivers();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
            T.GetPathInfo(path, info);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        ) => T.GetPathInfo(path, info);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceCounter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetPerformanceCounter() => T.GetPerformanceCounter();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceFrequency")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetPerformanceFrequency() => T.GetPerformanceFrequency();

        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<PixelFormatDetails> GetPixelFormatDetails(PixelFormat format) =>
            T.GetPixelFormatDetails(format);

        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PixelFormatDetails* GetPixelFormatDetailsRaw(PixelFormat format) =>
            T.GetPixelFormatDetailsRaw(format);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatForMasks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PixelFormat GetPixelFormatForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        ) => T.GetPixelFormatForMasks(bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPixelFormatName(PixelFormat format) => T.GetPixelFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPixelFormatNameRaw(PixelFormat format) => T.GetPixelFormatNameRaw(format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPlatform() => T.GetPlatform();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPlatformRaw() => T.GetPlatformRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        ) => T.GetPointerProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        ) => T.GetPointerProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetPowerInfo(int* seconds, int* percent) =>
            T.GetPowerInfo(seconds, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent) =>
            T.GetPowerInfo(seconds, percent);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Locale** GetPreferredLocales(int* count) => T.GetPreferredLocales(count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<Locale> GetPreferredLocales(Ref<int> count) => T.GetPreferredLocales(count);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        ) => T.GetPrefPath(org, app);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        ) => T.GetPrefPath(org, app);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimaryDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPrimaryDisplay() => T.GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPrimarySelectionText() => T.GetPrimarySelectionText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPrimarySelectionTextRaw() => T.GetPrimarySelectionTextRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.GetPropertyType(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.GetPropertyType(props, name);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetRealGamepadType(GamepadHandle gamepad) =>
            T.GetRealGamepadType(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetRealGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetRealGamepadTypeForID(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        ) => T.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        ) => T.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        ) => T.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        ) => T.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        ) => T.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        ) => T.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        ) => T.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        ) => T.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => T.GetRectIntersection(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        ) => T.GetRectIntersection(A, B, result);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => T.GetRectIntersectionFloat(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        ) => T.GetRectIntersectionFloat(A, B, result);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => T.GetRectUnion(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        ) => T.GetRectUnion(A, B, result);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => T.GetRectUnionFloat(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        ) => T.GetRectUnionFloat(A, B, result);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRelativeMouseState(float* x, float* y) => T.GetRelativeMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRelativeMouseState(Ref<float> x, Ref<float> y) =>
            T.GetRelativeMouseState(x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderClipRect(RendererHandle renderer, Rect* rect) =>
            T.GetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderClipRect(RendererHandle renderer, Ref<Rect> rect) =>
            T.GetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderColorScale(RendererHandle renderer, float* scale) =>
            T.GetRenderColorScale(renderer, scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderColorScale(RendererHandle renderer, Ref<float> scale) =>
            T.GetRenderColorScale(renderer, scale);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => T.GetRenderDrawBlendMode(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        ) => T.GetRenderDrawBlendMode(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.GetRenderDrawColor(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.GetRenderDrawColor(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderDrawColorFloat(
            RendererHandle renderer,
            float* r,
            float* g,
            float* b,
            float* a
        ) => T.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderDrawColorFloat(
            RendererHandle renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        ) => T.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetRenderDriver(int index) => T.GetRenderDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetRenderDriverRaw(int index) => T.GetRenderDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle GetRenderer(WindowHandle window) => T.GetRenderer(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle GetRendererFromTexture(Texture* texture) =>
            T.GetRendererFromTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public RendererHandle GetRendererFromTexture(Ref<Texture> texture) =>
            T.GetRendererFromTexture(texture);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetRendererName(RendererHandle renderer) => T.GetRendererName(renderer);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetRendererNameRaw(RendererHandle renderer) => T.GetRendererNameRaw(renderer);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRendererProperties(RendererHandle renderer) =>
            T.GetRendererProperties(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderLogicalPresentation(
            RendererHandle renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode
        ) => T.GetRenderLogicalPresentation(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderLogicalPresentation(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode
        ) => T.GetRenderLogicalPresentation(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderLogicalPresentationRect(RendererHandle renderer, FRect* rect) =>
            T.GetRenderLogicalPresentationRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderLogicalPresentationRect(
            RendererHandle renderer,
            Ref<FRect> rect
        ) => T.GetRenderLogicalPresentationRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetRenderMetalCommandEncoder(RendererHandle renderer) =>
            T.GetRenderMetalCommandEncoder(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetRenderMetalCommandEncoderRaw(RendererHandle renderer) =>
            T.GetRenderMetalCommandEncoderRaw(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetRenderMetalLayer(RendererHandle renderer) => T.GetRenderMetalLayer(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetRenderMetalLayerRaw(RendererHandle renderer) =>
            T.GetRenderMetalLayerRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
            T.GetRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        ) => T.GetRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderSafeArea(RendererHandle renderer, Rect* rect) =>
            T.GetRenderSafeArea(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderSafeArea(RendererHandle renderer, Ref<Rect> rect) =>
            T.GetRenderSafeArea(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderScale(RendererHandle renderer, float* scaleX, float* scaleY) =>
            T.GetRenderScale(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderScale(
            RendererHandle renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        ) => T.GetRenderScale(renderer, scaleX, scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Texture> GetRenderTarget(RendererHandle renderer) => T.GetRenderTarget(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Texture* GetRenderTargetRaw(RendererHandle renderer) =>
            T.GetRenderTargetRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderViewport(RendererHandle renderer, Rect* rect) =>
            T.GetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderViewport(RendererHandle renderer, Ref<Rect> rect) =>
            T.GetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetRenderVSync(RendererHandle renderer, int* vsync) =>
            T.GetRenderVSync(renderer, vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetRenderVSync(RendererHandle renderer, Ref<int> vsync) =>
            T.GetRenderVSync(renderer, vsync);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetRenderWindow(RendererHandle renderer) => T.GetRenderWindow(renderer);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetRevision() => T.GetRevision();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetRevisionRaw() => T.GetRevisionRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetRGB(pixel, format, palette, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetRGB(pixel, format, palette, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.GetRgba(pixel, format, palette, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.GetRgba(pixel, format, palette, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSandbox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Sandbox GetSandbox() => T.GetSandbox();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] ushort* modstate
        ) => T.GetScancodeFromKey(key, modstate);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] Ref<ushort> modstate
        ) => T.GetScancodeFromKey(key, modstate);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
            T.GetScancodeFromName(name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetScancodeFromName(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetScancodeName(Scancode scancode) => T.GetScancodeName(scancode);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetScancodeNameRaw(Scancode scancode) => T.GetScancodeNameRaw(scancode);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSemaphoreValue(SemaphoreHandle sem) => T.GetSemaphoreValue(sem);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSensorData(SensorHandle sensor, float* data, int num_values) =>
            T.GetSensorData(sensor, data, num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSensorData(
            SensorHandle sensor,
            Ref<float> data,
            int num_values
        ) => T.GetSensorData(sensor, data, num_values);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorHandle GetSensorFromID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.GetSensorFromID(instance_id);

        [return: NativeTypeName("SDL_SensorID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorID(SensorHandle sensor) => T.GetSensorID(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetSensorName(SensorHandle sensor) => T.GetSensorName(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetSensorNameForID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.GetSensorNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetSensorNameForIDRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.GetSensorNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetSensorNameRaw(SensorHandle sensor) => T.GetSensorNameRaw(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorNonPortableType(SensorHandle sensor) =>
            T.GetSensorNonPortableType(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorNonPortableTypeForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorNonPortableTypeForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorProperties(SensorHandle sensor) => T.GetSensorProperties(sensor);

        [return: NativeTypeName("SDL_SensorID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetSensors(int* count) => T.GetSensors(count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetSensors(Ref<int> count) => T.GetSensors(count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorType GetSensorType(SensorHandle sensor) => T.GetSensorType(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorType GetSensorTypeForID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.GetSensorTypeForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSilenceValueForFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSilenceValueForFormat(AudioFormat format) =>
            T.GetSilenceValueForFormat(format);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSIMDAlignment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint GetSimdAlignment() => T.GetSimdAlignment();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        ) => T.GetStorageFileSize(storage, path, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        ) => T.GetStorageFileSize(storage, path, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => T.GetStoragePathInfo(storage, path, info);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        ) => T.GetStoragePathInfo(storage, path, info);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetStorageSpaceRemaining(StorageHandle storage) =>
            T.GetStorageSpaceRemaining(storage);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        ) => T.GetStringProperty(props, name, default_value);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        ) => T.GetStringProperty(props, name, default_value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8 *")] byte* alpha) =>
            T.GetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        ) => T.GetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => T.GetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        ) => T.GetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSurfaceClipRect(Surface* surface, Rect* rect) =>
            T.GetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect) =>
            T.GetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSurfaceColorKey(Surface* surface, [NativeTypeName("Uint32 *")] uint* key) =>
            T.GetSurfaceColorKey(surface, key);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        ) => T.GetSurfaceColorKey(surface, key);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetSurfaceColorMod(surface, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetSurfaceColorMod(surface, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Colorspace GetSurfaceColorspace(Surface* surface) => T.GetSurfaceColorspace(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Colorspace GetSurfaceColorspace(Ref<Surface> surface) =>
            T.GetSurfaceColorspace(surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface** GetSurfaceImages(Surface* surface, int* count) =>
            T.GetSurfaceImages(surface, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<Surface> GetSurfaceImages(Ref<Surface> surface, Ref<int> count) =>
            T.GetSurfaceImages(surface, count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Palette* GetSurfacePalette(Surface* surface) => T.GetSurfacePalette(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Palette> GetSurfacePalette(Ref<Surface> surface) => T.GetSurfacePalette(surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSurfaceProperties(Surface* surface) => T.GetSurfaceProperties(surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSurfaceProperties(Ref<Surface> surface) => T.GetSurfaceProperties(surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemRAM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSystemRAM() => T.GetSystemRAM();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemTheme")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SystemTheme GetSystemTheme() => T.GetSystemTheme();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextInputArea(WindowHandle window, Rect* rect, int* cursor) =>
            T.GetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextInputArea(
            WindowHandle window,
            Ref<Rect> rect,
            Ref<int> cursor
        ) => T.GetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureAlphaMod(Texture* texture, [NativeTypeName("Uint8 *")] byte* alpha) =>
            T.GetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        ) => T.GetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureAlphaModFloat(Texture* texture, float* alpha) =>
            T.GetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureAlphaModFloat(Ref<Texture> texture, Ref<float> alpha) =>
            T.GetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => T.GetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        ) => T.GetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureColorModFloat(Texture* texture, float* r, float* g, float* b) =>
            T.GetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureColorModFloat(
            Ref<Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        ) => T.GetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetTextureProperties(Texture* texture) => T.GetTextureProperties(texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetTextureProperties(Ref<Texture> texture) => T.GetTextureProperties(texture);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureScaleMode(Texture* texture, ScaleMode* scaleMode) =>
            T.GetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureScaleMode(
            Ref<Texture> texture,
            Ref<ScaleMode> scaleMode
        ) => T.GetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetTextureSize(Texture* texture, float* w, float* h) =>
            T.GetTextureSize(texture, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetTextureSize(Ref<Texture> texture, Ref<float> w, Ref<float> h) =>
            T.GetTextureSize(texture, w, h);

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetThreadID(ThreadHandle thread) => T.GetThreadID(thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetThreadName(ThreadHandle thread) => T.GetThreadName(thread);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetThreadNameRaw(ThreadHandle thread) => T.GetThreadNameRaw(thread);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTicks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetTicks() => T.GetTicks();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTicksNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetTicksNS() => T.GetTicksNS();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetTLS([NativeTypeName("SDL_TLSID *")] AtomicInt* id) => T.GetTLS(id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetTLS([NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id) => T.GetTLS(id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceName(touchID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceNameRaw(touchID);

        [return: NativeTypeName("SDL_TouchID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong* GetTouchDevices(int* count) => T.GetTouchDevices(count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<ulong> GetTouchDevices(Ref<int> count) => T.GetTouchDevices(count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public TouchDeviceType GetTouchDeviceType([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceType(touchID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        ) => T.GetTouchFingers(touchID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        ) => T.GetTouchFingers(touchID, count);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetUserFolder(Folder folder) => T.GetUserFolder(folder);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetUserFolderRaw(Folder folder) => T.GetUserFolderRaw(folder);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetVersion() => T.GetVersion();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetVideoDriver(int index) => T.GetVideoDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetVideoDriverRaw(int index) => T.GetVideoDriverRaw(index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowAspectRatio(
            WindowHandle window,
            float* min_aspect,
            float* max_aspect
        ) => T.GetWindowAspectRatio(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowAspectRatio(
            WindowHandle window,
            Ref<float> min_aspect,
            Ref<float> max_aspect
        ) => T.GetWindowAspectRatio(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowBordersSize(
            WindowHandle window,
            int* top,
            int* left,
            int* bottom,
            int* right
        ) => T.GetWindowBordersSize(window, top, left, bottom, right);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowBordersSize(
            WindowHandle window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        ) => T.GetWindowBordersSize(window, top, left, bottom, right);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowDisplayScale(WindowHandle window) => T.GetWindowDisplayScale(window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetWindowFlags(WindowHandle window) => T.GetWindowFlags(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Event* @event
        ) => T.GetWindowFromEvent(@event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Ref<Event> @event
        ) => T.GetWindowFromEvent(@event);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
            T.GetWindowFromID(id);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetWindowFullscreenMode(WindowHandle window) =>
            T.GetWindowFullscreenMode(window);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetWindowFullscreenModeRaw(WindowHandle window) =>
            T.GetWindowFullscreenModeRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] nuint* size
        ) => T.GetWindowICCProfile(window, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        ) => T.GetWindowICCProfile(window, size);

        [return: NativeTypeName("SDL_WindowID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowID(WindowHandle window) => T.GetWindowID(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowKeyboardGrab(WindowHandle window) =>
            T.GetWindowKeyboardGrab(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowKeyboardGrabRaw(WindowHandle window) =>
            T.GetWindowKeyboardGrabRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowMaximumSize(WindowHandle window, int* w, int* h) =>
            T.GetWindowMaximumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowMaximumSize(WindowHandle window, Ref<int> w, Ref<int> h) =>
            T.GetWindowMaximumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowMinimumSize(WindowHandle window, int* w, int* h) =>
            T.GetWindowMinimumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowMinimumSize(WindowHandle window, Ref<int> w, Ref<int> h) =>
            T.GetWindowMinimumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowMouseGrab(WindowHandle window) =>
            T.GetWindowMouseGrab(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowMouseGrabRaw(WindowHandle window) => T.GetWindowMouseGrabRaw(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Rect> GetWindowMouseRect(WindowHandle window) => T.GetWindowMouseRect(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Rect* GetWindowMouseRectRaw(WindowHandle window) => T.GetWindowMouseRectRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowOpacity(WindowHandle window) => T.GetWindowOpacity(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GetWindowParent(WindowHandle window) => T.GetWindowParent(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowPixelDensity(WindowHandle window) => T.GetWindowPixelDensity(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PixelFormat GetWindowPixelFormat(WindowHandle window) =>
            T.GetWindowPixelFormat(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowPosition(WindowHandle window, int* x, int* y) =>
            T.GetWindowPosition(window, x, y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowPosition(WindowHandle window, Ref<int> x, Ref<int> y) =>
            T.GetWindowPosition(window, x, y);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowProperties(WindowHandle window) => T.GetWindowProperties(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowRelativeMouseMode(WindowHandle window) =>
            T.GetWindowRelativeMouseMode(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowRelativeMouseModeRaw(WindowHandle window) =>
            T.GetWindowRelativeMouseModeRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle* GetWindows(int* count) => T.GetWindows(count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<WindowHandle> GetWindows(Ref<int> count) => T.GetWindows(count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowSafeArea(WindowHandle window, Rect* rect) =>
            T.GetWindowSafeArea(window, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowSafeArea(WindowHandle window, Ref<Rect> rect) =>
            T.GetWindowSafeArea(window, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowSize(WindowHandle window, int* w, int* h) =>
            T.GetWindowSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowSize(WindowHandle window, Ref<int> w, Ref<int> h) =>
            T.GetWindowSize(window, w, h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowSizeInPixels(WindowHandle window, int* w, int* h) =>
            T.GetWindowSizeInPixels(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowSizeInPixels(WindowHandle window, Ref<int> w, Ref<int> h) =>
            T.GetWindowSizeInPixels(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> GetWindowSurface(WindowHandle window) => T.GetWindowSurface(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* GetWindowSurfaceRaw(WindowHandle window) => T.GetWindowSurfaceRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetWindowSurfaceVSync(WindowHandle window, int* vsync) =>
            T.GetWindowSurfaceVSync(window, vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GetWindowSurfaceVSync(WindowHandle window, Ref<int> vsync) =>
            T.GetWindowSurfaceVSync(window, vsync);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetWindowTitle(WindowHandle window) => T.GetWindowTitle(window);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetWindowTitleRaw(WindowHandle window) => T.GetWindowTitleRaw(window);

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GLContextStateHandle GLCreateContext(WindowHandle window) =>
            T.GLCreateContext(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLDestroyContext(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => T.GLDestroyContext(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLDestroyContextRaw(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => T.GLDestroyContextRaw(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
            T.GLExtensionSupported(extension);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        ) => T.GLExtensionSupported(extension);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLGetAttribute(GLAttr attr, int* value) => T.GLGetAttribute(attr, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLGetAttribute(GLAttr attr, Ref<int> value) =>
            T.GLGetAttribute(attr, value);

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GLContextStateHandle GLGetCurrentContext() => T.GLGetCurrentContext();

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public WindowHandle GLGetCurrentWindow() => T.GLGetCurrentWindow();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer GLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
            T.GLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer GLGetProcAddress([NativeTypeName("const char *")] Ref<sbyte> proc) =>
            T.GLGetProcAddress(proc);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLGetSwapInterval(int* interval) => T.GLGetSwapInterval(interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLGetSwapInterval(Ref<int> interval) =>
            T.GLGetSwapInterval(interval);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
            T.GLLoadLibrary(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.GLLoadLibrary(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLMakeCurrent(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => T.GLMakeCurrent(window, context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLMakeCurrentRaw(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => T.GLMakeCurrentRaw(window, context);

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ResetAttributes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GLResetAttributes() => T.GLResetAttributes();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLSetAttribute(GLAttr attr, int value) =>
            T.GLSetAttribute(attr, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLSetAttributeRaw(GLAttr attr, int value) => T.GLSetAttributeRaw(attr, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLSetSwapInterval(int interval) => T.GLSetSwapInterval(interval);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLSetSwapIntervalRaw(int interval) => T.GLSetSwapIntervalRaw(interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> GLSwapWindow(WindowHandle window) => T.GLSwapWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GLSwapWindowRaw(WindowHandle window) => T.GLSwapWindowRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_UnloadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GLUnloadLibrary() => T.GLUnloadLibrary();

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        ) => T.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        ) => T.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        ) => T.GlobStorageDirectory(storage, path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        ) => T.GlobStorageDirectory(storage, path, pattern, flags, count);

        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        ) => T.GuidToString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        ) => T.GuidToString(guid, pszGUID, cbGUID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => T.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        ) => T.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HapticRumbleSupported(HapticHandle haptic) =>
            T.HapticRumbleSupported(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HapticRumbleSupportedRaw(HapticHandle haptic) =>
            T.HapticRumbleSupportedRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasAltiVec() => T.HasAltiVec();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasAltiVecRaw() => T.HasAltiVecRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasArmsimd() => T.HasArmsimd();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasArmsimdRaw() => T.HasArmsimdRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasAVX() => T.HasAVX();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasAVX2() => T.HasAVX2();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasAVX2Raw() => T.HasAVX2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasAVX512F() => T.HasAVX512F();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasAVX512FRaw() => T.HasAVX512FRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasAVXRaw() => T.HasAVXRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
            T.HasClipboardData(mime_type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        ) => T.HasClipboardData(mime_type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasClipboardText() => T.HasClipboardText();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasClipboardTextRaw() => T.HasClipboardTextRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasEvent([NativeTypeName("Uint32")] uint type) => T.HasEvent(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasEventRaw([NativeTypeName("Uint32")] uint type) => T.HasEventRaw(type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.HasEvents(minType, maxType);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.HasEventsRaw(minType, maxType);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasGamepad() => T.HasGamepad();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasGamepadRaw() => T.HasGamepadRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasJoystick() => T.HasJoystick();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasJoystickRaw() => T.HasJoystickRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasKeyboard() => T.HasKeyboard();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasKeyboardRaw() => T.HasKeyboardRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasLasx() => T.HasLasx();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasLasxRaw() => T.HasLasxRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasLSX() => T.HasLSX();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasLSXRaw() => T.HasLSXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasMMX() => T.HasMMX();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasMMXRaw() => T.HasMMXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasMouse() => T.HasMouse();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasMouseRaw() => T.HasMouseRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasNeon() => T.HasNeon();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasNeonRaw() => T.HasNeonRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasPrimarySelectionText() => T.HasPrimarySelectionText();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasPrimarySelectionTextRaw() => T.HasPrimarySelectionTextRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.HasProperty(props, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.HasProperty(props, name);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        ) => T.HasRectIntersection(A, B);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        ) => T.HasRectIntersection(A, B);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        ) => T.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        ) => T.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasScreenKeyboardSupport() => T.HasScreenKeyboardSupport();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasScreenKeyboardSupportRaw() => T.HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasSSE() => T.HasSSE();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasSSE2() => T.HasSSE2();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasSSE2Raw() => T.HasSSE2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasSSE3() => T.HasSSE3();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasSSE3Raw() => T.HasSSE3Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasSSE41() => T.HasSSE41();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasSSE41Raw() => T.HasSSE41Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HasSSE42() => T.HasSSE42();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasSSE42Raw() => T.HasSSE42Raw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HasSSERaw() => T.HasSSERaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidBleScan([NativeTypeName("bool")] byte active) => T.HidBleScan(active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidBleScan([NativeTypeName("bool")] MaybeBool<byte> active) =>
            T.HidBleScan(active);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidClose(HidDeviceHandle dev) => T.HidClose(dev);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_device_change_count")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint HidDeviceChangeCount() => T.HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => T.HidEnumerate(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => T.HidEnumerateRaw(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_exit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidExit() => T.HidExit();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidFreeEnumeration(HidDeviceInfo* devs) => T.HidFreeEnumeration(devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidFreeEnumeration(Ref<HidDeviceInfo> devs) => T.HidFreeEnumeration(devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<HidDeviceInfo> HidGetDeviceInfo(HidDeviceHandle dev) => T.HidGetDeviceInfo(dev);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceInfo* HidGetDeviceInfoRaw(HidDeviceHandle dev) =>
            T.HidGetDeviceInfoRaw(dev);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetFeatureReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetIndexedString(dev, string_index, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetIndexedString(dev, string_index, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetInputReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetInputReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetManufacturerString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetManufacturerString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetProductString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetProductString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => T.HidGetReportDescriptor(dev, buf, buf_size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => T.HidGetReportDescriptor(dev, buf, buf_size);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetSerialNumberString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetSerialNumberString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidInit() => T.HidInit();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        ) => T.HidOpen(vendor_id, product_id, serial_number);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        ) => T.HidOpen(vendor_id, product_id, serial_number);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
            T.HidOpenPath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.HidOpenPath(path);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidRead(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidRead(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => T.HidReadTimeout(dev, data, length, milliseconds);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => T.HidReadTimeout(dev, data, length, milliseconds);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidSendFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidSendFeatureReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSetNonblocking(HidDeviceHandle dev, int nonblock) =>
            T.HidSetNonblocking(dev, nonblock);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidWrite(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidWrite(dev, data, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HideCursor() => T.HideCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HideCursorRaw() => T.HideCursorRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> HideWindow(WindowHandle window) => T.HideWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte HideWindowRaw(WindowHandle window) => T.HideWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> Init([NativeTypeName("SDL_InitFlags")] uint flags) => T.Init(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> InitHapticRumble(HapticHandle haptic) => T.InitHapticRumble(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte InitHapticRumbleRaw(HapticHandle haptic) => T.InitHapticRumbleRaw(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte InitRaw([NativeTypeName("SDL_InitFlags")] uint flags) => T.InitRaw(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> InitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
            T.InitSubSystem(flags);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte InitSubSystemRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
            T.InitSubSystemRaw(flags);

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        ) => T.IOFromConstMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        ) => T.IOFromConstMem(mem, size);

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromDynamicMem() => T.IOFromDynamicMem();

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        ) => T.IOFromFile(file, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        ) => T.IOFromFile(file, mode);

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
            T.IOFromMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size) =>
            T.IOFromMem(mem, size);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => T.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        ) => T.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsGamepad(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsGamepadRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsJoystickHaptic(JoystickHandle joystick) =>
            T.IsJoystickHaptic(joystick);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsJoystickHapticRaw(JoystickHandle joystick) => T.IsJoystickHapticRaw(joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.IsJoystickVirtual(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsJoystickVirtualRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsMouseHaptic() => T.IsMouseHaptic();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsMouseHapticRaw() => T.IsMouseHapticRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsTablet() => T.IsTablet();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsTabletRaw() => T.IsTabletRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> IsTV() => T.IsTV();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte IsTVRaw() => T.IsTVRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> JoystickConnected(JoystickHandle joystick) =>
            T.JoystickConnected(joystick);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte JoystickConnectedRaw(JoystickHandle joystick) =>
            T.JoystickConnectedRaw(joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> JoystickEventsEnabled() => T.JoystickEventsEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte JoystickEventsEnabledRaw() => T.JoystickEventsEnabledRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) => T.LoadBMP(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file) =>
            T.LoadBMP(file);

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* LoadBMPIO(IOStreamHandle src, [NativeTypeName("bool")] byte closeio) =>
            T.LoadBMPIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> LoadBMPIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => T.LoadBMPIO(src, closeio);

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        ) => T.LoadFile(file, datasize);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        ) => T.LoadFile(file, datasize);

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("bool")] byte closeio
        ) => T.LoadFileIO(src, datasize, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => T.LoadFileIO(src, datasize, closeio);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.LoadFunction(handle, name);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.LoadFunction(handle, name);

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SharedObjectHandle LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
            T.LoadObject(sofile);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SharedObjectHandle LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile) =>
            T.LoadObject(sofile);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => T.LoadWAV(path, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        ) => T.LoadWAV(path, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => T.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        ) => T.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LockAudioStream(AudioStreamHandle stream) =>
            T.LockAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LockAudioStreamRaw(AudioStreamHandle stream) => T.LockAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockJoysticks() => T.LockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockMutex(MutexHandle mutex) => T.LockMutex(mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.LockProperties(props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LockPropertiesRaw([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.LockPropertiesRaw(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForReading(RWLockHandle rwlock) => T.LockRWLockForReading(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForWriting(RWLockHandle rwlock) => T.LockRWLockForWriting(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.LockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.LockSpinlock(@lock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LockSurface(Surface* surface) => T.LockSurface(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LockSurface(Ref<Surface> surface) => T.LockSurface(surface);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LockTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        ) => T.LockTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LockTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        ) => T.LockTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte LockTextureToSurface(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        ) => T.LockTextureToSurface(texture, rect, surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> LockTextureToSurface(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        ) => T.LockTextureToSurface(texture, rect, surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => T.LogMessageV(category, priority, fmt, ap);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        ) => T.LogMessageV(category, priority, fmt, ap);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapRGB(format, palette, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapRGB(format, palette, r, g, b);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapRgba(format, palette, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapRgba(format, palette, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapSurfaceRGB(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapSurfaceRGB(surface, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapSurfaceRGB(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapSurfaceRGB(surface, r, g, b);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapSurfaceRgba(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapSurfaceRgba(surface, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapSurfaceRgba(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapSurfaceRgba(surface, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> MaximizeWindow(WindowHandle window) => T.MaximizeWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte MaximizeWindowRaw(WindowHandle window) => T.MaximizeWindowRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MemoryBarrierAcquireFunction() => T.MemoryBarrierAcquireFunction();

        [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MemoryBarrierReleaseFunction() => T.MemoryBarrierReleaseFunction();

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr MetalCreateView(WindowHandle window) => T.MetalCreateView(window);

        [return: NativeTypeName("SDL_MetalView")]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* MetalCreateViewRaw(WindowHandle window) => T.MetalCreateViewRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
            T.MetalDestroyView(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view) =>
            T.MetalDestroyView(view);

        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
            T.MetalGetLayer(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view) =>
            T.MetalGetLayer(view);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> MinimizeWindow(WindowHandle window) => T.MinimizeWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte MinimizeWindowRaw(WindowHandle window) => T.MinimizeWindowRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte MixAudio(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        ) => T.MixAudio(dst, src, format, len, volume);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> MixAudio(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        ) => T.MixAudio(dst, src, format, len, volume);

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidEnterBackground() => T.OnApplicationDidEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidEnterForeground() => T.OnApplicationDidEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidReceiveMemoryWarning() =>
            T.OnApplicationDidReceiveMemoryWarning();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillEnterBackground() => T.OnApplicationWillEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillEnterForeground() => T.OnApplicationWillEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillTerminate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillTerminate() => T.OnApplicationWillTerminate();

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        ) => T.OpenAudioDevice(devid, spec);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        ) => T.OpenAudioDevice(devid, spec);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => T.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        ) => T.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        ) => T.OpenCamera(instance_id, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        ) => T.OpenCamera(instance_id, spec);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
            T.OpenFileStorage(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenFileStorage([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.OpenFileStorage(path);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadHandle OpenGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.OpenGamepad(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HapticHandle OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.OpenHaptic(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HapticHandle OpenHapticFromJoystick(JoystickHandle joystick) =>
            T.OpenHapticFromJoystick(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HapticHandle OpenHapticFromMouse() => T.OpenHapticFromMouse();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        ) => T.OpenIO(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        ) => T.OpenIO(iface, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickHandle OpenJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.OpenJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorHandle OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.OpenSensor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        ) => T.OpenStorage(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        ) => T.OpenStorage(iface, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenTitleStorage(@override, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenTitleStorage(@override, props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte OpenURL([NativeTypeName("const char *")] sbyte* url) => T.OpenURL(url);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> OpenURL([NativeTypeName("const char *")] Ref<sbyte> url) =>
            T.OpenURL(url);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenUserStorage(org, app, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenUserStorage(org, app, props);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> OutOfMemory() => T.OutOfMemory();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte OutOfMemoryRaw() => T.OutOfMemoryRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.PauseAudioDevice(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PauseAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.PauseAudioDeviceRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PauseAudioStreamDevice(AudioStreamHandle stream) =>
            T.PauseAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PauseAudioStreamDeviceRaw(AudioStreamHandle stream) =>
            T.PauseAudioStreamDeviceRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PauseHaptic(HapticHandle haptic) => T.PauseHaptic(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PauseHapticRaw(HapticHandle haptic) => T.PauseHapticRaw(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.PeepEvents(events, numevents, action, minType, maxType);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.PeepEvents(events, numevents, action, minType, maxType);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PlayHapticRumble(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => T.PlayHapticRumble(haptic, strength, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PlayHapticRumbleRaw(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => T.PlayHapticRumbleRaw(haptic, strength, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PollEvent(Event* @event) => T.PollEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PollEvent(Ref<Event> @event) => T.PollEvent(@event);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch,
            [NativeTypeName("bool")] byte linear
        ) =>
            T.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch,
                linear
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        ) =>
            T.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch,
                linear
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PremultiplySurfaceAlpha(
            Surface* surface,
            [NativeTypeName("bool")] byte linear
        ) => T.PremultiplySurfaceAlpha(surface, linear);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PremultiplySurfaceAlpha(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        ) => T.PremultiplySurfaceAlpha(surface, linear);

        [NativeFunction("SDL3", EntryPoint = "SDL_PumpEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void PumpEvents() => T.PumpEvents();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PushEvent(Event* @event) => T.PushEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PushEvent(Ref<Event> @event) => T.PushEvent(@event);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        ) => T.PutAudioStreamData(stream, buf, len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        ) => T.PutAudioStreamData(stream, buf, len);

        [NativeFunction("SDL3", EntryPoint = "SDL_Quit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void Quit() => T.Quit();

        [NativeFunction("SDL3", EntryPoint = "SDL_QuitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void QuitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
            T.QuitSubSystem(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RaiseWindow(WindowHandle window) => T.RaiseWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RaiseWindowRaw(WindowHandle window) => T.RaiseWindowRaw(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint ReadIO(
            IOStreamHandle context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.ReadIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint ReadIO(
            IOStreamHandle context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.ReadIO(context, ptr, size);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS16BE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
            T.ReadS16BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS16BE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        ) => T.ReadS16BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS16LE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
            T.ReadS16LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS16LE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        ) => T.ReadS16LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS32BE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
            T.ReadS32BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS32BE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        ) => T.ReadS32BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS32LE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
            T.ReadS32LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS32LE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        ) => T.ReadS32LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS64BE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
            T.ReadS64BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS64BE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        ) => T.ReadS64BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS64LE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
            T.ReadS64LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS64LE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        ) => T.ReadS64LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadS8(IOStreamHandle src, [NativeTypeName("Sint8 *")] sbyte* value) =>
            T.ReadS8(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadS8(
            IOStreamHandle src,
            [NativeTypeName("Sint8 *")] Ref<sbyte> value
        ) => T.ReadS8(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        ) => T.ReadStorageFile(storage, path, destination, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        ) => T.ReadStorageFile(storage, path, destination, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float* r,
            float* g,
            float* b,
            float* a
        ) => T.ReadSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        ) => T.ReadSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU16BE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
            T.ReadU16BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU16BE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        ) => T.ReadU16BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU16LE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
            T.ReadU16LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU16LE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        ) => T.ReadU16LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU32BE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
            T.ReadU32BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU32BE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        ) => T.ReadU32BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU32LE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
            T.ReadU32LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU32LE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        ) => T.ReadU32LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU64BE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
            T.ReadU64BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU64BE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        ) => T.ReadU64BE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU64LE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
            T.ReadU64LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU64LE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        ) => T.ReadU64LE(src, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReadU8(IOStreamHandle src, [NativeTypeName("Uint8 *")] byte* value) =>
            T.ReadU8(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReadU8(
            IOStreamHandle src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        ) => T.ReadU8(src, value);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RegisterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint RegisterEvents(int numevents) => T.RegisterEvents(numevents);

        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ReleaseCameraFrame(CameraHandle camera, Surface* frame) =>
            T.ReleaseCameraFrame(camera, frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ReleaseCameraFrame(CameraHandle camera, Ref<Surface> frame) =>
            T.ReleaseCameraFrame(camera, frame);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ReloadGamepadMappings() => T.ReloadGamepadMappings();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ReloadGamepadMappingsRaw() => T.ReloadGamepadMappingsRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => T.RemoveEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        ) => T.RemoveEventWatch(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        ) => T.RemoveHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        ) => T.RemoveHintCallback(name, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RemovePath([NativeTypeName("const char *")] sbyte* path) => T.RemovePath(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RemovePath([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.RemovePath(path);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => T.RemoveStoragePath(storage, path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        ) => T.RemoveStoragePath(storage, path);

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveSurfaceAlternateImages(Surface* surface) =>
            T.RemoveSurfaceAlternateImages(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void RemoveSurfaceAlternateImages(Ref<Surface> surface) =>
            T.RemoveSurfaceAlternateImages(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            T.RemoveTimer(id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) => T.RemoveTimerRaw(id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.RenamePath(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.RenamePath(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.RenameStoragePath(storage, oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.RenameStoragePath(storage, oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderClear(RendererHandle renderer) => T.RenderClear(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderClearRaw(RendererHandle renderer) => T.RenderClearRaw(renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderClipEnabled(RendererHandle renderer) =>
            T.RenderClipEnabled(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderClipEnabledRaw(RendererHandle renderer) =>
            T.RenderClipEnabledRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        ) => T.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        ) => T.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        ) => T.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        ) => T.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] sbyte* str
        ) => T.RenderDebugText(renderer, x, y, str);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.RenderDebugText(renderer, x, y, str);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => T.RenderFillRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        ) => T.RenderFillRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => T.RenderFillRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        ) => T.RenderFillRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderGeometry(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        ) => T.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderGeometry(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        ) => T.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderGeometryRaw(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderGeometryRaw(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderLine(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => T.RenderLine(renderer, x1, y1, x2, y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderLineRaw(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => T.RenderLineRaw(renderer, x1, y1, x2, y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => T.RenderLines(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        ) => T.RenderLines(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderPoint(RendererHandle renderer, float x, float y) =>
            T.RenderPoint(renderer, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderPointRaw(RendererHandle renderer, float x, float y) =>
            T.RenderPointRaw(renderer, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => T.RenderPoints(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        ) => T.RenderPoints(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderPresent(RendererHandle renderer) => T.RenderPresent(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderPresentRaw(RendererHandle renderer) => T.RenderPresentRaw(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.RenderReadPixels(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.RenderReadPixels(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => T.RenderRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        ) => T.RenderRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => T.RenderRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        ) => T.RenderRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderTexture(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => T.RenderTexture(renderer, texture, srcrect, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderTexture(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        ) => T.RenderTexture(renderer, texture, srcrect, dstrect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderTexture9Grid(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) =>
            T.RenderTexture9Grid(
                renderer,
                texture,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderTexture9Grid(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        ) =>
            T.RenderTexture9Grid(
                renderer,
                texture,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderTextureRotated(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            FlipMode flip
        ) => T.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderTextureRotated(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            FlipMode flip
        ) => T.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderTextureTiled(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => T.RenderTextureTiled(renderer, texture, srcrect, scale, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderTextureTiled(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        ) => T.RenderTextureTiled(renderer, texture, srcrect, scale, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RenderViewportSet(RendererHandle renderer) =>
            T.RenderViewportSet(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RenderViewportSetRaw(RendererHandle renderer) =>
            T.RenderViewportSetRaw(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        ) => T.ReportAssertion(data, func, file, line);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        ) => T.ReportAssertion(data, func, file, line);

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetAssertionReport() => T.ResetAssertionReport();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ResetHint([NativeTypeName("const char *")] sbyte* name) => T.ResetHint(name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.ResetHint(name);

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetHints() => T.ResetHints();

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetKeyboard() => T.ResetKeyboard();

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetLogPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetLogPriorities() => T.ResetLogPriorities();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RestoreWindow(WindowHandle window) => T.RestoreWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RestoreWindowRaw(WindowHandle window) => T.RestoreWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.ResumeAudioDevice(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ResumeAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.ResumeAudioDeviceRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ResumeAudioStreamDevice(AudioStreamHandle stream) =>
            T.ResumeAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ResumeAudioStreamDeviceRaw(AudioStreamHandle stream) =>
            T.ResumeAudioStreamDeviceRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ResumeHaptic(HapticHandle haptic) => T.ResumeHaptic(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ResumeHapticRaw(HapticHandle haptic) => T.ResumeHapticRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RumbleGamepad(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RumbleGamepadRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepadRaw(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RumbleGamepadTriggers(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RumbleGamepadTriggersRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepadTriggersRaw(gamepad, left_rumble, right_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RumbleJoystick(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystick(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RumbleJoystickRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            T.RumbleJoystickRaw(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RumbleJoystickTriggers(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RumbleJoystickTriggersRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystickTriggersRaw(joystick, left_rumble, right_rumble, duration_ms);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> RunHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => T.RunHapticEffect(haptic, effect, iterations);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte RunHapticEffectRaw(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => T.RunHapticEffectRaw(haptic, effect, iterations);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
            T.SaveBMP(surface, file);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        ) => T.SaveBMP(surface, file);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SaveBMPIO(
            Surface* surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] byte closeio
        ) => T.SaveBMPIO(surface, dst, closeio);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SaveBMPIO(
            Ref<Surface> surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => T.SaveBMPIO(surface, dst, closeio);

        [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ScaleSurface(
            Surface* surface,
            int width,
            int height,
            ScaleMode scaleMode
        ) => T.ScaleSurface(surface, width, height, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ScaleSurface(
            Ref<Surface> surface,
            int width,
            int height,
            ScaleMode scaleMode
        ) => T.ScaleSurface(surface, width, height, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ScreenKeyboardShown(WindowHandle window) =>
            T.ScreenKeyboardShown(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ScreenKeyboardShownRaw(WindowHandle window) => T.ScreenKeyboardShownRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ScreenSaverEnabled() => T.ScreenSaverEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ScreenSaverEnabledRaw() => T.ScreenSaverEnabledRaw();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long SeekIO(
            IOStreamHandle context,
            [NativeTypeName("Sint64")] long offset,
            IOWhence whence
        ) => T.SeekIO(context, offset, whence);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => T.SendGamepadEffect(gamepad, data, size);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        ) => T.SendGamepadEffect(gamepad, data, size);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => T.SendJoystickEffect(joystick, data, size);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        ) => T.SendJoystickEffect(joystick, data, size);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] float* data,
            int num_values
        ) => T.SendJoystickVirtualSensorData(joystick, type, sensor_timestamp, data, num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] Ref<float> data,
            int num_values
        ) => T.SendJoystickVirtualSensorData(joystick, type, sensor_timestamp, data, num_values);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAppMetadata(
            [NativeTypeName("const char *")] sbyte* appname,
            [NativeTypeName("const char *")] sbyte* appversion,
            [NativeTypeName("const char *")] sbyte* appidentifier
        ) => T.SetAppMetadata(appname, appversion, appidentifier);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAppMetadata(
            [NativeTypeName("const char *")] Ref<sbyte> appname,
            [NativeTypeName("const char *")] Ref<sbyte> appversion,
            [NativeTypeName("const char *")] Ref<sbyte> appidentifier
        ) => T.SetAppMetadata(appname, appversion, appidentifier);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAppMetadataProperty(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => T.SetAppMetadataProperty(name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        ) => T.SetAppMetadataProperty(name, value);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            void* userdata
        ) => T.SetAssertionHandler(handler, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            Ref userdata
        ) => T.SetAssertionHandler(handler, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAtomicInt(AtomicInt* a, int v) => T.SetAtomicInt(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAtomicInt(Ref<AtomicInt> a, int v) => T.SetAtomicInt(a, v);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* SetAtomicPointer(void** a, void* v) => T.SetAtomicPointer(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr SetAtomicPointer(Ref2D a, Ref v) => T.SetAtomicPointer(a, v);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint SetAtomicU32(AtomicU32* a, [NativeTypeName("Uint32")] uint v) =>
            T.SetAtomicU32(a, v);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint SetAtomicU32(Ref<AtomicU32> a, [NativeTypeName("Uint32")] uint v) =>
            T.SetAtomicU32(a, v);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioDeviceGain(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        ) => T.SetAudioDeviceGain(devid, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioDeviceGainRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        ) => T.SetAudioDeviceGainRaw(devid, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            void* userdata
        ) => T.SetAudioPostmixCallback(devid, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            Ref userdata
        ) => T.SetAudioPostmixCallback(devid, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => T.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        ) => T.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamFrequencyRatio(
            AudioStreamHandle stream,
            float ratio
        ) => T.SetAudioStreamFrequencyRatio(stream, ratio);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamFrequencyRatioRaw(AudioStreamHandle stream, float ratio) =>
            T.SetAudioStreamFrequencyRatioRaw(stream, ratio);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamGain(AudioStreamHandle stream, float gain) =>
            T.SetAudioStreamGain(stream, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamGainRaw(AudioStreamHandle stream, float gain) =>
            T.SetAudioStreamGainRaw(stream, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => T.SetAudioStreamGetCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        ) => T.SetAudioStreamGetCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        ) => T.SetAudioStreamInputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        ) => T.SetAudioStreamInputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        ) => T.SetAudioStreamOutputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        ) => T.SetAudioStreamOutputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => T.SetAudioStreamPutCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        ) => T.SetAudioStreamPutCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte value
        ) => T.SetBooleanProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> value
        ) => T.SetBooleanProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) => T.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) => T.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
            T.SetClipboardText(text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text) =>
            T.SetClipboardText(text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetCurrentThreadPriority(ThreadPriority priority) =>
            T.SetCurrentThreadPriority(priority);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetCurrentThreadPriorityRaw(ThreadPriority priority) =>
            T.SetCurrentThreadPriorityRaw(priority);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetCursor(CursorHandle cursor) => T.SetCursor(cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetCursorRaw(CursorHandle cursor) => T.SetCursorRaw(cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetErrorV(
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => T.SetErrorV(fmt, ap);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetErrorV(
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        ) => T.SetErrorV(fmt, ap);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] byte enabled
        ) => T.SetEventEnabled(type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => T.SetEventEnabled(type, enabled);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => T.SetEventFilter(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        ) => T.SetEventFilter(filter, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        ) => T.SetFloatProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        ) => T.SetFloatProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetGamepadEventsEnabled([NativeTypeName("bool")] byte enabled) =>
            T.SetGamepadEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetGamepadEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
            T.SetGamepadEventsEnabled(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetGamepadLED(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetGamepadLED(gamepad, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetGamepadLEDRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetGamepadLEDRaw(gamepad, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        ) => T.SetGamepadMapping(instance_id, mapping);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        ) => T.SetGamepadMapping(instance_id, mapping);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetGamepadPlayerIndex(GamepadHandle gamepad, int player_index) =>
            T.SetGamepadPlayerIndex(gamepad, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetGamepadPlayerIndexRaw(GamepadHandle gamepad, int player_index) =>
            T.SetGamepadPlayerIndexRaw(gamepad, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] byte enabled
        ) => T.SetGamepadSensorEnabled(gamepad, type, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => T.SetGamepadSensorEnabled(gamepad, type, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetHapticAutocenter(HapticHandle haptic, int autocenter) =>
            T.SetHapticAutocenter(haptic, autocenter);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetHapticAutocenterRaw(HapticHandle haptic, int autocenter) =>
            T.SetHapticAutocenterRaw(haptic, autocenter);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetHapticGain(HapticHandle haptic, int gain) =>
            T.SetHapticGain(haptic, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetHapticGainRaw(HapticHandle haptic, int gain) =>
            T.SetHapticGainRaw(haptic, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => T.SetHint(name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        ) => T.SetHint(name, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        ) => T.SetHintWithPriority(name, value, priority);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        ) => T.SetHintWithPriority(name, value, priority);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetInitialized(InitState* state, [NativeTypeName("bool")] byte initialized) =>
            T.SetInitialized(state, initialized);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetInitialized(
            Ref<InitState> state,
            [NativeTypeName("bool")] MaybeBool<byte> initialized
        ) => T.SetInitialized(state, initialized);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetJoystickEventsEnabled([NativeTypeName("bool")] byte enabled) =>
            T.SetJoystickEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetJoystickEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
            T.SetJoystickEventsEnabled(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickLED(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetJoystickLED(joystick, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickLEDRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetJoystickLEDRaw(joystick, red, green, blue);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickPlayerIndex(JoystickHandle joystick, int player_index) =>
            T.SetJoystickPlayerIndex(joystick, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickPlayerIndexRaw(JoystickHandle joystick, int player_index) =>
            T.SetJoystickPlayerIndexRaw(joystick, player_index);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickVirtualAxis(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => T.SetJoystickVirtualAxis(joystick, axis, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickVirtualAxisRaw(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => T.SetJoystickVirtualAxisRaw(joystick, axis, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickVirtualBall(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        ) => T.SetJoystickVirtualBall(joystick, ball, xrel, yrel);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickVirtualBallRaw(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        ) => T.SetJoystickVirtualBallRaw(joystick, ball, xrel, yrel);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] byte down
        ) => T.SetJoystickVirtualButton(joystick, button, down);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] MaybeBool<byte> down
        ) => T.SetJoystickVirtualButton(joystick, button, down);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickVirtualHat(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualHat(joystick, hat, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickVirtualHatRaw(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualHatRaw(joystick, hat, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] byte down,
            float x,
            float y,
            float pressure
        ) => T.SetJoystickVirtualTouchpad(joystick, touchpad, finger, down, x, y, pressure);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] MaybeBool<byte> down,
            float x,
            float y,
            float pressure
        ) => T.SetJoystickVirtualTouchpad(joystick, touchpad, finger, down, x, y, pressure);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            void* userdata
        ) => T.SetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            Ref userdata
        ) => T.SetLogOutputFunction(callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogPriorities(LogPriority priority) => T.SetLogPriorities(priority);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogPriority(int category, LogPriority priority) =>
            T.SetLogPriority(category, priority);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* prefix
        ) => T.SetLogPriorityPrefix(priority, prefix);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> prefix
        ) => T.SetLogPriorityPrefix(priority, prefix);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetModState([NativeTypeName("SDL_Keymod")] ushort modstate) =>
            T.SetModState(modstate);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        ) => T.SetNumberProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        ) => T.SetNumberProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        ) => T.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        ) => T.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        ) => T.SetPointerProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        ) => T.SetPointerProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            void* userdata
        ) => T.SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            Ref userdata
        ) => T.SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
            T.SetPrimarySelectionText(text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetPrimarySelectionText(
            [NativeTypeName("const char *")] Ref<sbyte> text
        ) => T.SetPrimarySelectionText(text);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderColorScale(RendererHandle renderer, float scale) =>
            T.SetRenderColorScale(renderer, scale);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderColorScaleRaw(RendererHandle renderer, float scale) =>
            T.SetRenderColorScaleRaw(renderer, scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetRenderDrawBlendMode(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderDrawBlendModeRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetRenderDrawBlendModeRaw(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.SetRenderDrawColor(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderDrawColorFloat(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        ) => T.SetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderDrawColorFloatRaw(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        ) => T.SetRenderDrawColorFloatRaw(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderDrawColorRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.SetRenderDrawColorRaw(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderLogicalPresentation(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        ) => T.SetRenderLogicalPresentation(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderLogicalPresentationRaw(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        ) => T.SetRenderLogicalPresentationRaw(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderScale(
            RendererHandle renderer,
            float scaleX,
            float scaleY
        ) => T.SetRenderScale(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderScaleRaw(RendererHandle renderer, float scaleX, float scaleY) =>
            T.SetRenderScaleRaw(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderTarget(RendererHandle renderer, Texture* texture) =>
            T.SetRenderTarget(renderer, texture);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderTarget(RendererHandle renderer, Ref<Texture> texture) =>
            T.SetRenderTarget(renderer, texture);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetRenderVSync(RendererHandle renderer, int vsync) =>
            T.SetRenderVSync(renderer, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetRenderVSyncRaw(RendererHandle renderer, int vsync) =>
            T.SetRenderVSyncRaw(renderer, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.SetScancodeName(scancode, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.SetScancodeName(scancode, name);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => T.SetStringProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        ) => T.SetStringProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
            T.SetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte alpha
        ) => T.SetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("bool")] byte enabled,
            [NativeTypeName("Uint32")] uint key
        ) => T.SetSurfaceColorKey(surface, enabled, key);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled,
            [NativeTypeName("Uint32")] uint key
        ) => T.SetSurfaceColorKey(surface, enabled, key);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetSurfaceColorMod(surface, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetSurfaceColorMod(surface, r, g, b);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
            T.SetSurfaceColorspace(surface, colorspace);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace) =>
            T.SetSurfaceColorspace(surface, colorspace);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfacePalette(Surface* surface, Palette* palette) =>
            T.SetSurfacePalette(surface, palette);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette) =>
            T.SetSurfacePalette(surface, palette);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetSurfaceRLE(Surface* surface, [NativeTypeName("bool")] byte enabled) =>
            T.SetSurfaceRLE(surface, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetSurfaceRLE(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => T.SetSurfaceRLE(surface, enabled);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int cursor
        ) => T.SetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            int cursor
        ) => T.SetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureAlphaMod(Texture* texture, [NativeTypeName("Uint8")] byte alpha) =>
            T.SetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        ) => T.SetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureAlphaModFloat(Texture* texture, float alpha) =>
            T.SetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureAlphaModFloat(Ref<Texture> texture, float alpha) =>
            T.SetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => T.SetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureColorModFloat(Texture* texture, float r, float g, float b) =>
            T.SetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureColorModFloat(
            Ref<Texture> texture,
            float r,
            float g,
            float b
        ) => T.SetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTextureScaleMode(Texture* texture, ScaleMode scaleMode) =>
            T.SetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTextureScaleMode(Ref<Texture> texture, ScaleMode scaleMode) =>
            T.SetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetTLS(
            [NativeTypeName("SDL_TLSID *")] AtomicInt* id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        ) => T.SetTLS(id, value, destructor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetTLS(
            [NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        ) => T.SetTLS(id, value, destructor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] byte on_top
        ) => T.SetWindowAlwaysOnTop(window, on_top);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> on_top
        ) => T.SetWindowAlwaysOnTop(window, on_top);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowAspectRatio(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        ) => T.SetWindowAspectRatio(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowAspectRatioRaw(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        ) => T.SetWindowAspectRatioRaw(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] byte bordered
        ) => T.SetWindowBordered(window, bordered);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> bordered
        ) => T.SetWindowBordered(window, bordered);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] byte focusable
        ) => T.SetWindowFocusable(window, focusable);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> focusable
        ) => T.SetWindowFocusable(window, focusable);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] byte fullscreen
        ) => T.SetWindowFullscreen(window, fullscreen);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> fullscreen
        ) => T.SetWindowFullscreen(window, fullscreen);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        ) => T.SetWindowFullscreenMode(window, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        ) => T.SetWindowFullscreenMode(window, mode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            void* callback_data
        ) => T.SetWindowHitTest(window, callback, callback_data);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            Ref callback_data
        ) => T.SetWindowHitTest(window, callback, callback_data);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowIcon(WindowHandle window, Surface* icon) =>
            T.SetWindowIcon(window, icon);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowIcon(WindowHandle window, Ref<Surface> icon) =>
            T.SetWindowIcon(window, icon);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        ) => T.SetWindowKeyboardGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => T.SetWindowKeyboardGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowMaximumSize(WindowHandle window, int max_w, int max_h) =>
            T.SetWindowMaximumSize(window, max_w, max_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowMaximumSizeRaw(WindowHandle window, int max_w, int max_h) =>
            T.SetWindowMaximumSizeRaw(window, max_w, max_h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowMinimumSize(WindowHandle window, int min_w, int min_h) =>
            T.SetWindowMinimumSize(window, min_w, min_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowMinimumSizeRaw(WindowHandle window, int min_w, int min_h) =>
            T.SetWindowMinimumSizeRaw(window, min_w, min_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowModal(WindowHandle window, [NativeTypeName("bool")] byte modal) =>
            T.SetWindowModal(window, modal);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowModal(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> modal
        ) => T.SetWindowModal(window, modal);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        ) => T.SetWindowMouseGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => T.SetWindowMouseGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetWindowMouseRect(window, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetWindowMouseRect(window, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowOpacity(WindowHandle window, float opacity) =>
            T.SetWindowOpacity(window, opacity);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowOpacityRaw(WindowHandle window, float opacity) =>
            T.SetWindowOpacityRaw(window, opacity);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowParent(WindowHandle window, WindowHandle parent) =>
            T.SetWindowParent(window, parent);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowParentRaw(WindowHandle window, WindowHandle parent) =>
            T.SetWindowParentRaw(window, parent);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowPosition(WindowHandle window, int x, int y) =>
            T.SetWindowPosition(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowPositionRaw(WindowHandle window, int x, int y) =>
            T.SetWindowPositionRaw(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] byte enabled
        ) => T.SetWindowRelativeMouseMode(window, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => T.SetWindowRelativeMouseMode(window, enabled);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] byte resizable
        ) => T.SetWindowResizable(window, resizable);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> resizable
        ) => T.SetWindowResizable(window, resizable);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowShape(WindowHandle window, Surface* shape) =>
            T.SetWindowShape(window, shape);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowShape(WindowHandle window, Ref<Surface> shape) =>
            T.SetWindowShape(window, shape);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowSize(WindowHandle window, int w, int h) =>
            T.SetWindowSize(window, w, h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowSizeRaw(WindowHandle window, int w, int h) =>
            T.SetWindowSizeRaw(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowSurfaceVSync(WindowHandle window, int vsync) =>
            T.SetWindowSurfaceVSync(window, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowSurfaceVSyncRaw(WindowHandle window, int vsync) =>
            T.SetWindowSurfaceVSyncRaw(window, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* title
        ) => T.SetWindowTitle(window, title);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        ) => T.SetWindowTitle(window, title);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShouldInit(InitState* state) => T.ShouldInit(state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShouldInit(Ref<InitState> state) => T.ShouldInit(state);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShouldQuit(InitState* state) => T.ShouldQuit(state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShouldQuit(Ref<InitState> state) => T.ShouldQuit(state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShowCursor() => T.ShowCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShowCursorRaw() => T.ShowCursorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        ) => T.ShowMessageBox(messageboxdata, buttonid);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        ) => T.ShowMessageBox(messageboxdata, buttonid);

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        ) =>
            T.ShowOpenFileDialog(
                callback,
                userdata,
                window,
                filters,
                nfilters,
                default_location,
                allow_many
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        ) =>
            T.ShowOpenFileDialog(
                callback,
                userdata,
                window,
                filters,
                nfilters,
                default_location,
                allow_many
            );

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        ) => T.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        ) => T.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location
        ) => T.ShowSaveFileDialog(callback, userdata, window, filters, nfilters, default_location);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        ) => T.ShowSaveFileDialog(callback, userdata, window, filters, nfilters, default_location);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            WindowHandle window
        ) => T.ShowSimpleMessageBox(flags, title, message, window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            WindowHandle window
        ) => T.ShowSimpleMessageBox(flags, title, message, window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShowWindow(WindowHandle window) => T.ShowWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShowWindowRaw(WindowHandle window) => T.ShowWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> ShowWindowSystemMenu(WindowHandle window, int x, int y) =>
            T.ShowWindowSystemMenu(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte ShowWindowSystemMenuRaw(WindowHandle window, int x, int y) =>
            T.ShowWindowSystemMenuRaw(window, x, y);

        [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SignalCondition(ConditionHandle cond) => T.SignalCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "SDL_SignalSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SignalSemaphore(SemaphoreHandle sem) => T.SignalSemaphore(sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StartTextInput(WindowHandle window) => T.StartTextInput(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StartTextInputRaw(WindowHandle window) => T.StartTextInputRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StartTextInputWithProperties(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.StartTextInputWithProperties(window, props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StartTextInputWithPropertiesRaw(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.StartTextInputWithPropertiesRaw(window, props);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StopHapticEffect(HapticHandle haptic, int effect) =>
            T.StopHapticEffect(haptic, effect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StopHapticEffectRaw(HapticHandle haptic, int effect) =>
            T.StopHapticEffectRaw(haptic, effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StopHapticEffects(HapticHandle haptic) =>
            T.StopHapticEffects(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StopHapticEffectsRaw(HapticHandle haptic) => T.StopHapticEffectsRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StopHapticRumble(HapticHandle haptic) => T.StopHapticRumble(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StopHapticRumbleRaw(HapticHandle haptic) => T.StopHapticRumbleRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StopTextInput(WindowHandle window) => T.StopTextInput(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StopTextInputRaw(WindowHandle window) => T.StopTextInputRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> StorageReady(StorageHandle storage) => T.StorageReady(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte StorageReadyRaw(StorageHandle storage) => T.StorageReadyRaw(storage);

        [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid StringToGuid([NativeTypeName("const char *")] sbyte* pchGUID) =>
            T.StringToGuid(pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid StringToGuid([NativeTypeName("const char *")] Ref<sbyte> pchGUID) =>
            T.StringToGuid(pchGUID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SurfaceHasAlternateImages(Surface* surface) =>
            T.SurfaceHasAlternateImages(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SurfaceHasAlternateImages(Ref<Surface> surface) =>
            T.SurfaceHasAlternateImages(surface);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SurfaceHasColorKey(Surface* surface) => T.SurfaceHasColorKey(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SurfaceHasColorKey(Ref<Surface> surface) =>
            T.SurfaceHasColorKey(surface);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SurfaceHasRLE(Surface* surface) => T.SurfaceHasRLE(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SurfaceHasRLE(Ref<Surface> surface) => T.SurfaceHasRLE(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> SyncWindow(WindowHandle window) => T.SyncWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte SyncWindowRaw(WindowHandle window) => T.SyncWindowRaw(window);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long TellIO(IOStreamHandle context) => T.TellIO(context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TextInputActive(WindowHandle window) => T.TextInputActive(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TextInputActiveRaw(WindowHandle window) => T.TextInputActiveRaw(window);

        [return: NativeTypeName("SDL_Time")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeFromWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        ) => T.TimeFromWindows(dwLowDateTime, dwHighDateTime);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("bool")] byte localTime
        ) => T.TimeToDateTime(ticks, dt, localTime);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("bool")] MaybeBool<byte> localTime
        ) => T.TimeToDateTime(ticks, dt, localTime);

        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        ) => T.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        ) => T.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TryLockMutex(MutexHandle mutex) => T.TryLockMutex(mutex);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TryLockMutexRaw(MutexHandle mutex) => T.TryLockMutexRaw(mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TryLockRWLockForReading(RWLockHandle rwlock) =>
            T.TryLockRWLockForReading(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TryLockRWLockForReadingRaw(RWLockHandle rwlock) =>
            T.TryLockRWLockForReadingRaw(rwlock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TryLockRWLockForWriting(RWLockHandle rwlock) =>
            T.TryLockRWLockForWriting(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TryLockRWLockForWritingRaw(RWLockHandle rwlock) =>
            T.TryLockRWLockForWritingRaw(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.TryLockSpinlock(@lock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.TryLockSpinlock(@lock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> TryWaitSemaphore(SemaphoreHandle sem) => T.TryWaitSemaphore(sem);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte TryWaitSemaphoreRaw(SemaphoreHandle sem) => T.TryWaitSemaphoreRaw(sem);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStream(AudioStreamHandle stream) => T.UnbindAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStreams(AudioStreamHandle* streams, int num_streams) =>
            T.UnbindAudioStreams(streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStreams(Ref<AudioStreamHandle> streams, int num_streams) =>
            T.UnbindAudioStreams(streams, num_streams);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnloadObject(SharedObjectHandle handle) => T.UnloadObject(handle);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UnlockAudioStream(AudioStreamHandle stream) =>
            T.UnlockAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UnlockAudioStreamRaw(AudioStreamHandle stream) =>
            T.UnlockAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockJoysticks() => T.UnlockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockMutex(MutexHandle mutex) => T.UnlockMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.UnlockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockRWLock(RWLockHandle rwlock) => T.UnlockRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.UnlockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.UnlockSpinlock(@lock);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSurface(Surface* surface) => T.UnlockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSurface(Ref<Surface> surface) => T.UnlockSurface(surface);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockTexture(Texture* texture) => T.UnlockTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockTexture(Ref<Texture> texture) => T.UnlockTexture(texture);

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateGamepads() => T.UpdateGamepads();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        ) => T.UpdateHapticEffect(haptic, effect, data);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        ) => T.UpdateHapticEffect(haptic, effect, data);

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateJoysticks() => T.UpdateJoysticks();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateNVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        ) => T.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateNVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        ) => T.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateSensors() => T.UpdateSensors();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        ) => T.UpdateTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        ) => T.UpdateTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateWindowSurface(WindowHandle window) =>
            T.UpdateWindowSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateWindowSurfaceRaw(WindowHandle window) => T.UpdateWindowSurfaceRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        ) => T.UpdateWindowSurfaceRects(window, rects, numrects);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        ) => T.UpdateWindowSurfaceRects(window, rects, numrects);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte UpdateYUVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        ) => T.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> UpdateYUVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        ) => T.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitCondition(ConditionHandle cond, MutexHandle mutex) =>
            T.WaitCondition(cond, mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WaitConditionTimeout(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitConditionTimeout(cond, mutex, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WaitConditionTimeoutRaw(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitConditionTimeoutRaw(cond, mutex, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WaitEvent(Event* @event) => T.WaitEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WaitEvent(Ref<Event> @event) => T.WaitEvent(@event);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
            T.WaitEventTimeout(@event, timeoutMS);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitEventTimeout(@event, timeoutMS);

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitSemaphore(SemaphoreHandle sem) => T.WaitSemaphore(sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WaitSemaphoreTimeout(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitSemaphoreTimeout(sem, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WaitSemaphoreTimeoutRaw(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitSemaphoreTimeoutRaw(sem, timeoutMS);

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitThread(ThreadHandle thread, int* status) => T.WaitThread(thread, status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitThread(ThreadHandle thread, Ref<int> status) =>
            T.WaitThread(thread, status);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WarpMouseGlobal(float x, float y) => T.WarpMouseGlobal(x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WarpMouseGlobalRaw(float x, float y) => T.WarpMouseGlobalRaw(x, y);

        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WarpMouseInWindow(WindowHandle window, float x, float y) =>
            T.WarpMouseInWindow(window, x, y);

        [return: NativeTypeName("SDL_InitFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WasInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint WasInit([NativeTypeName("SDL_InitFlags")] uint flags) => T.WasInit(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WindowHasSurface(WindowHandle window) => T.WindowHasSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WindowHasSurfaceRaw(WindowHandle window) => T.WindowHasSurfaceRaw(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.WriteIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.WriteIO(context, ptr, size);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS16BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => T.WriteS16BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS16BERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
            T.WriteS16BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS16LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => T.WriteS16LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS16LERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
            T.WriteS16LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS32BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => T.WriteS32BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS32BERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
            T.WriteS32BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS32LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => T.WriteS32LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS32LERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
            T.WriteS32LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS64BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => T.WriteS64BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS64BERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
            T.WriteS64BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS64LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => T.WriteS64LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS64LERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
            T.WriteS64LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteS8(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
            T.WriteS8(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteS8Raw(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
            T.WriteS8Raw(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        ) => T.WriteStorageFile(storage, path, source, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        ) => T.WriteStorageFile(storage, path, source, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.WriteSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.WriteSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        ) => T.WriteSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        ) => T.WriteSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU16BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => T.WriteU16BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU16BERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
            T.WriteU16BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU16LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => T.WriteU16LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU16LERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
            T.WriteU16LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU32BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => T.WriteU32BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU32BERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
            T.WriteU32BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU32LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => T.WriteU32LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU32LERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
            T.WriteU32LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU64BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => T.WriteU64BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU64BERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
            T.WriteU64BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU64LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => T.WriteU64LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU64LERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
            T.WriteU64LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<byte> WriteU8(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
            T.WriteU8(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte WriteU8Raw(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
            T.WriteU8Raw(dst, value);
    }

    public partial class ThisThread
    {
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        ) => Underlying.Value!.AcquireCameraFrame(camera, timestampNS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> AcquireCameraFrame(
            CameraHandle camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        )
        {
            fixed (ulong* __dsl_timestampNS = timestampNS)
            {
                return (Surface*)AcquireCameraFrame(camera, __dsl_timestampNS);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddAtomicInt(AtomicInt* a, int v) => Underlying.Value!.AddAtomicInt(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddAtomicInt(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AddAtomicInt(__dsl_a, v);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => Underlying.Value!.AddEventWatch(filter, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)(byte)AddEventWatch(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
            Underlying.Value!.AddGamepadMapping(mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)AddGamepadMapping(__dsl_mapping);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] sbyte* file
        ) => Underlying.Value!.AddGamepadMappingsFromFile(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (int)AddGamepadMappingsFromFile(__dsl_file);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio
        ) => Underlying.Value!.AddGamepadMappingsFromIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => Underlying.Value!.AddGamepadMappingsFromIO(src, closeio);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        ) => Underlying.Value!.AddHintCallback(name, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)AddHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte AddSurfaceAlternateImage(Surface* surface, Surface* image) =>
            Underlying.Value!.AddSurfaceAlternateImage(surface, image);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddSurfaceAlternateImage(
            Ref<Surface> surface,
            Ref<Surface> image
        )
        {
            fixed (Surface* __dsl_image = image)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)AddSurfaceAlternateImage(__dsl_surface, __dsl_image);
            }
        }

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            void* userdata
        ) => Underlying.Value!.AddTimer(interval, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (uint)AddTimer(interval, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            void* userdata
        ) => Underlying.Value!.AddTimerNS(interval, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimerNS(
            [NativeTypeName("Uint64")] ulong interval,
            [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (uint)AddTimerNS(interval, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AddVulkanRenderSemaphores(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            Underlying.Value!.AddVulkanRenderSemaphores(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte AddVulkanRenderSemaphoresRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            Underlying.Value!.AddVulkanRenderSemaphoresRaw(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        ) => Underlying.Value!.AttachVirtualJoystick(desc);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystick(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        )
        {
            fixed (VirtualJoystickDesc* __dsl_desc = desc)
            {
                return (uint)AttachVirtualJoystick(__dsl_desc);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> AudioDevicePaused(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => Underlying.Value!.AudioDevicePaused(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.AudioDevicePausedRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        ) => Underlying.Value!.BindAudioStream(devid, stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BindAudioStreamRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle stream
        ) => Underlying.Value!.BindAudioStreamRaw(devid, stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioStreamHandle* streams,
            int num_streams
        ) => Underlying.Value!.BindAudioStreams(devid, streams, num_streams);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioStreamHandle> streams,
            int num_streams
        )
        {
            fixed (AudioStreamHandle* __dsl_streams = streams)
            {
                return (MaybeBool<byte>)(byte)BindAudioStreams(devid, __dsl_streams, num_streams);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => Underlying.Value!.BlitSurface(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurface9Grid(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) =>
            Underlying.Value!.BlitSurface9Grid(
                src,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                scaleMode,
                dst,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurface9Grid(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            int left_width,
            int right_width,
            int top_height,
            int bottom_height,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurface9Grid(
                        __dsl_src,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => Underlying.Value!.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurfaceTiled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => Underlying.Value!.BlitSurfaceTiled(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceTiled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceTiled(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurfaceTiledWithScale(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            float scale,
            ScaleMode scaleMode,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) =>
            Underlying.Value!.BlitSurfaceTiledWithScale(
                src,
                srcrect,
                scale,
                scaleMode,
                dst,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceTiledWithScale(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            float scale,
            ScaleMode scaleMode,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceTiledWithScale(
                        __dsl_src,
                        __dsl_srcrect,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => Underlying.Value!.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceUnchecked(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => Underlying.Value!.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)BlitSurfaceUncheckedScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void BroadcastCondition(ConditionHandle cond) =>
            Underlying.Value!.BroadcastCondition(cond);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CaptureMouse([NativeTypeName("bool")] byte enabled) =>
            Underlying.Value!.CaptureMouse(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CaptureMouse(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.CaptureMouse(enabled);

        [NativeFunction("SDL3", EntryPoint = "SDL_CleanupTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CleanupTLS() => Underlying.Value!.CleanupTLS();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.ClearAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearAudioStreamRaw(AudioStreamHandle stream) =>
            Underlying.Value!.ClearAudioStreamRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearClipboardData() =>
            Underlying.Value!.ClearClipboardData();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearClipboardDataRaw() => Underlying.Value!.ClearClipboardDataRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearComposition(WindowHandle window) =>
            Underlying.Value!.ClearComposition(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearCompositionRaw(WindowHandle window) =>
            Underlying.Value!.ClearCompositionRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearError() => Underlying.Value!.ClearError();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearErrorRaw() => Underlying.Value!.ClearErrorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.ClearProperty(props, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)ClearProperty(props, __dsl_name);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ClearSurface(Surface* surface, float r, float g, float b, float a) =>
            Underlying.Value!.ClearSurface(surface, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ClearSurface(
            Ref<Surface> surface,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)ClearSurface(__dsl_surface, r, g, b, a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            Underlying.Value!.CloseAudioDevice(devid);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseCamera(CameraHandle camera) =>
            Underlying.Value!.CloseCamera(camera);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseGamepad(GamepadHandle gamepad) =>
            Underlying.Value!.CloseGamepad(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseHaptic(HapticHandle haptic) =>
            Underlying.Value!.CloseHaptic(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CloseIO(IOStreamHandle context) =>
            Underlying.Value!.CloseIO(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CloseIORaw(IOStreamHandle context) =>
            Underlying.Value!.CloseIORaw(context);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseJoystick(JoystickHandle joystick) =>
            Underlying.Value!.CloseJoystick(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseSensor(SensorHandle sensor) =>
            Underlying.Value!.CloseSensor(sensor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CloseStorage(StorageHandle storage) =>
            Underlying.Value!.CloseStorage(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CloseStorageRaw(StorageHandle storage) =>
            Underlying.Value!.CloseStorageRaw(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CompareAndSwapAtomicInt(AtomicInt* a, int oldval, int newval) =>
            Underlying.Value!.CompareAndSwapAtomicInt(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicInt(
            Ref<AtomicInt> a,
            int oldval,
            int newval
        )
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (MaybeBool<byte>)(byte)CompareAndSwapAtomicInt(__dsl_a, oldval, newval);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval) =>
            Underlying.Value!.CompareAndSwapAtomicPointer(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicPointer(Ref2D a, Ref oldval, Ref newval)
        {
            fixed (void* __dsl_newval = newval)
            fixed (void* __dsl_oldval = oldval)
            fixed (void** __dsl_a = a)
            {
                return (MaybeBool<byte>)
                    (byte)CompareAndSwapAtomicPointer(__dsl_a, __dsl_oldval, __dsl_newval);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CompareAndSwapAtomicU32(
            AtomicU32* a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        ) => Underlying.Value!.CompareAndSwapAtomicU32(a, oldval, newval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CompareAndSwapAtomicU32(
            Ref<AtomicU32> a,
            [NativeTypeName("Uint32")] uint oldval,
            [NativeTypeName("Uint32")] uint newval
        )
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (MaybeBool<byte>)(byte)CompareAndSwapAtomicU32(__dsl_a, oldval, newval);
            }
        }

        [return: NativeTypeName("SDL_BlendMode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ComposeCustomBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        ) =>
            Underlying.Value!.ComposeCustomBlendMode(
                srcColorFactor,
                dstColorFactor,
                colorOperation,
                srcAlphaFactor,
                dstAlphaFactor,
                alphaOperation
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        ) =>
            Underlying.Value!.ConvertAudioSamples(
                src_spec,
                src_data,
                src_len,
                dst_spec,
                dst_data,
                dst_len
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        )
        {
            fixed (int* __dsl_dst_len = dst_len)
            fixed (byte** __dsl_dst_data = dst_data)
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (byte* __dsl_src_data = src_data)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertAudioSamples(
                        __dsl_src_spec,
                        __dsl_src_data,
                        src_len,
                        __dsl_dst_spec,
                        __dsl_dst_data,
                        __dsl_dst_len
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ConvertEventToRenderCoordinates(
            RendererHandle renderer,
            Event* @event
        ) => Underlying.Value!.ConvertEventToRenderCoordinates(renderer, @event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertEventToRenderCoordinates(
            RendererHandle renderer,
            Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertEventToRenderCoordinates(renderer, __dsl_event);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch
        ) =>
            Underlying.Value!.ConvertPixels(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertPixels(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertPixels(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        ) =>
            Underlying.Value!.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormat src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)ConvertPixelsAndColorspace(
                        width,
                        height,
                        src_format,
                        src_colorspace,
                        src_properties,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        dst_colorspace,
                        dst_properties,
                        __dsl_dst,
                        dst_pitch
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ConvertSurface(Surface* surface, PixelFormat format) =>
            Underlying.Value!.ConvertSurface(surface, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurface(Ref<Surface> surface, PixelFormat format)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurface(__dsl_surface, format);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ConvertSurfaceAndColorspace(
            Surface* surface,
            PixelFormat format,
            Palette* palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) =>
            Underlying.Value!.ConvertSurfaceAndColorspace(
                surface,
                format,
                palette,
                colorspace,
                props
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceAndColorspace(
            Ref<Surface> surface,
            PixelFormat format,
            Ref<Palette> palette,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceAndColorspace(
                    __dsl_surface,
                    format,
                    __dsl_palette,
                    colorspace,
                    props
                );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CopyFile(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.CopyFile(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CopyFile(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)(byte)CopyFile(__dsl_oldpath, __dsl_newpath);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => Underlying.Value!.CopyProperties(src, dst);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CopyPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => Underlying.Value!.CopyPropertiesRaw(src, dst);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.CopyStorageFile(storage, oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CopyStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)
                    (byte)CopyStorageFile(storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => Underlying.Value!.CreateAudioStream(src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (AudioStreamHandle)CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
            Underlying.Value!.CreateColorCursor(surface, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (CursorHandle)CreateColorCursor(__dsl_surface, hot_x, hot_y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ConditionHandle CreateCondition() => Underlying.Value!.CreateCondition();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => Underlying.Value!.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        )
        {
            fixed (byte* __dsl_mask = mask)
            fixed (byte* __dsl_data = data)
            {
                return (CursorHandle)CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.CreateDirectory(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)CreateDirectory(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => Underlying.Value!.CreateHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            {
                return (int)CreateHapticEffect(haptic, __dsl_effect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MutexHandle CreateMutex() => Underlying.Value!.CreateMutex();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreatePalette(int ncolors) =>
            Underlying.Value!.CreatePalette(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Palette* CreatePaletteRaw(int ncolors) =>
            Underlying.Value!.CreatePaletteRaw(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle CreatePopupWindow(
            WindowHandle parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        ) => Underlying.Value!.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint CreateProperties() => Underlying.Value!.CreateProperties();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.CreateRenderer(window, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateRenderer(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (RendererHandle)CreateRenderer(window, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateRendererWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RWLockHandle CreateRWLock() => Underlying.Value!.CreateRWLock();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SemaphoreHandle CreateSemaphore(
            [NativeTypeName("Uint32")] uint initial_value
        ) => Underlying.Value!.CreateSemaphore(initial_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateSoftwareRenderer(Surface* surface) =>
            Underlying.Value!.CreateSoftwareRenderer(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle CreateSoftwareRenderer(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (RendererHandle)CreateSoftwareRenderer(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => Underlying.Value!.CreateStorageDirectory(storage, path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)CreateStorageDirectory(storage, __dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurface(int width, int height, PixelFormat format) =>
            Underlying.Value!.CreateSurface(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            void* pixels,
            int pitch
        ) => Underlying.Value!.CreateSurfaceFrom(width, height, format, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurfaceFrom(
            int width,
            int height,
            PixelFormat format,
            Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            {
                return (Surface*)CreateSurfaceFrom(width, height, format, __dsl_pixels, pitch);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Palette* CreateSurfacePalette(Surface* surface) =>
            Underlying.Value!.CreateSurfacePalette(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreateSurfacePalette(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Palette*)CreateSurfacePalette(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* CreateSurfaceRaw(int width, int height, PixelFormat format) =>
            Underlying.Value!.CreateSurfaceRaw(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle CreateSystemCursor(SystemCursor id) =>
            Underlying.Value!.CreateSystemCursor(id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTexture(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        ) => Underlying.Value!.CreateTexture(renderer, format, access, w, h);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Texture* CreateTextureFromSurface(
            RendererHandle renderer,
            Surface* surface
        ) => Underlying.Value!.CreateTextureFromSurface(renderer, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTextureFromSurface(
            RendererHandle renderer,
            Ref<Surface> surface
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Texture*)CreateTextureFromSurface(renderer, __dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Texture* CreateTextureRaw(
            RendererHandle renderer,
            PixelFormat format,
            TextureAccess access,
            int w,
            int h
        ) => Underlying.Value!.CreateTextureRaw(renderer, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> CreateTextureWithProperties(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateTextureWithProperties(renderer, props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Texture* CreateTextureWithPropertiesRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateTextureWithPropertiesRaw(renderer, props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        ) => Underlying.Value!.CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ThreadHandle CreateThreadRuntime(
            [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (ThreadHandle)CreateThreadRuntime(
                    fn,
                    __dsl_name,
                    __dsl_data,
                    pfnBeginThread,
                    pfnEndThread
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithPropertiesRuntime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ThreadHandle CreateThreadWithPropertiesRuntime(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
            [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
        ) =>
            Underlying.Value!.CreateThreadWithPropertiesRuntime(
                props,
                pfnBeginThread,
                pfnEndThread
            );

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        ) => Underlying.Value!.CreateWindow(title, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] ulong flags
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (WindowHandle)CreateWindow(__dsl_title, w, h, flags);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            WindowHandle* window,
            RendererHandle* renderer
        ) =>
            Underlying.Value!.CreateWindowAndRenderer(
                title,
                width,
                height,
                window_flags,
                window,
                renderer
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
            Ref<WindowHandle> window,
            Ref<RendererHandle> renderer
        )
        {
            fixed (RendererHandle* __dsl_renderer = renderer)
            fixed (WindowHandle* __dsl_window = window)
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)
                    (byte)CreateWindowAndRenderer(
                        __dsl_title,
                        width,
                        height,
                        window_flags,
                        __dsl_window,
                        __dsl_renderer
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateWindowWithProperties(props);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> CursorVisible() => Underlying.Value!.CursorVisible();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte CursorVisibleRaw() => Underlying.Value!.CursorVisibleRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        ) => Underlying.Value!.DateTimeToTime(dt, ticks);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        )
        {
            fixed (long* __dsl_ticks = ticks)
            fixed (DateTime* __dsl_dt = dt)
            {
                return (MaybeBool<byte>)(byte)DateTimeToTime(__dsl_dt, __dsl_ticks);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_Delay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void Delay([NativeTypeName("Uint32")] uint ms) => Underlying.Value!.Delay(ms);

        [NativeFunction("SDL3", EntryPoint = "SDL_DelayNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelayNS([NativeTypeName("Uint64")] ulong ns) =>
            Underlying.Value!.DelayNS(ns);

        [NativeFunction("SDL3", EntryPoint = "SDL_DelayPrecise")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelayPrecise([NativeTypeName("Uint64")] ulong ns) =>
            Underlying.Value!.DelayPrecise(ns);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.DestroyAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCondition(ConditionHandle cond) =>
            Underlying.Value!.DestroyCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCursor(CursorHandle cursor) =>
            Underlying.Value!.DestroyCursor(cursor);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyHapticEffect(HapticHandle haptic, int effect) =>
            Underlying.Value!.DestroyHapticEffect(haptic, effect);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMutex(MutexHandle mutex) => Underlying.Value!.DestroyMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Palette* palette) =>
            Underlying.Value!.DestroyPalette(palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            {
                DestroyPalette(__dsl_palette);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.DestroyProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderer(RendererHandle renderer) =>
            Underlying.Value!.DestroyRenderer(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRWLock(RWLockHandle rwlock) =>
            Underlying.Value!.DestroyRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(SemaphoreHandle sem) =>
            Underlying.Value!.DestroySemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Surface* surface) =>
            Underlying.Value!.DestroySurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                DestroySurface(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(Texture* texture) =>
            Underlying.Value!.DestroyTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                DestroyTexture(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyWindow(WindowHandle window) =>
            Underlying.Value!.DestroyWindow(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> DestroyWindowSurface(WindowHandle window) =>
            Underlying.Value!.DestroyWindowSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte DestroyWindowSurfaceRaw(WindowHandle window) =>
            Underlying.Value!.DestroyWindowSurfaceRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DetachThread(ThreadHandle thread) =>
            Underlying.Value!.DetachThread(thread);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> DetachVirtualJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.DetachVirtualJoystick(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte DetachVirtualJoystickRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.DetachVirtualJoystickRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> DisableScreenSaver() =>
            Underlying.Value!.DisableScreenSaver();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte DisableScreenSaverRaw() => Underlying.Value!.DisableScreenSaverRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* DuplicateSurface(Surface* surface) =>
            Underlying.Value!.DuplicateSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)DuplicateSurface(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentConfig() => Underlying.Value!.EGLGetCurrentConfig();

        [return: NativeTypeName("SDL_EGLConfig")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetCurrentConfigRaw() => Underlying.Value!.EGLGetCurrentConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentDisplay() => Underlying.Value!.EGLGetCurrentDisplay();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetCurrentDisplayRaw() =>
            Underlying.Value!.EGLGetCurrentDisplayRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer EGLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => Underlying.Value!.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (FunctionPointer)EGLGetProcAddress(__dsl_proc);
            }
        }

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetWindowSurface(WindowHandle window) =>
            Underlying.Value!.EGLGetWindowSurface(window);

        [return: NativeTypeName("SDL_EGLSurface")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetWindowSurfaceRaw(WindowHandle window) =>
            Underlying.Value!.EGLGetWindowSurfaceRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            void* userdata
        ) =>
            Underlying.Value!.EGLSetAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback,
                userdata
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void EGLSetAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                EGLAttribArrayCallback platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                EGLSetAttributeCallbacks(
                    platformAttribCallback,
                    surfaceAttribCallback,
                    contextAttribCallback,
                    __dsl_userdata
                );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnableScreenSaver() => Underlying.Value!.EnableScreenSaver();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte EnableScreenSaverRaw() => Underlying.Value!.EnableScreenSaverRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        ) => Underlying.Value!.EnumerateDirectory(path, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            void* userdata
        ) => Underlying.Value!.EnumerateProperties(props, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                EnumeratePropertiesCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)(byte)EnumerateProperties(props, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            void* userdata
        ) => Underlying.Value!.EnumerateStorageDirectory(storage, path, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EnumerateStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)EnumerateStorageDirectory(storage, __dsl_path, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.EventEnabled(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.EventEnabledRaw(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        ) => Underlying.Value!.FillSurfaceRect(dst, rect, color);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)(byte)FillSurfaceRect(__dsl_dst, __dsl_rect, color);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => Underlying.Value!.FillSurfaceRects(dst, rects, count, color);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (Surface* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)
                    (byte)FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => Underlying.Value!.FilterEvents(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                FilterEvents(filter, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlashWindow(WindowHandle window, FlashOperation operation) =>
            Underlying.Value!.FlashWindow(window, operation);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FlashWindowRaw(WindowHandle window, FlashOperation operation) =>
            Underlying.Value!.FlashWindowRaw(window, operation);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FlipSurface(Surface* surface, FlipMode flip) =>
            Underlying.Value!.FlipSurface(surface, flip);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlipSurface(Ref<Surface> surface, FlipMode flip)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)FlipSurface(__dsl_surface, flip);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlushAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.FlushAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FlushAudioStreamRaw(AudioStreamHandle stream) =>
            Underlying.Value!.FlushAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FlushEvent([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.FlushEvent(type);

        [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.FlushEvents(minType, maxType);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlushIO(IOStreamHandle context) =>
            Underlying.Value!.FlushIO(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FlushIORaw(IOStreamHandle context) =>
            Underlying.Value!.FlushIORaw(context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> FlushRenderer(RendererHandle renderer) =>
            Underlying.Value!.FlushRenderer(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte FlushRendererRaw(RendererHandle renderer) =>
            Underlying.Value!.FlushRendererRaw(renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadConnected(GamepadHandle gamepad) =>
            Underlying.Value!.GamepadConnected(gamepad);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadConnectedRaw(GamepadHandle gamepad) =>
            Underlying.Value!.GamepadConnectedRaw(gamepad);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadEventsEnabled() =>
            Underlying.Value!.GamepadEventsEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadEventsEnabledRaw() => Underlying.Value!.GamepadEventsEnabledRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadHasAxis(GamepadHandle gamepad, GamepadAxis axis) =>
            Underlying.Value!.GamepadHasAxis(gamepad, axis);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadHasAxisRaw(GamepadHandle gamepad, GamepadAxis axis) =>
            Underlying.Value!.GamepadHasAxisRaw(gamepad, axis);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadHasButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => Underlying.Value!.GamepadHasButton(gamepad, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadHasButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
            Underlying.Value!.GamepadHasButtonRaw(gamepad, button);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadHasSensor(GamepadHandle gamepad, SensorType type) =>
            Underlying.Value!.GamepadHasSensor(gamepad, type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadHasSensorRaw(GamepadHandle gamepad, SensorType type) =>
            Underlying.Value!.GamepadHasSensorRaw(gamepad, type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type
        ) => Underlying.Value!.GamepadSensorEnabled(gamepad, type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GamepadSensorEnabledRaw(GamepadHandle gamepad, SensorType type) =>
            Underlying.Value!.GamepadSensorEnabledRaw(gamepad, type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAppMetadataProperty([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetAppMetadataProperty(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetAppMetadataProperty(__dsl_name);
            }
        }

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertionHandler GetAssertionHandler(void** puserdata) =>
            Underlying.Value!.GetAssertionHandler(puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertionHandler GetAssertionHandler(Ref2D puserdata)
        {
            fixed (void** __dsl_puserdata = puserdata)
            {
                return (AssertionHandler)GetAssertionHandler(__dsl_puserdata);
            }
        }

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<AssertData> GetAssertionReport() =>
            Underlying.Value!.GetAssertionReport();

        [return: NativeTypeName("const SDL_AssertData *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertData* GetAssertionReportRaw() =>
            Underlying.Value!.GetAssertionReportRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAtomicInt(AtomicInt* a) => Underlying.Value!.GetAtomicInt(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAtomicInt(Ref<AtomicInt> a)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)GetAtomicInt(__dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetAtomicPointer(void** a) => Underlying.Value!.GetAtomicPointer(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetAtomicPointer(Ref2D a)
        {
            fixed (void** __dsl_a = a)
            {
                return (void*)GetAtomicPointer(__dsl_a);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAtomicU32(AtomicU32* a) => Underlying.Value!.GetAtomicU32(a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAtomicU32(Ref<AtomicU32> a)
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (uint)GetAtomicU32(__dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int* GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            int* count
        ) => Underlying.Value!.GetAudioDeviceChannelMap(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioDeviceChannelMap(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioDeviceChannelMap(devid, __dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        ) => Underlying.Value!.GetAudioDeviceFormat(devid, spec, sample_frames);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        )
        {
            fixed (int* __dsl_sample_frames = sample_frames)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)
                    (byte)GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioDeviceGain([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            Underlying.Value!.GetAudioDeviceGain(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDeviceName(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => Underlying.Value!.GetAudioDeviceName(devid);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAudioDeviceNameRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => Underlying.Value!.GetAudioDeviceNameRaw(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDriver(int index) =>
            Underlying.Value!.GetAudioDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAudioDriverRaw(int index) =>
            Underlying.Value!.GetAudioDriverRaw(index);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioFormatName(AudioFormat format) =>
            Underlying.Value!.GetAudioFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAudioFormatNameRaw(AudioFormat format) =>
            Underlying.Value!.GetAudioFormatNameRaw(format);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetAudioPlaybackDevices(int* count) =>
            Underlying.Value!.GetAudioPlaybackDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioPlaybackDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioPlaybackDevices(__dsl_count);
            }
        }

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetAudioRecordingDevices(int* count) =>
            Underlying.Value!.GetAudioRecordingDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioRecordingDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioRecordingDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamAvailable(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamAvailable(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(AudioStreamHandle stream, void* buf, int len) =>
            Underlying.Value!.GetAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(AudioStreamHandle stream, Ref buf, int len)
        {
            fixed (void* __dsl_buf = buf)
            {
                return (int)GetAudioStreamData(stream, __dsl_buf, len);
            }
        }

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamDevice(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetAudioStreamFormat(
            AudioStreamHandle stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        ) => Underlying.Value!.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetAudioStreamFormat(
            AudioStreamHandle stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)GetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioStreamFrequencyRatio(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamFrequencyRatio(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioStreamGain(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamGain(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int* GetAudioStreamInputChannelMap(AudioStreamHandle stream, int* count) =>
            Underlying.Value!.GetAudioStreamInputChannelMap(stream, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioStreamInputChannelMap(stream, __dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int* GetAudioStreamOutputChannelMap(AudioStreamHandle stream, int* count) =>
            Underlying.Value!.GetAudioStreamOutputChannelMap(stream, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<int> GetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (int*)GetAudioStreamOutputChannelMap(stream, __dsl_count);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamProperties(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamProperties(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamQueued(AudioStreamHandle stream) =>
            Underlying.Value!.GetAudioStreamQueued(stream);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetBasePath() => Underlying.Value!.GetBasePath();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetBasePathRaw() => Underlying.Value!.GetBasePathRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        ) => Underlying.Value!.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)GetBooleanProperty(props, __dsl_name, (byte)default_value);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDriver(int index) =>
            Underlying.Value!.GetCameraDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCameraDriverRaw(int index) =>
            Underlying.Value!.GetCameraDriverRaw(index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetCameraFormat(CameraHandle camera, CameraSpec* spec) =>
            Underlying.Value!.GetCameraFormat(camera, spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCameraFormat(CameraHandle camera, Ref<CameraSpec> spec)
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)(byte)GetCameraFormat(camera, __dsl_spec);
            }
        }

        [return: NativeTypeName("SDL_CameraID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraID(CameraHandle camera) =>
            Underlying.Value!.GetCameraID(camera);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraName([NativeTypeName("SDL_CameraID")] uint instance_id) =>
            Underlying.Value!.GetCameraName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCameraNameRaw([NativeTypeName("SDL_CameraID")] uint instance_id) =>
            Underlying.Value!.GetCameraNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraPermissionState(CameraHandle camera) =>
            Underlying.Value!.GetCameraPermissionState(camera);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraPosition GetCameraPosition(
            [NativeTypeName("SDL_CameraID")] uint instance_id
        ) => Underlying.Value!.GetCameraPosition(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraProperties(CameraHandle camera) =>
            Underlying.Value!.GetCameraProperties(camera);

        [return: NativeTypeName("SDL_CameraID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetCameras(int* count) => Underlying.Value!.GetCameras(count);

        [return: NativeTypeName("SDL_CameraID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetCameras(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetCameras(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraSpec** GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            int* count
        ) => Underlying.Value!.GetCameraSupportedFormats(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<CameraSpec> GetCameraSupportedFormats(
            [NativeTypeName("SDL_CameraID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (CameraSpec**)GetCameraSupportedFormats(devid, __dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        ) => Underlying.Value!.GetClipboardData(mime_type, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (void*)GetClipboardData(__dsl_mime_type, __dsl_size);
            }
        }

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GetClipboardMimeTypes(
            [NativeTypeName("size_t *")] nuint* num_mime_types
        ) => Underlying.Value!.GetClipboardMimeTypes(num_mime_types);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetClipboardMimeTypes(
            [NativeTypeName("size_t *")] Ref<nuint> num_mime_types
        )
        {
            fixed (nuint* __dsl_num_mime_types = num_mime_types)
            {
                return (sbyte**)GetClipboardMimeTypes(__dsl_num_mime_types);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetClipboardText() => Underlying.Value!.GetClipboardText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetClipboardTextRaw() => Underlying.Value!.GetClipboardTextRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] byte include_high_density_modes,
            DisplayMode* mode
        ) =>
            Underlying.Value!.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes,
                mode
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("bool")] MaybeBool<byte> include_high_density_modes,
            Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            {
                return (MaybeBool<byte>)
                    (byte)GetClosestFullscreenDisplayMode(
                        displayID,
                        w,
                        h,
                        refresh_rate,
                        (byte)include_high_density_modes,
                        __dsl_mode
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCPUCacheLineSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCPUCacheLineSize() => Underlying.Value!.GetCPUCacheLineSize();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentAudioDriver() =>
            Underlying.Value!.GetCurrentAudioDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentAudioDriverRaw() =>
            Underlying.Value!.GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentCameraDriver() =>
            Underlying.Value!.GetCurrentCameraDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentCameraDriverRaw() =>
            Underlying.Value!.GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayOrientation(displayID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetCurrentRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
            Underlying.Value!.GetCurrentRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCurrentRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)
                    (byte)GetCurrentRenderOutputSize(renderer, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetCurrentThreadID() => Underlying.Value!.GetCurrentThreadID();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
            Underlying.Value!.GetCurrentTime(ticks);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
        {
            fixed (long* __dsl_ticks = ticks)
            {
                return (MaybeBool<byte>)(byte)GetCurrentTime(__dsl_ticks);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentVideoDriver() =>
            Underlying.Value!.GetCurrentVideoDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentVideoDriverRaw() =>
            Underlying.Value!.GetCurrentVideoDriverRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle GetCursor() => Underlying.Value!.GetCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetDateTimeLocalePreferences(
            DateFormat* dateFormat,
            TimeFormat* timeFormat
        ) => Underlying.Value!.GetDateTimeLocalePreferences(dateFormat, timeFormat);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDateTimeLocalePreferences(
            Ref<DateFormat> dateFormat,
            Ref<TimeFormat> timeFormat
        )
        {
            fixed (TimeFormat* __dsl_timeFormat = timeFormat)
            fixed (DateFormat* __dsl_dateFormat = dateFormat)
            {
                return (MaybeBool<byte>)
                    (byte)GetDateTimeLocalePreferences(__dsl_dateFormat, __dsl_timeFormat);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfWeek")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDayOfWeek(int year, int month, int day) =>
            Underlying.Value!.GetDayOfWeek(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfYear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDayOfYear(int year, int month, int day) =>
            Underlying.Value!.GetDayOfYear(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDaysInMonth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDaysInMonth(int year, int month) =>
            Underlying.Value!.GetDaysInMonth(year, month);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertionHandler GetDefaultAssertionHandler() =>
            Underlying.Value!.GetDefaultAssertionHandler();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CursorHandle GetDefaultCursor() => Underlying.Value!.GetDefaultCursor();

        [return: NativeTypeName("SDL_LogOutputFunction")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static LogOutputFunction GetDefaultLogOutputFunction() =>
            Underlying.Value!.GetDefaultLogOutputFunction();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDesktopDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDesktopDisplayModeRaw(displayID);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => Underlying.Value!.GetDisplayBounds(displayID, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetDisplayBounds(displayID, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayContentScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetDisplayContentScale(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDisplayContentScale(displayID);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
            Underlying.Value!.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Ref<Point> point
        )
        {
            fixed (Point* __dsl_point = point)
            {
                return (uint)GetDisplayForPoint(__dsl_point);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            Underlying.Value!.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (uint)GetDisplayForRect(__dsl_rect);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForWindow(WindowHandle window) =>
            Underlying.Value!.GetDisplayForWindow(window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayName(displayID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayNameRaw(displayID);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayProperties(displayID);

        [return: NativeTypeName("SDL_DisplayID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetDisplays(int* count) => Underlying.Value!.GetDisplays(count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetDisplays(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetDisplays(__dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => Underlying.Value!.GetDisplayUsableBounds(displayID, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetDisplayUsableBounds(displayID, __dsl_rect);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetError() => Underlying.Value!.GetError();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetErrorRaw() => Underlying.Value!.GetErrorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] EventFilter* filter,
            void** userdata
        ) => Underlying.Value!.GetEventFilter(filter, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] Ref<EventFilter> filter,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            fixed (EventFilter* __dsl_filter = filter)
            {
                return (MaybeBool<byte>)(byte)GetEventFilter(__dsl_filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        ) => Underlying.Value!.GetFloatProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (float)GetFloatProperty(props, __dsl_name, default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        ) => Underlying.Value!.GetFullscreenDisplayModes(displayID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (DisplayMode**)GetFullscreenDisplayModes(displayID, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            GamepadHandle gamepad,
            GamepadAxis axis
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadAppleSFSymbolsNameForAxisRaw(
            GamepadHandle gamepad,
            GamepadAxis axis
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForAxisRaw(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadAppleSFSymbolsNameForButtonRaw(
            GamepadHandle gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForButtonRaw(gamepad, button);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetGamepadAxis(GamepadHandle gamepad, GamepadAxis axis) =>
            Underlying.Value!.GetGamepadAxis(gamepad, axis);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadAxisFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadAxis)GetGamepadAxisFromString(__dsl_str);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadBinding** GetGamepadBindings(GamepadHandle gamepad, int* count) =>
            Underlying.Value!.GetGamepadBindings(gamepad, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<GamepadBinding> GetGamepadBindings(
            GamepadHandle gamepad,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (GamepadBinding**)GetGamepadBindings(gamepad, __dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetGamepadButton(
            GamepadHandle gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadButton(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadButtonFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadButton)GetGamepadButtonFromString(__dsl_str);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabel(
            GamepadHandle gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadButtonLabel(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabelForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadButtonLabelForType(type, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
            Underlying.Value!.GetGamepadButtonRaw(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetGamepadConnectionState(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadConnectionState(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadFirmwareVersion(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadFirmwareVersion(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadHandle GetGamepadFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadFromID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadHandle GetGamepadFromPlayerIndex(int player_index) =>
            Underlying.Value!.GetGamepadFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadGUIDForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetGamepadGuidForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadGuidForID(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadID(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadID(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickHandle GetGamepadJoystick(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadJoystick(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMapping(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadMapping(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForGuid(Guid guid) =>
            Underlying.Value!.GetGamepadMappingForGuid(guid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadMappingForGuidRaw(Guid guid) =>
            Underlying.Value!.GetGamepadMappingForGuidRaw(guid);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadMappingForID(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadMappingForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadMappingForIDRaw(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadMappingRaw(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadMappingRaw(gamepad);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GetGamepadMappings(int* count) =>
            Underlying.Value!.GetGamepadMappings(count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (sbyte**)GetGamepadMappings(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadName(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadName(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadNameForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadNameRaw(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadNameRaw(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPath(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadPath(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadPathForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadPathForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadPathForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadPathRaw(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadPathRaw(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadPlayerIndex(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadPlayerIndex(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadPlayerIndexForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(GamepadHandle gamepad, int* percent) =>
            Underlying.Value!.GetGamepadPowerInfo(gamepad, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(GamepadHandle gamepad, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            {
                return (PowerState)GetGamepadPowerInfo(gamepad, __dsl_percent);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProduct(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadProduct(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadProductForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductVersion(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadProductVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersionForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadProductVersionForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadProperties(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadProperties(gamepad);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetGamepads(int* count) => Underlying.Value!.GetGamepads(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetGamepads(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetGamepads(__dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            float* data,
            int num_values
        ) => Underlying.Value!.GetGamepadSensorData(gamepad, type, data, num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetGamepadSensorData(
            GamepadHandle gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)
                    (byte)GetGamepadSensorData(gamepad, type, __dsl_data, num_values);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetGamepadSensorDataRate(GamepadHandle gamepad, SensorType type) =>
            Underlying.Value!.GetGamepadSensorDataRate(gamepad, type);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadSerial(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadSerial(gamepad);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadSerialRaw(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadSerialRaw(gamepad);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetGamepadSteamHandle(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadSteamHandle(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            Underlying.Value!.GetGamepadStringForAxis(axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
            Underlying.Value!.GetGamepadStringForAxisRaw(axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            Underlying.Value!.GetGamepadStringForButton(button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
            Underlying.Value!.GetGamepadStringForButtonRaw(button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            Underlying.Value!.GetGamepadStringForType(type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
            Underlying.Value!.GetGamepadStringForTypeRaw(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            bool* down,
            float* x,
            float* y,
            float* pressure
        ) =>
            Underlying.Value!.GetGamepadTouchpadFinger(
                gamepad,
                touchpad,
                finger,
                down,
                x,
                y,
                pressure
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetGamepadTouchpadFinger(
            GamepadHandle gamepad,
            int touchpad,
            int finger,
            Ref<bool> down,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        )
        {
            fixed (float* __dsl_pressure = pressure)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (bool* __dsl_down = down)
            {
                return (MaybeBool<byte>)
                    (byte)GetGamepadTouchpadFinger(
                        gamepad,
                        touchpad,
                        finger,
                        __dsl_down,
                        __dsl_x,
                        __dsl_y,
                        __dsl_pressure
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadType(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadType(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadTypeForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadTypeFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadType)GetGamepadTypeFromString(__dsl_str);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadVendor(GamepadHandle gamepad) =>
            Underlying.Value!.GetGamepadVendor(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendorForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadVendorForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadVendorForID(instance_id);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(float* x, float* y) =>
            Underlying.Value!.GetGlobalMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetGlobalMouseState(__dsl_x, __dsl_y);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalProperties() => Underlying.Value!.GetGlobalProperties();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetGrabbedWindow() => Underlying.Value!.GetGrabbedWindow();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetHapticEffectStatus(HapticHandle haptic, int effect) =>
            Underlying.Value!.GetHapticEffectStatus(haptic, effect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetHapticEffectStatusRaw(HapticHandle haptic, int effect) =>
            Underlying.Value!.GetHapticEffectStatusRaw(haptic, effect);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticFeatures(HapticHandle haptic) =>
            Underlying.Value!.GetHapticFeatures(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HapticHandle GetHapticFromID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticFromID(instance_id);

        [return: NativeTypeName("SDL_HapticID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticID(HapticHandle haptic) =>
            Underlying.Value!.GetHapticID(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticName(HapticHandle haptic) =>
            Underlying.Value!.GetHapticName(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticNameForID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHapticNameForIDRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHapticNameRaw(HapticHandle haptic) =>
            Underlying.Value!.GetHapticNameRaw(haptic);

        [return: NativeTypeName("SDL_HapticID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetHaptics(int* count) => Underlying.Value!.GetHaptics(count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetHaptics(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetHaptics(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetHint(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetHint(__dsl_name);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte default_value
        ) => Underlying.Value!.GetHintBoolean(name, default_value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)GetHintBoolean(__dsl_name, (byte)default_value);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetIOProperties(IOStreamHandle context) =>
            Underlying.Value!.GetIOProperties(context);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetIOSize(IOStreamHandle context) =>
            Underlying.Value!.GetIOSize(context);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStatus GetIOStatus(IOStreamHandle context) =>
            Underlying.Value!.GetIOStatus(context);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetJoystickAxis(JoystickHandle joystick, int axis) =>
            Underlying.Value!.GetJoystickAxis(joystick, axis);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        ) => Underlying.Value!.GetJoystickAxisInitialState(joystick, axis, state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetJoystickAxisInitialState(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        )
        {
            fixed (short* __dsl_state = state)
            {
                return (MaybeBool<byte>)
                    (byte)GetJoystickAxisInitialState(joystick, axis, __dsl_state);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickBall(JoystickHandle joystick, int ball, int* dx, int* dy) =>
            Underlying.Value!.GetJoystickBall(joystick, ball, dx, dy);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetJoystickBall(
            JoystickHandle joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        )
        {
            fixed (int* __dsl_dy = dy)
            fixed (int* __dsl_dx = dx)
            {
                return (MaybeBool<byte>)(byte)GetJoystickBall(joystick, ball, __dsl_dx, __dsl_dy);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetJoystickButton(JoystickHandle joystick, int button) =>
            Underlying.Value!.GetJoystickButton(joystick, button);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickButtonRaw(JoystickHandle joystick, int button) =>
            Underlying.Value!.GetJoystickButtonRaw(joystick, button);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetJoystickConnectionState(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickConnectionState(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickFirmwareVersion(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickFirmwareVersion(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickHandle GetJoystickFromID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickFromID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickHandle GetJoystickFromPlayerIndex(int player_index) =>
            Underlying.Value!.GetJoystickFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuid(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickGuid(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuidForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickGuidForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        ) => Underlying.Value!.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        )
        {
            fixed (ushort* __dsl_crc16 = crc16)
            fixed (ushort* __dsl_version = version)
            fixed (ushort* __dsl_product = product)
            fixed (ushort* __dsl_vendor = vendor)
            {
                GetJoystickGuidInfo(guid, __dsl_vendor, __dsl_product, __dsl_version, __dsl_crc16);
            }
        }

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickHat(JoystickHandle joystick, int hat) =>
            Underlying.Value!.GetJoystickHat(joystick, hat);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickID(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickID(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickName(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickName(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickNameForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickNameForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickNameRaw(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickNameRaw(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPath(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickPath(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPathForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickPathForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickPathForIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickPathForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickPathRaw(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickPathRaw(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickPlayerIndex(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickPlayerIndex(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickPlayerIndexForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickPlayerIndexForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(JoystickHandle joystick, int* percent) =>
            Underlying.Value!.GetJoystickPowerInfo(joystick, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(JoystickHandle joystick, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            {
                return (PowerState)GetJoystickPowerInfo(joystick, __dsl_percent);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProduct(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickProduct(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickProductForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductVersion(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickProductVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersionForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductVersionForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickProductVersionForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickProperties(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickProperties(joystick);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetJoysticks(int* count) => Underlying.Value!.GetJoysticks(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetJoysticks(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetJoysticks(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickSerial(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickSerial(joystick);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickSerialRaw(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickSerialRaw(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickType(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickType(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickTypeForID(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickVendor(JoystickHandle joystick) =>
            Underlying.Value!.GetJoystickVendor(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendorForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickVendorForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickVendorForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetKeyboardFocus() => Underlying.Value!.GetKeyboardFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyboardNameForID(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => Underlying.Value!.GetKeyboardNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetKeyboardNameForIDRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => Underlying.Value!.GetKeyboardNameForIDRaw(instance_id);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetKeyboards(int* count) => Underlying.Value!.GetKeyboards(count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetKeyboards(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetKeyboards(__dsl_count);
            }
        }

        [return: NativeTypeName("const bool *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static bool* GetKeyboardState(int* numkeys) =>
            Underlying.Value!.GetKeyboardState(numkeys);

        [return: NativeTypeName("const bool *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<bool> GetKeyboardState(Ref<int> numkeys)
        {
            fixed (int* __dsl_numkeys = numkeys)
            {
                return (bool*)GetKeyboardState(__dsl_numkeys);
            }
        }

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (uint)GetKeyFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] byte key_event
        ) => Underlying.Value!.GetKeyFromScancode(scancode, modstate, key_event);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetKeyFromScancode(
            Scancode scancode,
            [NativeTypeName("SDL_Keymod")] ushort modstate,
            [NativeTypeName("bool")] MaybeBool<byte> key_event
        ) => Underlying.Value!.GetKeyFromScancode(scancode, modstate, key_event);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] uint key) =>
            Underlying.Value!.GetKeyName(key);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] uint key) =>
            Underlying.Value!.GetKeyNameRaw(key);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] LogOutputFunction* callback,
            void** userdata
        ) => Underlying.Value!.GetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")] Ref<LogOutputFunction> callback,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            fixed (LogOutputFunction* __dsl_callback = callback)
            {
                GetLogOutputFunction(__dsl_callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static LogPriority GetLogPriority(int category) =>
            Underlying.Value!.GetLogPriority(category);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetMasksForPixelFormat(
            PixelFormat format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        ) => Underlying.Value!.GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetMasksForPixelFormat(
            PixelFormat format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        )
        {
            fixed (uint* __dsl_Amask = Amask)
            fixed (uint* __dsl_Bmask = Bmask)
            fixed (uint* __dsl_Gmask = Gmask)
            fixed (uint* __dsl_Rmask = Rmask)
            fixed (int* __dsl_bpp = bpp)
            {
                return (MaybeBool<byte>)
                    (byte)GetMasksForPixelFormat(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffects(HapticHandle haptic) =>
            Underlying.Value!.GetMaxHapticEffects(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffectsPlaying(HapticHandle haptic) =>
            Underlying.Value!.GetMaxHapticEffectsPlaying(haptic);

        [return: NativeTypeName("SDL_MouseID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetMice(int* count) => Underlying.Value!.GetMice(count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetMice(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetMice(__dsl_count);
            }
        }

        [return: NativeTypeName("SDL_Keymod")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetModState() => Underlying.Value!.GetModState();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetMouseFocus() => Underlying.Value!.GetMouseFocus();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetMouseNameForID(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => Underlying.Value!.GetMouseNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetMouseNameForIDRaw(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => Underlying.Value!.GetMouseNameForIDRaw(instance_id);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(float* x, float* y) =>
            Underlying.Value!.GetMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetMouseState(__dsl_x, __dsl_y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNaturalDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetNaturalDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumAudioDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumAudioDrivers() => Underlying.Value!.GetNumAudioDrivers();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        ) => Underlying.Value!.GetNumberProperty(props, name, default_value);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (long)GetNumberProperty(props, __dsl_name, default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumCameraDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumCameraDrivers() => Underlying.Value!.GetNumCameraDrivers();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpadFingers(GamepadHandle gamepad, int touchpad) =>
            Underlying.Value!.GetNumGamepadTouchpadFingers(gamepad, touchpad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpads(GamepadHandle gamepad) =>
            Underlying.Value!.GetNumGamepadTouchpads(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumHapticAxes(HapticHandle haptic) =>
            Underlying.Value!.GetNumHapticAxes(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickAxes(JoystickHandle joystick) =>
            Underlying.Value!.GetNumJoystickAxes(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickBalls(JoystickHandle joystick) =>
            Underlying.Value!.GetNumJoystickBalls(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickButtons(JoystickHandle joystick) =>
            Underlying.Value!.GetNumJoystickButtons(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickHats(JoystickHandle joystick) =>
            Underlying.Value!.GetNumJoystickHats(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumLogicalCPUCores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumLogicalCPUCores() => Underlying.Value!.GetNumLogicalCPUCores();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumRenderDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumRenderDrivers() => Underlying.Value!.GetNumRenderDrivers();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumVideoDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumVideoDrivers() => Underlying.Value!.GetNumVideoDrivers();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetPathInfo(
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => Underlying.Value!.GetPathInfo(path, info);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetPathInfo(__dsl_path, __dsl_info);
            }
        }

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceCounter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPerformanceCounter() => Underlying.Value!.GetPerformanceCounter();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceFrequency")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPerformanceFrequency() =>
            Underlying.Value!.GetPerformanceFrequency();

        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<PixelFormatDetails> GetPixelFormatDetails(PixelFormat format) =>
            Underlying.Value!.GetPixelFormatDetails(format);

        [return: NativeTypeName("const SDL_PixelFormatDetails *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PixelFormatDetails* GetPixelFormatDetailsRaw(PixelFormat format) =>
            Underlying.Value!.GetPixelFormatDetailsRaw(format);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatForMasks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PixelFormat GetPixelFormatForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        ) => Underlying.Value!.GetPixelFormatForMasks(bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPixelFormatName(PixelFormat format) =>
            Underlying.Value!.GetPixelFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPixelFormatNameRaw(PixelFormat format) =>
            Underlying.Value!.GetPixelFormatNameRaw(format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPlatform() => Underlying.Value!.GetPlatform();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPlatformRaw() => Underlying.Value!.GetPlatformRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        ) => Underlying.Value!.GetPointerProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        )
        {
            fixed (void* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (void*)GetPointerProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(int* seconds, int* percent) =>
            Underlying.Value!.GetPowerInfo(seconds, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (int* __dsl_seconds = seconds)
            {
                return (PowerState)GetPowerInfo(__dsl_seconds, __dsl_percent);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Locale** GetPreferredLocales(int* count) =>
            Underlying.Value!.GetPreferredLocales(count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Locale> GetPreferredLocales(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (Locale**)GetPreferredLocales(__dsl_count);
            }
        }

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        ) => Underlying.Value!.GetPrefPath(org, app);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (sbyte*)GetPrefPath(__dsl_org, __dsl_app);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimaryDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPrimaryDisplay() => Underlying.Value!.GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrimarySelectionText() =>
            Underlying.Value!.GetPrimarySelectionText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPrimarySelectionTextRaw() =>
            Underlying.Value!.GetPrimarySelectionTextRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.GetPropertyType(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (PropertyType)GetPropertyType(props, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadType(GamepadHandle gamepad) =>
            Underlying.Value!.GetRealGamepadType(gamepad);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadTypeForID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetRealGamepadTypeForID(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        ) => Underlying.Value!.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        )
        {
            fixed (int* __dsl_Y2 = Y2)
            fixed (int* __dsl_X2 = X2)
            fixed (int* __dsl_Y1 = Y1)
            fixed (int* __dsl_X1 = X1)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        ) => Underlying.Value!.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        )
        {
            fixed (float* __dsl_Y2 = Y2)
            fixed (float* __dsl_X2 = X2)
            fixed (float* __dsl_Y1 = Y1)
            fixed (float* __dsl_X1 = X1)
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        ) => Underlying.Value!.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_clip = clip)
            fixed (Point* __dsl_points = points)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectEnclosingPoints(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        ) => Underlying.Value!.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_clip = clip)
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectEnclosingPointsFloat(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => Underlying.Value!.GetRectIntersection(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => Underlying.Value!.GetRectIntersectionFloat(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)
                    (byte)GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => Underlying.Value!.GetRectUnion(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => Underlying.Value!.GetRectUnionFloat(A, B, result);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(float* x, float* y) =>
            Underlying.Value!.GetRelativeMouseState(x, y);

        [return: NativeTypeName("SDL_MouseButtonFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetRelativeMouseState(__dsl_x, __dsl_y);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderClipRect(RendererHandle renderer, Rect* rect) =>
            Underlying.Value!.GetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderClipRect(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderClipRect(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderColorScale(RendererHandle renderer, float* scale) =>
            Underlying.Value!.GetRenderColorScale(renderer, scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderColorScale(RendererHandle renderer, Ref<float> scale)
        {
            fixed (float* __dsl_scale = scale)
            {
                return (MaybeBool<byte>)(byte)GetRenderColorScale(renderer, __dsl_scale);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => Underlying.Value!.GetRenderDrawBlendMode(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            {
                return (MaybeBool<byte>)(byte)GetRenderDrawBlendMode(renderer, __dsl_blendMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.GetRenderDrawColor(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderDrawColor(renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderDrawColorFloat(
            RendererHandle renderer,
            float* r,
            float* g,
            float* b,
            float* a
        ) => Underlying.Value!.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderDrawColorFloat(
            RendererHandle renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderDrawColorFloat(renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRenderDriver(int index) =>
            Underlying.Value!.GetRenderDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetRenderDriverRaw(int index) =>
            Underlying.Value!.GetRenderDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle GetRenderer(WindowHandle window) =>
            Underlying.Value!.GetRenderer(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle GetRendererFromTexture(Texture* texture) =>
            Underlying.Value!.GetRendererFromTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static RendererHandle GetRendererFromTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (RendererHandle)GetRendererFromTexture(__dsl_texture);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRendererName(RendererHandle renderer) =>
            Underlying.Value!.GetRendererName(renderer);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetRendererNameRaw(RendererHandle renderer) =>
            Underlying.Value!.GetRendererNameRaw(renderer);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRendererProperties(RendererHandle renderer) =>
            Underlying.Value!.GetRendererProperties(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderLogicalPresentation(
            RendererHandle renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode
        ) => Underlying.Value!.GetRenderLogicalPresentation(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderLogicalPresentation(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode
        )
        {
            fixed (RendererLogicalPresentation* __dsl_mode = mode)
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderLogicalPresentation(renderer, __dsl_w, __dsl_h, __dsl_mode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderLogicalPresentationRect(RendererHandle renderer, FRect* rect) =>
            Underlying.Value!.GetRenderLogicalPresentationRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderLogicalPresentationRect(
            RendererHandle renderer,
            Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)
                    (byte)GetRenderLogicalPresentationRect(renderer, __dsl_rect);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalCommandEncoder(RendererHandle renderer) =>
            Underlying.Value!.GetRenderMetalCommandEncoder(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetRenderMetalCommandEncoderRaw(RendererHandle renderer) =>
            Underlying.Value!.GetRenderMetalCommandEncoderRaw(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalLayer(RendererHandle renderer) =>
            Underlying.Value!.GetRenderMetalLayer(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetRenderMetalLayerRaw(RendererHandle renderer) =>
            Underlying.Value!.GetRenderMetalLayerRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
            Underlying.Value!.GetRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderOutputSize(
            RendererHandle renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetRenderOutputSize(renderer, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderSafeArea(RendererHandle renderer, Rect* rect) =>
            Underlying.Value!.GetRenderSafeArea(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderSafeArea(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderSafeArea(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderScale(RendererHandle renderer, float* scaleX, float* scaleY) =>
            Underlying.Value!.GetRenderScale(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderScale(
            RendererHandle renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        )
        {
            fixed (float* __dsl_scaleY = scaleY)
            fixed (float* __dsl_scaleX = scaleX)
            {
                return (MaybeBool<byte>)(byte)GetRenderScale(renderer, __dsl_scaleX, __dsl_scaleY);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Texture> GetRenderTarget(RendererHandle renderer) =>
            Underlying.Value!.GetRenderTarget(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Texture* GetRenderTargetRaw(RendererHandle renderer) =>
            Underlying.Value!.GetRenderTargetRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderViewport(RendererHandle renderer, Rect* rect) =>
            Underlying.Value!.GetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderViewport(RendererHandle renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetRenderViewport(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetRenderVSync(RendererHandle renderer, int* vsync) =>
            Underlying.Value!.GetRenderVSync(renderer, vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetRenderVSync(RendererHandle renderer, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            {
                return (MaybeBool<byte>)(byte)GetRenderVSync(renderer, __dsl_vsync);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetRenderWindow(RendererHandle renderer) =>
            Underlying.Value!.GetRenderWindow(renderer);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRevision() => Underlying.Value!.GetRevision();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetRevisionRaw() => Underlying.Value!.GetRevisionRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetRGB(pixel, format, palette, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                GetRGB(pixel, __dsl_format, __dsl_palette, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.GetRgba(pixel, format, palette, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                GetRgba(pixel, __dsl_format, __dsl_palette, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSandbox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Sandbox GetSandbox() => Underlying.Value!.GetSandbox();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] ushort* modstate
        ) => Underlying.Value!.GetScancodeFromKey(key, modstate);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromKey(
            [NativeTypeName("SDL_Keycode")] uint key,
            [NativeTypeName("SDL_Keymod *")] Ref<ushort> modstate
        )
        {
            fixed (ushort* __dsl_modstate = modstate)
            {
                return (Scancode)GetScancodeFromKey(key, __dsl_modstate);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetScancodeFromName(name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (Scancode)GetScancodeFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
            Underlying.Value!.GetScancodeName(scancode);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetScancodeNameRaw(Scancode scancode) =>
            Underlying.Value!.GetScancodeNameRaw(scancode);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSemaphoreValue(SemaphoreHandle sem) =>
            Underlying.Value!.GetSemaphoreValue(sem);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSensorData(SensorHandle sensor, float* data, int num_values) =>
            Underlying.Value!.GetSensorData(sensor, data, num_values);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSensorData(
            SensorHandle sensor,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)GetSensorData(sensor, __dsl_data, num_values);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorHandle GetSensorFromID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorFromID(instance_id);

        [return: NativeTypeName("SDL_SensorID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorID(SensorHandle sensor) =>
            Underlying.Value!.GetSensorID(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorName(SensorHandle sensor) =>
            Underlying.Value!.GetSensorName(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorNameForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorNameForID(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetSensorNameForIDRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorNameForIDRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetSensorNameRaw(SensorHandle sensor) =>
            Underlying.Value!.GetSensorNameRaw(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorNonPortableType(SensorHandle sensor) =>
            Underlying.Value!.GetSensorNonPortableType(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorNonPortableTypeForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorNonPortableTypeForID(instance_id);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorProperties(SensorHandle sensor) =>
            Underlying.Value!.GetSensorProperties(sensor);

        [return: NativeTypeName("SDL_SensorID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetSensors(int* count) => Underlying.Value!.GetSensors(count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetSensors(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetSensors(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorType(SensorHandle sensor) =>
            Underlying.Value!.GetSensorType(sensor);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorTypeForID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorTypeForID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorTypeForID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSilenceValueForFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSilenceValueForFormat(AudioFormat format) =>
            Underlying.Value!.GetSilenceValueForFormat(format);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSIMDAlignment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint GetSimdAlignment() => Underlying.Value!.GetSimdAlignment();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        ) => Underlying.Value!.GetStorageFileSize(storage, path, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetStorageFileSize(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        )
        {
            fixed (ulong* __dsl_length = length)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetStorageFileSize(storage, __dsl_path, __dsl_length);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => Underlying.Value!.GetStoragePathInfo(storage, path, info);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetStoragePathInfo(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GetStoragePathInfo(storage, __dsl_path, __dsl_info);
            }
        }

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetStorageSpaceRemaining(StorageHandle storage) =>
            Underlying.Value!.GetStorageSpaceRemaining(storage);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        ) => Underlying.Value!.GetStringProperty(props, name, default_value);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        )
        {
            fixed (sbyte* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetStringProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* alpha
        ) => Underlying.Value!.GetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => Underlying.Value!.GetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSurfaceClipRect(Surface* surface, Rect* rect) =>
            Underlying.Value!.GetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("Uint32 *")] uint* key
        ) => Underlying.Value!.GetSurfaceColorKey(surface, key);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        )
        {
            fixed (uint* __dsl_key = key)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)GetSurfaceColorKey(__dsl_surface, __dsl_key);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetSurfaceColorMod(surface, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Colorspace GetSurfaceColorspace(Surface* surface) =>
            Underlying.Value!.GetSurfaceColorspace(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Colorspace GetSurfaceColorspace(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Colorspace)GetSurfaceColorspace(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface** GetSurfaceImages(Surface* surface, int* count) =>
            Underlying.Value!.GetSurfaceImages(surface, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Surface> GetSurfaceImages(Ref<Surface> surface, Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface**)GetSurfaceImages(__dsl_surface, __dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Palette* GetSurfacePalette(Surface* surface) =>
            Underlying.Value!.GetSurfacePalette(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> GetSurfacePalette(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Palette*)GetSurfacePalette(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Surface* surface) =>
            Underlying.Value!.GetSurfaceProperties(surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)GetSurfaceProperties(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemRAM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSystemRAM() => Underlying.Value!.GetSystemRAM();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemTheme")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SystemTheme GetSystemTheme() => Underlying.Value!.GetSystemTheme();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextInputArea(WindowHandle window, Rect* rect, int* cursor) =>
            Underlying.Value!.GetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextInputArea(
            WindowHandle window,
            Ref<Rect> rect,
            Ref<int> cursor
        )
        {
            fixed (int* __dsl_cursor = cursor)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetTextInputArea(window, __dsl_rect, __dsl_cursor);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureAlphaMod(
            Texture* texture,
            [NativeTypeName("Uint8 *")] byte* alpha
        ) => Underlying.Value!.GetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureAlphaModFloat(Texture* texture, float* alpha) =>
            Underlying.Value!.GetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureAlphaModFloat(
            Ref<Texture> texture,
            Ref<float> alpha
        )
        {
            fixed (float* __dsl_alpha = alpha)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
        ) => Underlying.Value!.GetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureColorModFloat(
            Texture* texture,
            float* r,
            float* g,
            float* b
        ) => Underlying.Value!.GetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureColorModFloat(
            Ref<Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        )
        {
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(Texture* texture) =>
            Underlying.Value!.GetTextureProperties(texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (uint)GetTextureProperties(__dsl_texture);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureScaleMode(Texture* texture, ScaleMode* scaleMode) =>
            Underlying.Value!.GetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureScaleMode(
            Ref<Texture> texture,
            Ref<ScaleMode> scaleMode
        )
        {
            fixed (ScaleMode* __dsl_scaleMode = scaleMode)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetTextureSize(Texture* texture, float* w, float* h) =>
            Underlying.Value!.GetTextureSize(texture, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetTextureSize(
            Ref<Texture> texture,
            Ref<float> w,
            Ref<float> h
        )
        {
            fixed (float* __dsl_h = h)
            fixed (float* __dsl_w = w)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)GetTextureSize(__dsl_texture, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetThreadID(ThreadHandle thread) =>
            Underlying.Value!.GetThreadID(thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetThreadName(ThreadHandle thread) =>
            Underlying.Value!.GetThreadName(thread);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetThreadNameRaw(ThreadHandle thread) =>
            Underlying.Value!.GetThreadNameRaw(thread);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTicks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetTicks() => Underlying.Value!.GetTicks();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTicksNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetTicksNS() => Underlying.Value!.GetTicksNS();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetTLS([NativeTypeName("SDL_TLSID *")] AtomicInt* id) =>
            Underlying.Value!.GetTLS(id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetTLS([NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id)
        {
            fixed (AtomicInt* __dsl_id = id)
            {
                return (void*)GetTLS(__dsl_id);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetTouchDeviceName(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => Underlying.Value!.GetTouchDeviceName(touchID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            Underlying.Value!.GetTouchDeviceNameRaw(touchID);

        [return: NativeTypeName("SDL_TouchID *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong* GetTouchDevices(int* count) =>
            Underlying.Value!.GetTouchDevices(count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<ulong> GetTouchDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (ulong*)GetTouchDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static TouchDeviceType GetTouchDeviceType(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => Underlying.Value!.GetTouchDeviceType(touchID);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        ) => Underlying.Value!.GetTouchFingers(touchID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (Finger**)GetTouchFingers(touchID, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetUserFolder(Folder folder) =>
            Underlying.Value!.GetUserFolder(folder);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetUserFolderRaw(Folder folder) =>
            Underlying.Value!.GetUserFolderRaw(folder);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetVersion() => Underlying.Value!.GetVersion();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetVideoDriver(int index) =>
            Underlying.Value!.GetVideoDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetVideoDriverRaw(int index) =>
            Underlying.Value!.GetVideoDriverRaw(index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowAspectRatio(
            WindowHandle window,
            float* min_aspect,
            float* max_aspect
        ) => Underlying.Value!.GetWindowAspectRatio(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowAspectRatio(
            WindowHandle window,
            Ref<float> min_aspect,
            Ref<float> max_aspect
        )
        {
            fixed (float* __dsl_max_aspect = max_aspect)
            fixed (float* __dsl_min_aspect = min_aspect)
            {
                return (MaybeBool<byte>)
                    (byte)GetWindowAspectRatio(window, __dsl_min_aspect, __dsl_max_aspect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowBordersSize(
            WindowHandle window,
            int* top,
            int* left,
            int* bottom,
            int* right
        ) => Underlying.Value!.GetWindowBordersSize(window, top, left, bottom, right);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowBordersSize(
            WindowHandle window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        )
        {
            fixed (int* __dsl_right = right)
            fixed (int* __dsl_bottom = bottom)
            fixed (int* __dsl_left = left)
            fixed (int* __dsl_top = top)
            {
                return (MaybeBool<byte>)
                    (byte)GetWindowBordersSize(
                        window,
                        __dsl_top,
                        __dsl_left,
                        __dsl_bottom,
                        __dsl_right
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowDisplayScale(WindowHandle window) =>
            Underlying.Value!.GetWindowDisplayScale(window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetWindowFlags(WindowHandle window) =>
            Underlying.Value!.GetWindowFlags(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Event* @event
        ) => Underlying.Value!.GetWindowFromEvent(@event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetWindowFromEvent(
            [NativeTypeName("const SDL_Event *")] Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (WindowHandle)GetWindowFromEvent(__dsl_event);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
            Underlying.Value!.GetWindowFromID(id);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetWindowFullscreenMode(WindowHandle window) =>
            Underlying.Value!.GetWindowFullscreenMode(window);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetWindowFullscreenModeRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowFullscreenModeRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] nuint* size
        ) => Underlying.Value!.GetWindowICCProfile(window, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetWindowICCProfile(
            WindowHandle window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            {
                return (void*)GetWindowICCProfile(window, __dsl_size);
            }
        }

        [return: NativeTypeName("SDL_WindowID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowID(WindowHandle window) =>
            Underlying.Value!.GetWindowID(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowKeyboardGrab(WindowHandle window) =>
            Underlying.Value!.GetWindowKeyboardGrab(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowKeyboardGrabRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowKeyboardGrabRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowMaximumSize(WindowHandle window, int* w, int* h) =>
            Underlying.Value!.GetWindowMaximumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowMaximumSize(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowMaximumSize(window, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowMinimumSize(WindowHandle window, int* w, int* h) =>
            Underlying.Value!.GetWindowMinimumSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowMinimumSize(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowMinimumSize(window, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowMouseGrab(WindowHandle window) =>
            Underlying.Value!.GetWindowMouseGrab(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowMouseGrabRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowMouseGrabRaw(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Rect> GetWindowMouseRect(WindowHandle window) =>
            Underlying.Value!.GetWindowMouseRect(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Rect* GetWindowMouseRectRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowMouseRectRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowOpacity(WindowHandle window) =>
            Underlying.Value!.GetWindowOpacity(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GetWindowParent(WindowHandle window) =>
            Underlying.Value!.GetWindowParent(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowPixelDensity(WindowHandle window) =>
            Underlying.Value!.GetWindowPixelDensity(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PixelFormat GetWindowPixelFormat(WindowHandle window) =>
            Underlying.Value!.GetWindowPixelFormat(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowPosition(WindowHandle window, int* x, int* y) =>
            Underlying.Value!.GetWindowPosition(window, x, y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowPosition(WindowHandle window, Ref<int> x, Ref<int> y)
        {
            fixed (int* __dsl_y = y)
            fixed (int* __dsl_x = x)
            {
                return (MaybeBool<byte>)(byte)GetWindowPosition(window, __dsl_x, __dsl_y);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowProperties(WindowHandle window) =>
            Underlying.Value!.GetWindowProperties(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowRelativeMouseMode(WindowHandle window) =>
            Underlying.Value!.GetWindowRelativeMouseMode(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowRelativeMouseModeRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowRelativeMouseModeRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle* GetWindows(int* count) => Underlying.Value!.GetWindows(count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<WindowHandle> GetWindows(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (WindowHandle*)GetWindows(__dsl_count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowSafeArea(WindowHandle window, Rect* rect) =>
            Underlying.Value!.GetWindowSafeArea(window, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSafeArea(WindowHandle window, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)GetWindowSafeArea(window, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowSize(WindowHandle window, int* w, int* h) =>
            Underlying.Value!.GetWindowSize(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSize(WindowHandle window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowSize(window, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowSizeInPixels(WindowHandle window, int* w, int* h) =>
            Underlying.Value!.GetWindowSizeInPixels(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSizeInPixels(
            WindowHandle window,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            {
                return (MaybeBool<byte>)(byte)GetWindowSizeInPixels(window, __dsl_w, __dsl_h);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> GetWindowSurface(WindowHandle window) =>
            Underlying.Value!.GetWindowSurface(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* GetWindowSurfaceRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowSurfaceRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetWindowSurfaceVSync(WindowHandle window, int* vsync) =>
            Underlying.Value!.GetWindowSurfaceVSync(window, vsync);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GetWindowSurfaceVSync(WindowHandle window, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            {
                return (MaybeBool<byte>)(byte)GetWindowSurfaceVSync(window, __dsl_vsync);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetWindowTitle(WindowHandle window) =>
            Underlying.Value!.GetWindowTitle(window);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetWindowTitleRaw(WindowHandle window) =>
            Underlying.Value!.GetWindowTitleRaw(window);

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GLContextStateHandle GLCreateContext(WindowHandle window) =>
            Underlying.Value!.GLCreateContext(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLDestroyContext(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => Underlying.Value!.GLDestroyContext(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLDestroyContextRaw(
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => Underlying.Value!.GLDestroyContextRaw(context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLExtensionSupported(
            [NativeTypeName("const char *")] sbyte* extension
        ) => Underlying.Value!.GLExtensionSupported(extension);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        )
        {
            fixed (sbyte* __dsl_extension = extension)
            {
                return (MaybeBool<byte>)(byte)GLExtensionSupported(__dsl_extension);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLGetAttribute(GLAttr attr, int* value) =>
            Underlying.Value!.GLGetAttribute(attr, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLGetAttribute(GLAttr attr, Ref<int> value)
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)GLGetAttribute(attr, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GLContextStateHandle GLGetCurrentContext() =>
            Underlying.Value!.GLGetCurrentContext();

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static WindowHandle GLGetCurrentWindow() => Underlying.Value!.GLGetCurrentWindow();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer GLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => Underlying.Value!.GLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer GLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (FunctionPointer)GLGetProcAddress(__dsl_proc);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLGetSwapInterval(int* interval) =>
            Underlying.Value!.GLGetSwapInterval(interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLGetSwapInterval(Ref<int> interval)
        {
            fixed (int* __dsl_interval = interval)
            {
                return (MaybeBool<byte>)(byte)GLGetSwapInterval(__dsl_interval);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.GLLoadLibrary(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLLoadLibrary(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)GLLoadLibrary(__dsl_path);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLMakeCurrent(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => Underlying.Value!.GLMakeCurrent(window, context);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLMakeCurrentRaw(
            WindowHandle window,
            [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
        ) => Underlying.Value!.GLMakeCurrentRaw(window, context);

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ResetAttributes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GLResetAttributes() => Underlying.Value!.GLResetAttributes();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLSetAttribute(GLAttr attr, int value) =>
            Underlying.Value!.GLSetAttribute(attr, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLSetAttributeRaw(GLAttr attr, int value) =>
            Underlying.Value!.GLSetAttributeRaw(attr, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLSetSwapInterval(int interval) =>
            Underlying.Value!.GLSetSwapInterval(interval);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLSetSwapIntervalRaw(int interval) =>
            Underlying.Value!.GLSetSwapIntervalRaw(interval);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> GLSwapWindow(WindowHandle window) =>
            Underlying.Value!.GLSwapWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GLSwapWindowRaw(WindowHandle window) =>
            Underlying.Value!.GLSwapWindowRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_UnloadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GLUnloadLibrary() => Underlying.Value!.GLUnloadLibrary();

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        ) => Underlying.Value!.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
            }
        }

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            int* count
        ) => Underlying.Value!.GlobStorageDirectory(storage, path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobStorageDirectory(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("SDL_GlobFlags")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobStorageDirectory(
                    storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        ) => Underlying.Value!.GuidToString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                GuidToString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => Underlying.Value!.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HapticEffectSupported(
            HapticHandle haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            {
                return (MaybeBool<byte>)(byte)HapticEffectSupported(haptic, __dsl_effect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HapticRumbleSupported(HapticHandle haptic) =>
            Underlying.Value!.HapticRumbleSupported(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HapticRumbleSupportedRaw(HapticHandle haptic) =>
            Underlying.Value!.HapticRumbleSupportedRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasAltiVec() => Underlying.Value!.HasAltiVec();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasAltiVecRaw() => Underlying.Value!.HasAltiVecRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasArmsimd() => Underlying.Value!.HasArmsimd();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasArmsimdRaw() => Underlying.Value!.HasArmsimdRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasAVX() => Underlying.Value!.HasAVX();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasAVX2() => Underlying.Value!.HasAVX2();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasAVX2Raw() => Underlying.Value!.HasAVX2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasAVX512F() => Underlying.Value!.HasAVX512F();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasAVX512FRaw() => Underlying.Value!.HasAVX512FRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasAVXRaw() => Underlying.Value!.HasAVXRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
            Underlying.Value!.HasClipboardData(mime_type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        )
        {
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (MaybeBool<byte>)(byte)HasClipboardData(__dsl_mime_type);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasClipboardText() => Underlying.Value!.HasClipboardText();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasClipboardTextRaw() => Underlying.Value!.HasClipboardTextRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasEvent([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.HasEvent(type);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasEventRaw([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.HasEventRaw(type);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.HasEvents(minType, maxType);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.HasEventsRaw(minType, maxType);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasGamepad() => Underlying.Value!.HasGamepad();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasGamepadRaw() => Underlying.Value!.HasGamepadRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasJoystick() => Underlying.Value!.HasJoystick();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasJoystickRaw() => Underlying.Value!.HasJoystickRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasKeyboard() => Underlying.Value!.HasKeyboard();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasKeyboardRaw() => Underlying.Value!.HasKeyboardRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasLasx() => Underlying.Value!.HasLasx();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasLasxRaw() => Underlying.Value!.HasLasxRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasLSX() => Underlying.Value!.HasLSX();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasLSXRaw() => Underlying.Value!.HasLSXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasMMX() => Underlying.Value!.HasMMX();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasMMXRaw() => Underlying.Value!.HasMMXRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasMouse() => Underlying.Value!.HasMouse();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasMouseRaw() => Underlying.Value!.HasMouseRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasNeon() => Underlying.Value!.HasNeon();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasNeonRaw() => Underlying.Value!.HasNeonRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasPrimarySelectionText() =>
            Underlying.Value!.HasPrimarySelectionText();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasPrimarySelectionTextRaw() =>
            Underlying.Value!.HasPrimarySelectionTextRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.HasProperty(props, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)HasProperty(props, __dsl_name);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        ) => Underlying.Value!.HasRectIntersection(A, B);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        )
        {
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)HasRectIntersection(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        ) => Underlying.Value!.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        )
        {
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<byte>)(byte)HasRectIntersectionFloat(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasScreenKeyboardSupport() =>
            Underlying.Value!.HasScreenKeyboardSupport();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasScreenKeyboardSupportRaw() =>
            Underlying.Value!.HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasSSE() => Underlying.Value!.HasSSE();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasSSE2() => Underlying.Value!.HasSSE2();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasSSE2Raw() => Underlying.Value!.HasSSE2Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasSSE3() => Underlying.Value!.HasSSE3();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasSSE3Raw() => Underlying.Value!.HasSSE3Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasSSE41() => Underlying.Value!.HasSSE41();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasSSE41Raw() => Underlying.Value!.HasSSE41Raw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HasSSE42() => Underlying.Value!.HasSSE42();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasSSE42Raw() => Underlying.Value!.HasSSE42Raw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HasSSERaw() => Underlying.Value!.HasSSERaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidBleScan([NativeTypeName("bool")] byte active) =>
            Underlying.Value!.HidBleScan(active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidBleScan([NativeTypeName("bool")] MaybeBool<byte> active) =>
            Underlying.Value!.HidBleScan(active);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidClose(HidDeviceHandle dev) => Underlying.Value!.HidClose(dev);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_device_change_count")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint HidDeviceChangeCount() => Underlying.Value!.HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => Underlying.Value!.HidEnumerate(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => Underlying.Value!.HidEnumerateRaw(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_exit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidExit() => Underlying.Value!.HidExit();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(HidDeviceInfo* devs) =>
            Underlying.Value!.HidFreeEnumeration(devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs)
        {
            fixed (HidDeviceInfo* __dsl_devs = devs)
            {
                HidFreeEnumeration(__dsl_devs);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidGetDeviceInfo(HidDeviceHandle dev) =>
            Underlying.Value!.HidGetDeviceInfo(dev);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceInfo* HidGetDeviceInfoRaw(HidDeviceHandle dev) =>
            Underlying.Value!.HidGetDeviceInfoRaw(dev);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidGetFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidGetFeatureReport(dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetIndexedString(dev, string_index, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            HidDeviceHandle dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetIndexedString(dev, string_index, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidGetInputReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidGetInputReport(dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetManufacturerString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetManufacturerString(dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetProductString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetProductString(dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => Underlying.Value!.HidGetReportDescriptor(dev, buf, buf_size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        )
        {
            fixed (byte* __dsl_buf = buf)
            {
                return (int)HidGetReportDescriptor(dev, __dsl_buf, buf_size);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetSerialNumberString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            HidDeviceHandle dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            {
                return (int)HidGetSerialNumberString(dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidInit() => Underlying.Value!.HidInit();

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        ) => Underlying.Value!.HidOpen(vendor_id, product_id, serial_number);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        )
        {
            fixed (uint* __dsl_serial_number = serial_number)
            {
                return (HidDeviceHandle)HidOpen(vendor_id, product_id, __dsl_serial_number);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.HidOpenPath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (HidDeviceHandle)HidOpenPath(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidRead(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidRead(dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => Underlying.Value!.HidReadTimeout(dev, data, length, milliseconds);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            HidDeviceHandle dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidReadTimeout(dev, __dsl_data, length, milliseconds);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidSendFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidSendFeatureReport(dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSetNonblocking(HidDeviceHandle dev, int nonblock) =>
            Underlying.Value!.HidSetNonblocking(dev, nonblock);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidWrite(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            HidDeviceHandle dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            {
                return (int)HidWrite(dev, __dsl_data, length);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HideCursor() => Underlying.Value!.HideCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HideCursorRaw() => Underlying.Value!.HideCursorRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> HideWindow(WindowHandle window) =>
            Underlying.Value!.HideWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte HideWindowRaw(WindowHandle window) =>
            Underlying.Value!.HideWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> Init([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.Init(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> InitHapticRumble(HapticHandle haptic) =>
            Underlying.Value!.InitHapticRumble(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte InitHapticRumbleRaw(HapticHandle haptic) =>
            Underlying.Value!.InitHapticRumbleRaw(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte InitRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.InitRaw(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> InitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.InitSubSystem(flags);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte InitSubSystemRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.InitSubSystemRaw(flags);

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.IOFromConstMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_mem = mem)
            {
                return (IOStreamHandle)IOFromConstMem(__dsl_mem, size);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromDynamicMem() => Underlying.Value!.IOFromDynamicMem();

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        ) => Underlying.Value!.IOFromFile(file, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        )
        {
            fixed (sbyte* __dsl_mode = mode)
            fixed (sbyte* __dsl_file = file)
            {
                return (IOStreamHandle)IOFromFile(__dsl_file, __dsl_mode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
            Underlying.Value!.IOFromMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
        {
            fixed (void* __dsl_mem = mem)
            {
                return (IOStreamHandle)IOFromMem(__dsl_mem, size);
            }
        }

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => Underlying.Value!.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            IOStreamHandle context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                return (nuint)IOvprintf(context, __dsl_fmt, __dsl_ap);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsGamepad(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            Underlying.Value!.IsGamepadRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsJoystickHaptic(JoystickHandle joystick) =>
            Underlying.Value!.IsJoystickHaptic(joystick);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsJoystickHapticRaw(JoystickHandle joystick) =>
            Underlying.Value!.IsJoystickHapticRaw(joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsJoystickVirtual(instance_id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsJoystickVirtualRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsJoystickVirtualRaw(instance_id);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsMouseHaptic() => Underlying.Value!.IsMouseHaptic();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsMouseHapticRaw() => Underlying.Value!.IsMouseHapticRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsTablet() => Underlying.Value!.IsTablet();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsTabletRaw() => Underlying.Value!.IsTabletRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> IsTV() => Underlying.Value!.IsTV();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte IsTVRaw() => Underlying.Value!.IsTVRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> JoystickConnected(JoystickHandle joystick) =>
            Underlying.Value!.JoystickConnected(joystick);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte JoystickConnectedRaw(JoystickHandle joystick) =>
            Underlying.Value!.JoystickConnectedRaw(joystick);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> JoystickEventsEnabled() =>
            Underlying.Value!.JoystickEventsEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte JoystickEventsEnabledRaw() =>
            Underlying.Value!.JoystickEventsEnabledRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
            Underlying.Value!.LoadBMP(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (Surface*)LoadBMP(__dsl_file);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* LoadBMPIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio
        ) => Underlying.Value!.LoadBMPIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMPIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        ) => Underlying.Value!.LoadBMPIO(src, closeio);

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        ) => Underlying.Value!.LoadFile(file, datasize);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (sbyte* __dsl_file = file)
            {
                return (void*)LoadFile(__dsl_file, __dsl_datasize);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("bool")] byte closeio
        ) => Underlying.Value!.LoadFileIO(src, datasize, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFileIO(
            IOStreamHandle src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            {
                return (void*)LoadFileIO(src, __dsl_datasize, (byte)closeio);
            }
        }

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.LoadFunction(handle, name);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static FunctionPointer LoadFunction(
            SharedObjectHandle handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (FunctionPointer)LoadFunction(handle, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SharedObjectHandle LoadObject(
            [NativeTypeName("const char *")] sbyte* sofile
        ) => Underlying.Value!.LoadObject(sofile);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SharedObjectHandle LoadObject(
            [NativeTypeName("const char *")] Ref<sbyte> sofile
        )
        {
            fixed (sbyte* __dsl_sofile = sofile)
            {
                return (SharedObjectHandle)LoadObject(__dsl_sofile);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => Underlying.Value!.LoadWAV(path, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] byte closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => Underlying.Value!.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LoadWAVIO(
            IOStreamHandle src,
            [NativeTypeName("bool")] MaybeBool<byte> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (MaybeBool<byte>)
                    (byte)LoadWAVIO(
                        src,
                        (byte)closeio,
                        __dsl_spec,
                        __dsl_audio_buf,
                        __dsl_audio_len
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.LockAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LockAudioStreamRaw(AudioStreamHandle stream) =>
            Underlying.Value!.LockAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockJoysticks() => Underlying.Value!.LockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockMutex(MutexHandle mutex) => Underlying.Value!.LockMutex(mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.LockProperties(props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LockPropertiesRaw([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.LockPropertiesRaw(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForReading(RWLockHandle rwlock) =>
            Underlying.Value!.LockRWLockForReading(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForWriting(RWLockHandle rwlock) =>
            Underlying.Value!.LockRWLockForWriting(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.LockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                LockSpinlock(__dsl_lock);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LockSurface(Surface* surface) => Underlying.Value!.LockSurface(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)LockSurface(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LockTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        ) => Underlying.Value!.LockTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        )
        {
            fixed (int* __dsl_pitch = pitch)
            fixed (void** __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte LockTextureToSurface(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        ) => Underlying.Value!.LockTextureToSurface(texture, rect, surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> LockTextureToSurface(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        )
        {
            fixed (Surface** __dsl_surface = surface)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => Underlying.Value!.LogMessageV(category, priority, fmt, ap);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.MapRGB(format, palette, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                return (uint)MapRGB(__dsl_format, __dsl_palette, r, g, b);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
            [NativeTypeName("const SDL_Palette *")] Palette* palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.MapRgba(format, palette, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
            [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormatDetails* __dsl_format = format)
            {
                return (uint)MapRgba(__dsl_format, __dsl_palette, r, g, b, a);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRGB(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.MapSurfaceRGB(surface, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRGB(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)MapSurfaceRGB(__dsl_surface, r, g, b);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRgba(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.MapSurfaceRgba(surface, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapSurfaceRgba(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)MapSurfaceRgba(__dsl_surface, r, g, b, a);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> MaximizeWindow(WindowHandle window) =>
            Underlying.Value!.MaximizeWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte MaximizeWindowRaw(WindowHandle window) =>
            Underlying.Value!.MaximizeWindowRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MemoryBarrierAcquireFunction() =>
            Underlying.Value!.MemoryBarrierAcquireFunction();

        [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MemoryBarrierReleaseFunction() =>
            Underlying.Value!.MemoryBarrierReleaseFunction();

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalCreateView(WindowHandle window) =>
            Underlying.Value!.MetalCreateView(window);

        [return: NativeTypeName("SDL_MetalView")]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* MetalCreateViewRaw(WindowHandle window) =>
            Underlying.Value!.MetalCreateViewRaw(window);

        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
            Underlying.Value!.MetalDestroyView(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                MetalDestroyView(__dsl_view);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
            Underlying.Value!.MetalGetLayer(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                return (void*)MetalGetLayer(__dsl_view);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> MinimizeWindow(WindowHandle window) =>
            Underlying.Value!.MinimizeWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte MinimizeWindowRaw(WindowHandle window) =>
            Underlying.Value!.MinimizeWindowRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte MixAudio(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        ) => Underlying.Value!.MixAudio(dst, src, format, len, volume);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> MixAudio(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            AudioFormat format,
            [NativeTypeName("Uint32")] uint len,
            float volume
        )
        {
            fixed (byte* __dsl_src = src)
            fixed (byte* __dsl_dst = dst)
            {
                return (MaybeBool<byte>)(byte)MixAudio(__dsl_dst, __dsl_src, format, len, volume);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidEnterBackground() =>
            Underlying.Value!.OnApplicationDidEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidEnterForeground() =>
            Underlying.Value!.OnApplicationDidEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidReceiveMemoryWarning() =>
            Underlying.Value!.OnApplicationDidReceiveMemoryWarning();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillEnterBackground() =>
            Underlying.Value!.OnApplicationWillEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillEnterForeground() =>
            Underlying.Value!.OnApplicationWillEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillTerminate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillTerminate() =>
            Underlying.Value!.OnApplicationWillTerminate();

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        ) => Underlying.Value!.OpenAudioDevice(devid, spec);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        )
        {
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (uint)OpenAudioDevice(devid, __dsl_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => Underlying.Value!.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AudioStreamHandle OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (AudioStreamHandle)OpenAudioDeviceStream(
                    devid,
                    __dsl_spec,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        ) => Underlying.Value!.OpenCamera(instance_id, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraHandle OpenCamera(
            [NativeTypeName("SDL_CameraID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        )
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (CameraHandle)OpenCamera(instance_id, __dsl_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.OpenFileStorage(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenFileStorage(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (StorageHandle)OpenFileStorage(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadHandle OpenGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenGamepad(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HapticHandle OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            Underlying.Value!.OpenHaptic(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HapticHandle OpenHapticFromJoystick(JoystickHandle joystick) =>
            Underlying.Value!.OpenHapticFromJoystick(joystick);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HapticHandle OpenHapticFromMouse() => Underlying.Value!.OpenHapticFromMouse();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        ) => Underlying.Value!.OpenIO(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStreamHandle OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (IOStreamInterface* __dsl_iface = iface)
            {
                return (IOStreamHandle)OpenIO(__dsl_iface, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickHandle OpenJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorHandle OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            Underlying.Value!.OpenSensor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        ) => Underlying.Value!.OpenStorage(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (StorageInterface* __dsl_iface = iface)
            {
                return (StorageHandle)OpenStorage(__dsl_iface, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.OpenTitleStorage(@override, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_override = @override)
            {
                return (StorageHandle)OpenTitleStorage(__dsl_override, props);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte OpenURL([NativeTypeName("const char *")] sbyte* url) =>
            Underlying.Value!.OpenURL(url);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
        {
            fixed (sbyte* __dsl_url = url)
            {
                return (MaybeBool<byte>)(byte)OpenURL(__dsl_url);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.OpenUserStorage(org, app, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static StorageHandle OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (StorageHandle)OpenUserStorage(__dsl_org, __dsl_app, props);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> OutOfMemory() => Underlying.Value!.OutOfMemory();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte OutOfMemoryRaw() => Underlying.Value!.OutOfMemoryRaw();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PauseAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => Underlying.Value!.PauseAudioDevice(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PauseAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.PauseAudioDeviceRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PauseAudioStreamDevice(AudioStreamHandle stream) =>
            Underlying.Value!.PauseAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PauseAudioStreamDeviceRaw(AudioStreamHandle stream) =>
            Underlying.Value!.PauseAudioStreamDeviceRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PauseHaptic(HapticHandle haptic) =>
            Underlying.Value!.PauseHaptic(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PauseHapticRaw(HapticHandle haptic) =>
            Underlying.Value!.PauseHapticRaw(haptic);

        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.PeepEvents(events, numevents, action, minType, maxType);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        )
        {
            fixed (Event* __dsl_events = events)
            {
                return (int)PeepEvents(__dsl_events, numevents, action, minType, maxType);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PlayHapticRumble(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => Underlying.Value!.PlayHapticRumble(haptic, strength, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PlayHapticRumbleRaw(
            HapticHandle haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => Underlying.Value!.PlayHapticRumbleRaw(haptic, strength, length);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PollEvent(Event* @event) => Underlying.Value!.PollEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PollEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)PollEvent(__dsl_event);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormat dst_format,
            void* dst,
            int dst_pitch,
            [NativeTypeName("bool")] byte linear
        ) =>
            Underlying.Value!.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch,
                linear
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PremultiplyAlpha(
            int width,
            int height,
            PixelFormat src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormat dst_format,
            Ref dst,
            int dst_pitch,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (MaybeBool<byte>)
                    (byte)PremultiplyAlpha(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch,
                        (byte)linear
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PremultiplySurfaceAlpha(
            Surface* surface,
            [NativeTypeName("bool")] byte linear
        ) => Underlying.Value!.PremultiplySurfaceAlpha(surface, linear);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PremultiplySurfaceAlpha(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> linear
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)PremultiplySurfaceAlpha(__dsl_surface, (byte)linear);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_PumpEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void PumpEvents() => Underlying.Value!.PumpEvents();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PushEvent(Event* @event) => Underlying.Value!.PushEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PushEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)PushEvent(__dsl_event);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        ) => Underlying.Value!.PutAudioStreamData(stream, buf, len);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> PutAudioStreamData(
            AudioStreamHandle stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        )
        {
            fixed (void* __dsl_buf = buf)
            {
                return (MaybeBool<byte>)(byte)PutAudioStreamData(stream, __dsl_buf, len);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_Quit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void Quit() => Underlying.Value!.Quit();

        [NativeFunction("SDL3", EntryPoint = "SDL_QuitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QuitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.QuitSubSystem(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RaiseWindow(WindowHandle window) =>
            Underlying.Value!.RaiseWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RaiseWindowRaw(WindowHandle window) =>
            Underlying.Value!.RaiseWindowRaw(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            IOStreamHandle context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.ReadIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            IOStreamHandle context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            {
                return (nuint)ReadIO(context, __dsl_ptr, size);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS16BE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] short* value
        ) => Underlying.Value!.ReadS16BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS16BE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS16BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS16LE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] short* value
        ) => Underlying.Value!.ReadS16LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS16LE(
            IOStreamHandle src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS16LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS32BE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
            Underlying.Value!.ReadS32BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS32BE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS32BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS32LE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
            Underlying.Value!.ReadS32LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS32LE(
            IOStreamHandle src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS32LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS64BE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] long* value
        ) => Underlying.Value!.ReadS64BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS64BE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS64BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS64LE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] long* value
        ) => Underlying.Value!.ReadS64LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS64LE(
            IOStreamHandle src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS64LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadS8(IOStreamHandle src, [NativeTypeName("Sint8 *")] sbyte* value) =>
            Underlying.Value!.ReadS8(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadS8(
            IOStreamHandle src,
            [NativeTypeName("Sint8 *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadS8(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        ) => Underlying.Value!.ReadStorageFile(storage, path, destination, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_destination = destination)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)ReadStorageFile(storage, __dsl_path, __dsl_destination, length);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)ReadSurfacePixel(__dsl_surface, x, y, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float* r,
            float* g,
            float* b,
            float* a
        ) => Underlying.Value!.ReadSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)ReadSurfacePixelFloat(
                        __dsl_surface,
                        x,
                        y,
                        __dsl_r,
                        __dsl_g,
                        __dsl_b,
                        __dsl_a
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU16BE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] ushort* value
        ) => Underlying.Value!.ReadU16BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU16BE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU16BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU16LE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] ushort* value
        ) => Underlying.Value!.ReadU16LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU16LE(
            IOStreamHandle src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU16LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU32BE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] uint* value
        ) => Underlying.Value!.ReadU32BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU32BE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU32BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU32LE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] uint* value
        ) => Underlying.Value!.ReadU32LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU32LE(
            IOStreamHandle src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU32LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU64BE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] ulong* value
        ) => Underlying.Value!.ReadU64BE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU64BE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU64BE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU64LE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] ulong* value
        ) => Underlying.Value!.ReadU64LE(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU64LE(
            IOStreamHandle src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU64LE(src, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReadU8(IOStreamHandle src, [NativeTypeName("Uint8 *")] byte* value) =>
            Underlying.Value!.ReadU8(src, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReadU8(
            IOStreamHandle src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        )
        {
            fixed (byte* __dsl_value = value)
            {
                return (MaybeBool<byte>)(byte)ReadU8(src, __dsl_value);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RegisterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint RegisterEvents(int numevents) =>
            Underlying.Value!.RegisterEvents(numevents);

        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ReleaseCameraFrame(CameraHandle camera, Surface* frame) =>
            Underlying.Value!.ReleaseCameraFrame(camera, frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ReleaseCameraFrame(CameraHandle camera, Ref<Surface> frame)
        {
            fixed (Surface* __dsl_frame = frame)
            {
                ReleaseCameraFrame(camera, __dsl_frame);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ReloadGamepadMappings() =>
            Underlying.Value!.ReloadGamepadMappings();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ReloadGamepadMappingsRaw() =>
            Underlying.Value!.ReloadGamepadMappingsRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => Underlying.Value!.RemoveEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveEventWatch(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                RemoveEventWatch(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            void* userdata
        ) => Underlying.Value!.RemoveHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")] HintCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                RemoveHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RemovePath([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.RemovePath(path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)RemovePath(__dsl_path);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => Underlying.Value!.RemoveStoragePath(storage, path);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RemoveStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)(byte)RemoveStoragePath(storage, __dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveSurfaceAlternateImages(Surface* surface) =>
            Underlying.Value!.RemoveSurfaceAlternateImages(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void RemoveSurfaceAlternateImages(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                RemoveSurfaceAlternateImages(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            Underlying.Value!.RemoveTimer(id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
            Underlying.Value!.RemoveTimerRaw(id);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.RenamePath(oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)(byte)RenamePath(__dsl_oldpath, __dsl_newpath);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.RenameStoragePath(storage, oldpath, newpath);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenameStoragePath(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (MaybeBool<byte>)
                    (byte)RenameStoragePath(storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderClear(RendererHandle renderer) =>
            Underlying.Value!.RenderClear(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderClearRaw(RendererHandle renderer) =>
            Underlying.Value!.RenderClearRaw(renderer);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderClipEnabled(RendererHandle renderer) =>
            Underlying.Value!.RenderClipEnabled(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderClipEnabledRaw(RendererHandle renderer) =>
            Underlying.Value!.RenderClipEnabledRaw(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        ) => Underlying.Value!.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderCoordinatesFromWindow(
            RendererHandle renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        )
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (MaybeBool<byte>)
                    (byte)RenderCoordinatesFromWindow(
                        renderer,
                        window_x,
                        window_y,
                        __dsl_x,
                        __dsl_y
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        ) => Underlying.Value!.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderCoordinatesToWindow(
            RendererHandle renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        )
        {
            fixed (float* __dsl_window_y = window_y)
            fixed (float* __dsl_window_x = window_x)
            {
                return (MaybeBool<byte>)
                    (byte)RenderCoordinatesToWindow(renderer, x, y, __dsl_window_x, __dsl_window_y);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.RenderDebugText(renderer, x, y, str);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderDebugText(
            RendererHandle renderer,
            float x,
            float y,
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (MaybeBool<byte>)(byte)RenderDebugText(renderer, x, y, __dsl_str);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => Underlying.Value!.RenderFillRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderFillRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)RenderFillRect(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => Underlying.Value!.RenderFillRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderFillRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)(byte)RenderFillRects(renderer, __dsl_rects, count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderGeometry(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        ) =>
            Underlying.Value!.RenderGeometry(
                renderer,
                texture,
                vertices,
                num_vertices,
                indices,
                num_indices
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderGeometry(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        )
        {
            fixed (int* __dsl_indices = indices)
            fixed (Vertex* __dsl_vertices = vertices)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderGeometry(
                        renderer,
                        __dsl_texture,
                        __dsl_vertices,
                        num_vertices,
                        __dsl_indices,
                        num_indices
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderGeometryRaw(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            Underlying.Value!.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderGeometryRaw(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (FColor* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderGeometryRaw(
                        renderer,
                        __dsl_texture,
                        __dsl_xy,
                        xy_stride,
                        __dsl_color,
                        color_stride,
                        __dsl_uv,
                        uv_stride,
                        num_vertices,
                        __dsl_indices,
                        num_indices,
                        size_indices
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderLine(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => Underlying.Value!.RenderLine(renderer, x1, y1, x2, y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderLineRaw(
            RendererHandle renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => Underlying.Value!.RenderLineRaw(renderer, x1, y1, x2, y2);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => Underlying.Value!.RenderLines(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderLines(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)(byte)RenderLines(renderer, __dsl_points, count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderPoint(RendererHandle renderer, float x, float y) =>
            Underlying.Value!.RenderPoint(renderer, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderPointRaw(RendererHandle renderer, float x, float y) =>
            Underlying.Value!.RenderPointRaw(renderer, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => Underlying.Value!.RenderPoints(renderer, points, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderPoints(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<byte>)(byte)RenderPoints(renderer, __dsl_points, count);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderPresent(RendererHandle renderer) =>
            Underlying.Value!.RenderPresent(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderPresentRaw(RendererHandle renderer) =>
            Underlying.Value!.RenderPresentRaw(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.RenderReadPixels(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> RenderReadPixels(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (Surface*)RenderReadPixels(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => Underlying.Value!.RenderRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)RenderRect(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => Underlying.Value!.RenderRects(renderer, rects, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderRects(
            RendererHandle renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)(byte)RenderRects(renderer, __dsl_rects, count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderTexture(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => Underlying.Value!.RenderTexture(renderer, texture, srcrect, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTexture(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTexture(renderer, __dsl_texture, __dsl_srcrect, __dsl_dstrect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderTexture9Grid(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) =>
            Underlying.Value!.RenderTexture9Grid(
                renderer,
                texture,
                srcrect,
                left_width,
                right_width,
                top_height,
                bottom_height,
                scale,
                dstrect
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTexture9Grid(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float left_width,
            float right_width,
            float top_height,
            float bottom_height,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTexture9Grid(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        __dsl_dstrect
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderTextureRotated(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            FlipMode flip
        ) =>
            Underlying.Value!.RenderTextureRotated(
                renderer,
                texture,
                srcrect,
                dstrect,
                angle,
                center,
                flip
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTextureRotated(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            FlipMode flip
        )
        {
            fixed (FPoint* __dsl_center = center)
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTextureRotated(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        __dsl_dstrect,
                        angle,
                        __dsl_center,
                        flip
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderTextureTiled(
            RendererHandle renderer,
            Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => Underlying.Value!.RenderTextureTiled(renderer, texture, srcrect, scale, dstrect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderTextureTiled(
            RendererHandle renderer,
            Ref<Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            float scale,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)RenderTextureTiled(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        scale,
                        __dsl_dstrect
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RenderViewportSet(RendererHandle renderer) =>
            Underlying.Value!.RenderViewportSet(renderer);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RenderViewportSetRaw(RendererHandle renderer) =>
            Underlying.Value!.RenderViewportSetRaw(renderer);

        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        ) => Underlying.Value!.ReportAssertion(data, func, file, line);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (sbyte* __dsl_func = func)
            fixed (AssertData* __dsl_data = data)
            {
                return (AssertState)ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetAssertionReport() => Underlying.Value!.ResetAssertionReport();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ResetHint([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.ResetHint(name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)ResetHint(__dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetHints() => Underlying.Value!.ResetHints();

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetKeyboard() => Underlying.Value!.ResetKeyboard();

        [NativeFunction("SDL3", EntryPoint = "SDL_ResetLogPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetLogPriorities() => Underlying.Value!.ResetLogPriorities();

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RestoreWindow(WindowHandle window) =>
            Underlying.Value!.RestoreWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RestoreWindowRaw(WindowHandle window) =>
            Underlying.Value!.RestoreWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ResumeAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => Underlying.Value!.ResumeAudioDevice(dev);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ResumeAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.ResumeAudioDeviceRaw(dev);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ResumeAudioStreamDevice(AudioStreamHandle stream) =>
            Underlying.Value!.ResumeAudioStreamDevice(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ResumeAudioStreamDeviceRaw(AudioStreamHandle stream) =>
            Underlying.Value!.ResumeAudioStreamDeviceRaw(stream);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ResumeHaptic(HapticHandle haptic) =>
            Underlying.Value!.ResumeHaptic(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ResumeHapticRaw(HapticHandle haptic) =>
            Underlying.Value!.ResumeHapticRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RumbleGamepad(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepad(
                gamepad,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RumbleGamepadRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepadRaw(
                gamepad,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RumbleGamepadTriggers(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepadTriggers(
                gamepad,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RumbleGamepadTriggersRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepadTriggersRaw(
                gamepad,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RumbleJoystick(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystick(
                joystick,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RumbleJoystickRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystickRaw(
                joystick,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RumbleJoystickTriggers(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystickTriggers(
                joystick,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RumbleJoystickTriggersRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystickTriggersRaw(
                joystick,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> RunHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => Underlying.Value!.RunHapticEffect(haptic, effect, iterations);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte RunHapticEffectRaw(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => Underlying.Value!.RunHapticEffectRaw(haptic, effect, iterations);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SaveBMP(
            Surface* surface,
            [NativeTypeName("const char *")] sbyte* file
        ) => Underlying.Value!.SaveBMP(surface, file);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SaveBMP(__dsl_surface, __dsl_file);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SaveBMPIO(
            Surface* surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] byte closeio
        ) => Underlying.Value!.SaveBMPIO(surface, dst, closeio);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SaveBMPIO(
            Ref<Surface> surface,
            IOStreamHandle dst,
            [NativeTypeName("bool")] MaybeBool<byte> closeio
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SaveBMPIO(__dsl_surface, dst, (byte)closeio);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ScaleSurface(
            Surface* surface,
            int width,
            int height,
            ScaleMode scaleMode
        ) => Underlying.Value!.ScaleSurface(surface, width, height, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ScaleSurface(
            Ref<Surface> surface,
            int width,
            int height,
            ScaleMode scaleMode
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ScaleSurface(__dsl_surface, width, height, scaleMode);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ScreenKeyboardShown(WindowHandle window) =>
            Underlying.Value!.ScreenKeyboardShown(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ScreenKeyboardShownRaw(WindowHandle window) =>
            Underlying.Value!.ScreenKeyboardShownRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ScreenSaverEnabled() =>
            Underlying.Value!.ScreenSaverEnabled();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ScreenSaverEnabledRaw() => Underlying.Value!.ScreenSaverEnabledRaw();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long SeekIO(
            IOStreamHandle context,
            [NativeTypeName("Sint64")] long offset,
            IOWhence whence
        ) => Underlying.Value!.SeekIO(context, offset, whence);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => Underlying.Value!.SendGamepadEffect(gamepad, data, size);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendGamepadEffect(
            GamepadHandle gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)SendGamepadEffect(gamepad, __dsl_data, size);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => Underlying.Value!.SendJoystickEffect(joystick, data, size);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendJoystickEffect(
            JoystickHandle joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)SendJoystickEffect(joystick, __dsl_data, size);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] float* data,
            int num_values
        ) =>
            Underlying.Value!.SendJoystickVirtualSensorData(
                joystick,
                type,
                sensor_timestamp,
                data,
                num_values
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SendJoystickVirtualSensorData(
            JoystickHandle joystick,
            SensorType type,
            [NativeTypeName("Uint64")] ulong sensor_timestamp,
            [NativeTypeName("const float *")] Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            {
                return (MaybeBool<byte>)
                    (byte)SendJoystickVirtualSensorData(
                        joystick,
                        type,
                        sensor_timestamp,
                        __dsl_data,
                        num_values
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAppMetadata(
            [NativeTypeName("const char *")] sbyte* appname,
            [NativeTypeName("const char *")] sbyte* appversion,
            [NativeTypeName("const char *")] sbyte* appidentifier
        ) => Underlying.Value!.SetAppMetadata(appname, appversion, appidentifier);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAppMetadata(
            [NativeTypeName("const char *")] Ref<sbyte> appname,
            [NativeTypeName("const char *")] Ref<sbyte> appversion,
            [NativeTypeName("const char *")] Ref<sbyte> appidentifier
        )
        {
            fixed (sbyte* __dsl_appidentifier = appidentifier)
            fixed (sbyte* __dsl_appversion = appversion)
            fixed (sbyte* __dsl_appname = appname)
            {
                return (MaybeBool<byte>)
                    (byte)SetAppMetadata(__dsl_appname, __dsl_appversion, __dsl_appidentifier);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAppMetadataProperty(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => Underlying.Value!.SetAppMetadataProperty(name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAppMetadataProperty(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetAppMetadataProperty(__dsl_name, __dsl_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            void* userdata
        ) => Underlying.Value!.SetAssertionHandler(handler, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetAssertionHandler(handler, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAtomicInt(AtomicInt* a, int v) => Underlying.Value!.SetAtomicInt(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAtomicInt(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)SetAtomicInt(__dsl_a, v);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* SetAtomicPointer(void** a, void* v) =>
            Underlying.Value!.SetAtomicPointer(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr SetAtomicPointer(Ref2D a, Ref v)
        {
            fixed (void* __dsl_v = v)
            fixed (void** __dsl_a = a)
            {
                return (void*)SetAtomicPointer(__dsl_a, __dsl_v);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint SetAtomicU32(AtomicU32* a, [NativeTypeName("Uint32")] uint v) =>
            Underlying.Value!.SetAtomicU32(a, v);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint SetAtomicU32(Ref<AtomicU32> a, [NativeTypeName("Uint32")] uint v)
        {
            fixed (AtomicU32* __dsl_a = a)
            {
                return (uint)SetAtomicU32(__dsl_a, v);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioDeviceGain(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        ) => Underlying.Value!.SetAudioDeviceGain(devid, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioDeviceGainRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            float gain
        ) => Underlying.Value!.SetAudioDeviceGainRaw(devid, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            void* userdata
        ) => Underlying.Value!.SetAudioPostmixCallback(devid, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioPostmixCallback(devid, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => Underlying.Value!.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamFormat(
            AudioStreamHandle stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamFrequencyRatio(
            AudioStreamHandle stream,
            float ratio
        ) => Underlying.Value!.SetAudioStreamFrequencyRatio(stream, ratio);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamFrequencyRatioRaw(AudioStreamHandle stream, float ratio) =>
            Underlying.Value!.SetAudioStreamFrequencyRatioRaw(stream, ratio);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamGain(AudioStreamHandle stream, float gain) =>
            Underlying.Value!.SetAudioStreamGain(stream, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamGainRaw(AudioStreamHandle stream, float gain) =>
            Underlying.Value!.SetAudioStreamGainRaw(stream, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => Underlying.Value!.SetAudioStreamGetCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamGetCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamGetCallback(stream, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        ) => Underlying.Value!.SetAudioStreamInputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamInputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        )
        {
            fixed (int* __dsl_chmap = chmap)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamInputChannelMap(stream, __dsl_chmap, count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] int* chmap,
            int count
        ) => Underlying.Value!.SetAudioStreamOutputChannelMap(stream, chmap, count);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamOutputChannelMap(
            AudioStreamHandle stream,
            [NativeTypeName("const int *")] Ref<int> chmap,
            int count
        )
        {
            fixed (int* __dsl_chmap = chmap)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamOutputChannelMap(stream, __dsl_chmap, count);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            void* userdata
        ) => Underlying.Value!.SetAudioStreamPutCallback(stream, callback, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetAudioStreamPutCallback(
            AudioStreamHandle stream,
            [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetAudioStreamPutCallback(stream, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("bool")] byte value
        ) => Underlying.Value!.SetBooleanProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("bool")] MaybeBool<byte> value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetBooleanProperty(props, __dsl_name, (byte)value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) =>
            Underlying.Value!.SetClipboardData(
                callback,
                cleanup,
                userdata,
                mime_types,
                num_mime_types
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        )
        {
            fixed (sbyte** __dsl_mime_types = mime_types)
            fixed (void* __dsl_userdata = userdata)
            {
                return (MaybeBool<byte>)
                    (byte)SetClipboardData(
                        callback,
                        cleanup,
                        __dsl_userdata,
                        __dsl_mime_types,
                        num_mime_types
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
            Underlying.Value!.SetClipboardText(text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetClipboardText(
            [NativeTypeName("const char *")] Ref<sbyte> text
        )
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (MaybeBool<byte>)(byte)SetClipboardText(__dsl_text);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetCurrentThreadPriority(ThreadPriority priority) =>
            Underlying.Value!.SetCurrentThreadPriority(priority);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetCurrentThreadPriorityRaw(ThreadPriority priority) =>
            Underlying.Value!.SetCurrentThreadPriorityRaw(priority);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetCursor(CursorHandle cursor) =>
            Underlying.Value!.SetCursor(cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetCursorRaw(CursorHandle cursor) =>
            Underlying.Value!.SetCursorRaw(cursor);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetErrorV(
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => Underlying.Value!.SetErrorV(fmt, ap);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetErrorV(
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                return (MaybeBool<byte>)(byte)SetErrorV(__dsl_fmt, __dsl_ap);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] byte enabled
        ) => Underlying.Value!.SetEventEnabled(type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.SetEventEnabled(type, enabled);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            void* userdata
        ) => Underlying.Value!.SetEventFilter(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] EventFilter filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetEventFilter(filter, __dsl_userdata);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        ) => Underlying.Value!.SetFloatProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetFloatProperty(props, __dsl_name, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetGamepadEventsEnabled([NativeTypeName("bool")] byte enabled) =>
            Underlying.Value!.SetGamepadEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetGamepadEventsEnabled(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.SetGamepadEventsEnabled(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetGamepadLED(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetGamepadLED(gamepad, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetGamepadLEDRaw(
            GamepadHandle gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetGamepadLEDRaw(gamepad, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        ) => Underlying.Value!.SetGamepadMapping(instance_id, mapping);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        )
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (MaybeBool<byte>)(byte)SetGamepadMapping(instance_id, __dsl_mapping);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetGamepadPlayerIndex(
            GamepadHandle gamepad,
            int player_index
        ) => Underlying.Value!.SetGamepadPlayerIndex(gamepad, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetGamepadPlayerIndexRaw(GamepadHandle gamepad, int player_index) =>
            Underlying.Value!.SetGamepadPlayerIndexRaw(gamepad, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] byte enabled
        ) => Underlying.Value!.SetGamepadSensorEnabled(gamepad, type, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetGamepadSensorEnabled(
            GamepadHandle gamepad,
            SensorType type,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.SetGamepadSensorEnabled(gamepad, type, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHapticAutocenter(HapticHandle haptic, int autocenter) =>
            Underlying.Value!.SetHapticAutocenter(haptic, autocenter);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetHapticAutocenterRaw(HapticHandle haptic, int autocenter) =>
            Underlying.Value!.SetHapticAutocenterRaw(haptic, autocenter);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHapticGain(HapticHandle haptic, int gain) =>
            Underlying.Value!.SetHapticGain(haptic, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetHapticGainRaw(HapticHandle haptic, int gain) =>
            Underlying.Value!.SetHapticGainRaw(haptic, gain);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => Underlying.Value!.SetHint(name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetHint(__dsl_name, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        ) => Underlying.Value!.SetHintWithPriority(name, value, priority);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)SetHintWithPriority(__dsl_name, __dsl_value, priority);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetInitialized(
            InitState* state,
            [NativeTypeName("bool")] byte initialized
        ) => Underlying.Value!.SetInitialized(state, initialized);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetInitialized(
            Ref<InitState> state,
            [NativeTypeName("bool")] MaybeBool<byte> initialized
        )
        {
            fixed (InitState* __dsl_state = state)
            {
                SetInitialized(__dsl_state, (byte)initialized);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetJoystickEventsEnabled([NativeTypeName("bool")] byte enabled) =>
            Underlying.Value!.SetJoystickEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetJoystickEventsEnabled(
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.SetJoystickEventsEnabled(enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickLED(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetJoystickLED(joystick, red, green, blue);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickLEDRaw(
            JoystickHandle joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetJoystickLEDRaw(joystick, red, green, blue);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickPlayerIndex(
            JoystickHandle joystick,
            int player_index
        ) => Underlying.Value!.SetJoystickPlayerIndex(joystick, player_index);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickPlayerIndexRaw(JoystickHandle joystick, int player_index) =>
            Underlying.Value!.SetJoystickPlayerIndexRaw(joystick, player_index);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickVirtualAxis(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.SetJoystickVirtualAxis(joystick, axis, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickVirtualAxisRaw(
            JoystickHandle joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.SetJoystickVirtualAxisRaw(joystick, axis, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickVirtualBall(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        ) => Underlying.Value!.SetJoystickVirtualBall(joystick, ball, xrel, yrel);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickVirtualBallRaw(
            JoystickHandle joystick,
            int ball,
            [NativeTypeName("Sint16")] short xrel,
            [NativeTypeName("Sint16")] short yrel
        ) => Underlying.Value!.SetJoystickVirtualBallRaw(joystick, ball, xrel, yrel);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] byte down
        ) => Underlying.Value!.SetJoystickVirtualButton(joystick, button, down);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickVirtualButton(
            JoystickHandle joystick,
            int button,
            [NativeTypeName("bool")] MaybeBool<byte> down
        ) => Underlying.Value!.SetJoystickVirtualButton(joystick, button, down);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickVirtualHat(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => Underlying.Value!.SetJoystickVirtualHat(joystick, hat, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickVirtualHatRaw(
            JoystickHandle joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => Underlying.Value!.SetJoystickVirtualHatRaw(joystick, hat, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] byte down,
            float x,
            float y,
            float pressure
        ) =>
            Underlying.Value!.SetJoystickVirtualTouchpad(
                joystick,
                touchpad,
                finger,
                down,
                x,
                y,
                pressure
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetJoystickVirtualTouchpad(
            JoystickHandle joystick,
            int touchpad,
            int finger,
            [NativeTypeName("bool")] MaybeBool<byte> down,
            float x,
            float y,
            float pressure
        ) =>
            Underlying.Value!.SetJoystickVirtualTouchpad(
                joystick,
                touchpad,
                finger,
                down,
                x,
                y,
                pressure
            );

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            void* userdata
        ) => Underlying.Value!.SetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogPriorities(LogPriority priority) =>
            Underlying.Value!.SetLogPriorities(priority);

        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogPriority(int category, LogPriority priority) =>
            Underlying.Value!.SetLogPriority(category, priority);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* prefix
        ) => Underlying.Value!.SetLogPriorityPrefix(priority, prefix);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetLogPriorityPrefix(
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> prefix
        )
        {
            fixed (sbyte* __dsl_prefix = prefix)
            {
                return (MaybeBool<byte>)(byte)SetLogPriorityPrefix(priority, __dsl_prefix);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_SetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetModState([NativeTypeName("SDL_Keymod")] ushort modstate) =>
            Underlying.Value!.SetModState(modstate);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.SetNumberProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetNumberProperty(props, __dsl_name, value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        ) => Underlying.Value!.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        )
        {
            fixed (Color* __dsl_colors = colors)
            fixed (Palette* __dsl_palette = palette)
            {
                return (MaybeBool<byte>)
                    (byte)SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        ) => Underlying.Value!.SetPointerProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPointerProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        )
        {
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetPointerProperty(props, __dsl_name, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            void* userdata
        ) => Underlying.Value!.SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPointerPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)
                    (byte)SetPointerPropertyWithCleanup(
                        props,
                        __dsl_name,
                        __dsl_value,
                        cleanup,
                        __dsl_userdata
                    );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
            Underlying.Value!.SetPrimarySelectionText(text);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetPrimarySelectionText(
            [NativeTypeName("const char *")] Ref<sbyte> text
        )
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (MaybeBool<byte>)(byte)SetPrimarySelectionText(__dsl_text);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetRenderClipRect(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderClipRect(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetRenderClipRect(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderColorScale(RendererHandle renderer, float scale) =>
            Underlying.Value!.SetRenderColorScale(renderer, scale);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderColorScaleRaw(RendererHandle renderer, float scale) =>
            Underlying.Value!.SetRenderColorScaleRaw(renderer, scale);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderDrawBlendMode(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => Underlying.Value!.SetRenderDrawBlendMode(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderDrawBlendModeRaw(
            RendererHandle renderer,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => Underlying.Value!.SetRenderDrawBlendModeRaw(renderer, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderDrawColor(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.SetRenderDrawColor(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderDrawColorFloat(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        ) => Underlying.Value!.SetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderDrawColorFloatRaw(
            RendererHandle renderer,
            float r,
            float g,
            float b,
            float a
        ) => Underlying.Value!.SetRenderDrawColorFloatRaw(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderDrawColorRaw(
            RendererHandle renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.SetRenderDrawColorRaw(renderer, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderLogicalPresentation(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        ) => Underlying.Value!.SetRenderLogicalPresentation(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderLogicalPresentationRaw(
            RendererHandle renderer,
            int w,
            int h,
            RendererLogicalPresentation mode
        ) => Underlying.Value!.SetRenderLogicalPresentationRaw(renderer, w, h, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderScale(
            RendererHandle renderer,
            float scaleX,
            float scaleY
        ) => Underlying.Value!.SetRenderScale(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderScaleRaw(RendererHandle renderer, float scaleX, float scaleY) =>
            Underlying.Value!.SetRenderScaleRaw(renderer, scaleX, scaleY);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderTarget(RendererHandle renderer, Texture* texture) =>
            Underlying.Value!.SetRenderTarget(renderer, texture);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderTarget(RendererHandle renderer, Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetRenderTarget(renderer, __dsl_texture);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetRenderViewport(renderer, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderViewport(
            RendererHandle renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetRenderViewport(renderer, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetRenderVSync(RendererHandle renderer, int vsync) =>
            Underlying.Value!.SetRenderVSync(renderer, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetRenderVSyncRaw(RendererHandle renderer, int vsync) =>
            Underlying.Value!.SetRenderVSyncRaw(renderer, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.SetScancodeName(scancode, name);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetScancodeName(
            Scancode scancode,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetScancodeName(scancode, __dsl_name);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => Underlying.Value!.SetStringProperty(props, name, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<byte>)(byte)SetStringProperty(props, __dsl_name, __dsl_value);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte alpha
        ) => Underlying.Value!.SetSurfaceAlphaMod(surface, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceAlphaMod(__dsl_surface, alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceBlendMode(
            Surface* surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => Underlying.Value!.SetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceBlendMode(
            Ref<Surface> surface,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceBlendMode(__dsl_surface, blendMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("bool")] byte enabled,
            [NativeTypeName("Uint32")] uint key
        ) => Underlying.Value!.SetSurfaceColorKey(surface, enabled, key);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled,
            [NativeTypeName("Uint32")] uint key
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorKey(__dsl_surface, (byte)enabled, key);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.SetSurfaceColorMod(surface, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorMod(__dsl_surface, r, g, b);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
            Underlying.Value!.SetSurfaceColorspace(surface, colorspace);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceColorspace(
            Ref<Surface> surface,
            Colorspace colorspace
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceColorspace(__dsl_surface, colorspace);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfacePalette(Surface* surface, Palette* palette) =>
            Underlying.Value!.SetSurfacePalette(surface, palette);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfacePalette(__dsl_surface, __dsl_palette);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetSurfaceRLE(Surface* surface, [NativeTypeName("bool")] byte enabled) =>
            Underlying.Value!.SetSurfaceRLE(surface, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetSurfaceRLE(
            Ref<Surface> surface,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SetSurfaceRLE(__dsl_surface, (byte)enabled);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int cursor
        ) => Underlying.Value!.SetTextInputArea(window, rect, cursor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextInputArea(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            int cursor
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetTextInputArea(window, __dsl_rect, cursor);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureAlphaMod(
            Texture* texture,
            [NativeTypeName("Uint8")] byte alpha
        ) => Underlying.Value!.SetTextureAlphaMod(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureAlphaMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureAlphaMod(__dsl_texture, alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureAlphaModFloat(Texture* texture, float alpha) =>
            Underlying.Value!.SetTextureAlphaModFloat(texture, alpha);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureAlphaModFloat(Ref<Texture> texture, float alpha)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureAlphaModFloat(__dsl_texture, alpha);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureBlendMode(
            Texture* texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        ) => Underlying.Value!.SetTextureBlendMode(texture, blendMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureBlendMode(
            Ref<Texture> texture,
            [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureBlendMode(__dsl_texture, blendMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureColorMod(
            Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.SetTextureColorMod(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureColorMod(
            Ref<Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureColorMod(__dsl_texture, r, g, b);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureColorModFloat(Texture* texture, float r, float g, float b) =>
            Underlying.Value!.SetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureColorModFloat(
            Ref<Texture> texture,
            float r,
            float g,
            float b
        )
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureColorModFloat(__dsl_texture, r, g, b);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTextureScaleMode(Texture* texture, ScaleMode scaleMode) =>
            Underlying.Value!.SetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTextureScaleMode(Ref<Texture> texture, ScaleMode scaleMode)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)(byte)SetTextureScaleMode(__dsl_texture, scaleMode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetTLS(
            [NativeTypeName("SDL_TLSID *")] AtomicInt* id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        ) => Underlying.Value!.SetTLS(id, value, destructor);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetTLS(
            [NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
        )
        {
            fixed (void* __dsl_value = value)
            fixed (AtomicInt* __dsl_id = id)
            {
                return (MaybeBool<byte>)(byte)SetTLS(__dsl_id, __dsl_value, destructor);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] byte on_top
        ) => Underlying.Value!.SetWindowAlwaysOnTop(window, on_top);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowAlwaysOnTop(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> on_top
        ) => Underlying.Value!.SetWindowAlwaysOnTop(window, on_top);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowAspectRatio(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        ) => Underlying.Value!.SetWindowAspectRatio(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowAspectRatioRaw(
            WindowHandle window,
            float min_aspect,
            float max_aspect
        ) => Underlying.Value!.SetWindowAspectRatioRaw(window, min_aspect, max_aspect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] byte bordered
        ) => Underlying.Value!.SetWindowBordered(window, bordered);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowBordered(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> bordered
        ) => Underlying.Value!.SetWindowBordered(window, bordered);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] byte focusable
        ) => Underlying.Value!.SetWindowFocusable(window, focusable);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowFocusable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> focusable
        ) => Underlying.Value!.SetWindowFocusable(window, focusable);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] byte fullscreen
        ) => Underlying.Value!.SetWindowFullscreen(window, fullscreen);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowFullscreen(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> fullscreen
        ) => Underlying.Value!.SetWindowFullscreen(window, fullscreen);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        ) => Underlying.Value!.SetWindowFullscreenMode(window, mode);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowFullscreenMode(
            WindowHandle window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            {
                return (MaybeBool<byte>)(byte)SetWindowFullscreenMode(window, __dsl_mode);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            void* callback_data
        ) => Underlying.Value!.SetWindowHitTest(window, callback, callback_data);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowHitTest(
            WindowHandle window,
            [NativeTypeName("SDL_HitTest")] HitTest callback,
            Ref callback_data
        )
        {
            fixed (void* __dsl_callback_data = callback_data)
            {
                return (MaybeBool<byte>)
                    (byte)SetWindowHitTest(window, callback, __dsl_callback_data);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowIcon(WindowHandle window, Surface* icon) =>
            Underlying.Value!.SetWindowIcon(window, icon);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowIcon(WindowHandle window, Ref<Surface> icon)
        {
            fixed (Surface* __dsl_icon = icon)
            {
                return (MaybeBool<byte>)(byte)SetWindowIcon(window, __dsl_icon);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        ) => Underlying.Value!.SetWindowKeyboardGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowKeyboardGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => Underlying.Value!.SetWindowKeyboardGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowMaximumSize(
            WindowHandle window,
            int max_w,
            int max_h
        ) => Underlying.Value!.SetWindowMaximumSize(window, max_w, max_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowMaximumSizeRaw(WindowHandle window, int max_w, int max_h) =>
            Underlying.Value!.SetWindowMaximumSizeRaw(window, max_w, max_h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowMinimumSize(
            WindowHandle window,
            int min_w,
            int min_h
        ) => Underlying.Value!.SetWindowMinimumSize(window, min_w, min_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowMinimumSizeRaw(WindowHandle window, int min_w, int min_h) =>
            Underlying.Value!.SetWindowMinimumSizeRaw(window, min_w, min_h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowModal(
            WindowHandle window,
            [NativeTypeName("bool")] byte modal
        ) => Underlying.Value!.SetWindowModal(window, modal);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowModal(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> modal
        ) => Underlying.Value!.SetWindowModal(window, modal);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] byte grabbed
        ) => Underlying.Value!.SetWindowMouseGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowMouseGrab(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> grabbed
        ) => Underlying.Value!.SetWindowMouseGrab(window, grabbed);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetWindowMouseRect(window, rect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowMouseRect(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<byte>)(byte)SetWindowMouseRect(window, __dsl_rect);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowOpacity(WindowHandle window, float opacity) =>
            Underlying.Value!.SetWindowOpacity(window, opacity);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowOpacityRaw(WindowHandle window, float opacity) =>
            Underlying.Value!.SetWindowOpacityRaw(window, opacity);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowParent(WindowHandle window, WindowHandle parent) =>
            Underlying.Value!.SetWindowParent(window, parent);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowParentRaw(WindowHandle window, WindowHandle parent) =>
            Underlying.Value!.SetWindowParentRaw(window, parent);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowPosition(WindowHandle window, int x, int y) =>
            Underlying.Value!.SetWindowPosition(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowPositionRaw(WindowHandle window, int x, int y) =>
            Underlying.Value!.SetWindowPositionRaw(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] byte enabled
        ) => Underlying.Value!.SetWindowRelativeMouseMode(window, enabled);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowRelativeMouseMode(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> enabled
        ) => Underlying.Value!.SetWindowRelativeMouseMode(window, enabled);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] byte resizable
        ) => Underlying.Value!.SetWindowResizable(window, resizable);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowResizable(
            WindowHandle window,
            [NativeTypeName("bool")] MaybeBool<byte> resizable
        ) => Underlying.Value!.SetWindowResizable(window, resizable);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowShape(WindowHandle window, Surface* shape) =>
            Underlying.Value!.SetWindowShape(window, shape);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowShape(WindowHandle window, Ref<Surface> shape)
        {
            fixed (Surface* __dsl_shape = shape)
            {
                return (MaybeBool<byte>)(byte)SetWindowShape(window, __dsl_shape);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowSize(WindowHandle window, int w, int h) =>
            Underlying.Value!.SetWindowSize(window, w, h);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowSizeRaw(WindowHandle window, int w, int h) =>
            Underlying.Value!.SetWindowSizeRaw(window, w, h);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowSurfaceVSync(WindowHandle window, int vsync) =>
            Underlying.Value!.SetWindowSurfaceVSync(window, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowSurfaceVSyncRaw(WindowHandle window, int vsync) =>
            Underlying.Value!.SetWindowSurfaceVSyncRaw(window, vsync);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* title
        ) => Underlying.Value!.SetWindowTitle(window, title);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SetWindowTitle(
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)(byte)SetWindowTitle(window, __dsl_title);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShouldInit(InitState* state) => Underlying.Value!.ShouldInit(state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShouldInit(Ref<InitState> state)
        {
            fixed (InitState* __dsl_state = state)
            {
                return (MaybeBool<byte>)(byte)ShouldInit(__dsl_state);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShouldQuit(InitState* state) => Underlying.Value!.ShouldQuit(state);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShouldQuit(Ref<InitState> state)
        {
            fixed (InitState* __dsl_state = state)
            {
                return (MaybeBool<byte>)(byte)ShouldQuit(__dsl_state);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowCursor() => Underlying.Value!.ShowCursor();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShowCursorRaw() => Underlying.Value!.ShowCursorRaw();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        ) => Underlying.Value!.ShowMessageBox(messageboxdata, buttonid);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        )
        {
            fixed (int* __dsl_buttonid = buttonid)
            fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
            {
                return (MaybeBool<byte>)(byte)ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        ) =>
            Underlying.Value!.ShowOpenFileDialog(
                callback,
                userdata,
                window,
                filters,
                nfilters,
                default_location,
                allow_many
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFileDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_filters,
                    nfilters,
                    __dsl_default_location,
                    (byte)allow_many
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("bool")] byte allow_many
        ) =>
            Underlying.Value!.ShowOpenFolderDialog(
                callback,
                userdata,
                window,
                default_location,
                allow_many
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("bool")] MaybeBool<byte> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFolderDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_default_location,
                    (byte)allow_many
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            void* userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            int nfilters,
            [NativeTypeName("const char *")] sbyte* default_location
        ) =>
            Underlying.Value!.ShowSaveFileDialog(
                callback,
                userdata,
                window,
                filters,
                nfilters,
                default_location
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
            Ref userdata,
            WindowHandle window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            int nfilters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowSaveFileDialog(
                    callback,
                    __dsl_userdata,
                    window,
                    __dsl_filters,
                    nfilters,
                    __dsl_default_location
                );
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            WindowHandle window
        ) => Underlying.Value!.ShowSimpleMessageBox(flags, title, message, window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowSimpleMessageBox(
            [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            WindowHandle window
        )
        {
            fixed (sbyte* __dsl_message = message)
            fixed (sbyte* __dsl_title = title)
            {
                return (MaybeBool<byte>)
                    (byte)ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, window);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowWindow(WindowHandle window) =>
            Underlying.Value!.ShowWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShowWindowRaw(WindowHandle window) =>
            Underlying.Value!.ShowWindowRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> ShowWindowSystemMenu(WindowHandle window, int x, int y) =>
            Underlying.Value!.ShowWindowSystemMenu(window, x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte ShowWindowSystemMenuRaw(WindowHandle window, int x, int y) =>
            Underlying.Value!.ShowWindowSystemMenuRaw(window, x, y);

        [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SignalCondition(ConditionHandle cond) =>
            Underlying.Value!.SignalCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "SDL_SignalSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SignalSemaphore(SemaphoreHandle sem) =>
            Underlying.Value!.SignalSemaphore(sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StartTextInput(WindowHandle window) =>
            Underlying.Value!.StartTextInput(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StartTextInputRaw(WindowHandle window) =>
            Underlying.Value!.StartTextInputRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StartTextInputWithProperties(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.StartTextInputWithProperties(window, props);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StartTextInputWithPropertiesRaw(
            WindowHandle window,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.StartTextInputWithPropertiesRaw(window, props);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StopHapticEffect(HapticHandle haptic, int effect) =>
            Underlying.Value!.StopHapticEffect(haptic, effect);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StopHapticEffectRaw(HapticHandle haptic, int effect) =>
            Underlying.Value!.StopHapticEffectRaw(haptic, effect);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StopHapticEffects(HapticHandle haptic) =>
            Underlying.Value!.StopHapticEffects(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StopHapticEffectsRaw(HapticHandle haptic) =>
            Underlying.Value!.StopHapticEffectsRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StopHapticRumble(HapticHandle haptic) =>
            Underlying.Value!.StopHapticRumble(haptic);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StopHapticRumbleRaw(HapticHandle haptic) =>
            Underlying.Value!.StopHapticRumbleRaw(haptic);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StopTextInput(WindowHandle window) =>
            Underlying.Value!.StopTextInput(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StopTextInputRaw(WindowHandle window) =>
            Underlying.Value!.StopTextInputRaw(window);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> StorageReady(StorageHandle storage) =>
            Underlying.Value!.StorageReady(storage);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte StorageReadyRaw(StorageHandle storage) =>
            Underlying.Value!.StorageReadyRaw(storage);

        [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid StringToGuid([NativeTypeName("const char *")] sbyte* pchGUID) =>
            Underlying.Value!.StringToGuid(pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid StringToGuid([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)StringToGuid(__dsl_pchGUID);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SurfaceHasAlternateImages(Surface* surface) =>
            Underlying.Value!.SurfaceHasAlternateImages(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasAlternateImages(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasAlternateImages(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SurfaceHasColorKey(Surface* surface) =>
            Underlying.Value!.SurfaceHasColorKey(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasColorKey(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasColorKey(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SurfaceHasRLE(Surface* surface) =>
            Underlying.Value!.SurfaceHasRLE(surface);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SurfaceHasRLE(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)SurfaceHasRLE(__dsl_surface);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> SyncWindow(WindowHandle window) =>
            Underlying.Value!.SyncWindow(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte SyncWindowRaw(WindowHandle window) =>
            Underlying.Value!.SyncWindowRaw(window);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TellIO(IOStreamHandle context) => Underlying.Value!.TellIO(context);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TextInputActive(WindowHandle window) =>
            Underlying.Value!.TextInputActive(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TextInputActiveRaw(WindowHandle window) =>
            Underlying.Value!.TextInputActiveRaw(window);

        [return: NativeTypeName("SDL_Time")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeFromWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        ) => Underlying.Value!.TimeFromWindows(dwLowDateTime, dwHighDateTime);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("bool")] byte localTime
        ) => Underlying.Value!.TimeToDateTime(ticks, dt, localTime);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("bool")] MaybeBool<byte> localTime
        )
        {
            fixed (DateTime* __dsl_dt = dt)
            {
                return (MaybeBool<byte>)(byte)TimeToDateTime(ticks, __dsl_dt, (byte)localTime);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        ) => Underlying.Value!.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        )
        {
            fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
            fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
            {
                TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryLockMutex(MutexHandle mutex) =>
            Underlying.Value!.TryLockMutex(mutex);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TryLockMutexRaw(MutexHandle mutex) =>
            Underlying.Value!.TryLockMutexRaw(mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryLockRWLockForReading(RWLockHandle rwlock) =>
            Underlying.Value!.TryLockRWLockForReading(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TryLockRWLockForReadingRaw(RWLockHandle rwlock) =>
            Underlying.Value!.TryLockRWLockForReadingRaw(rwlock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryLockRWLockForWriting(RWLockHandle rwlock) =>
            Underlying.Value!.TryLockRWLockForWriting(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TryLockRWLockForWritingRaw(RWLockHandle rwlock) =>
            Underlying.Value!.TryLockRWLockForWritingRaw(rwlock);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.TryLockSpinlock(@lock);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryLockSpinlock(
            [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
        )
        {
            fixed (int* __dsl_lock = @lock)
            {
                return (MaybeBool<byte>)(byte)TryLockSpinlock(__dsl_lock);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> TryWaitSemaphore(SemaphoreHandle sem) =>
            Underlying.Value!.TryWaitSemaphore(sem);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte TryWaitSemaphoreRaw(SemaphoreHandle sem) =>
            Underlying.Value!.TryWaitSemaphoreRaw(sem);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.UnbindAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(AudioStreamHandle* streams, int num_streams) =>
            Underlying.Value!.UnbindAudioStreams(streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(Ref<AudioStreamHandle> streams, int num_streams)
        {
            fixed (AudioStreamHandle* __dsl_streams = streams)
            {
                UnbindAudioStreams(__dsl_streams, num_streams);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnloadObject(SharedObjectHandle handle) =>
            Underlying.Value!.UnloadObject(handle);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UnlockAudioStream(AudioStreamHandle stream) =>
            Underlying.Value!.UnlockAudioStream(stream);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UnlockAudioStreamRaw(AudioStreamHandle stream) =>
            Underlying.Value!.UnlockAudioStreamRaw(stream);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockJoysticks() => Underlying.Value!.UnlockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockMutex(MutexHandle mutex) => Underlying.Value!.UnlockMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.UnlockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockRWLock(RWLockHandle rwlock) =>
            Underlying.Value!.UnlockRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.UnlockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                UnlockSpinlock(__dsl_lock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Surface* surface) =>
            Underlying.Value!.UnlockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                UnlockSurface(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(Texture* texture) =>
            Underlying.Value!.UnlockTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(Ref<Texture> texture)
        {
            fixed (Texture* __dsl_texture = texture)
            {
                UnlockTexture(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateGamepads() => Underlying.Value!.UpdateGamepads();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        ) => Underlying.Value!.UpdateHapticEffect(haptic, effect, data);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateHapticEffect(
            HapticHandle haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        )
        {
            fixed (HapticEffect* __dsl_data = data)
            {
                return (MaybeBool<byte>)(byte)UpdateHapticEffect(haptic, effect, __dsl_data);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateJoysticks() => Underlying.Value!.UpdateJoysticks();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateNVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        ) => Underlying.Value!.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateNVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        )
        {
            fixed (byte* __dsl_UVplane = UVplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateNVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_UVplane,
                        UVpitch
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateSensors() => Underlying.Value!.UpdateSensors();

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        ) => Underlying.Value!.UpdateTexture(texture, rect, pixels, pitch);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateWindowSurface(WindowHandle window) =>
            Underlying.Value!.UpdateWindowSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateWindowSurfaceRaw(WindowHandle window) =>
            Underlying.Value!.UpdateWindowSurfaceRaw(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        ) => Underlying.Value!.UpdateWindowSurfaceRects(window, rects, numrects);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateWindowSurfaceRects(
            WindowHandle window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        )
        {
            fixed (Rect* __dsl_rects = rects)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateWindowSurfaceRects(window, __dsl_rects, numrects);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte UpdateYUVTexture(
            Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        ) =>
            Underlying.Value!.UpdateYUVTexture(
                texture,
                rect,
                Yplane,
                Ypitch,
                Uplane,
                Upitch,
                Vplane,
                Vpitch
            );

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> UpdateYUVTexture(
            Ref<Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        )
        {
            fixed (byte* __dsl_Vplane = Vplane)
            fixed (byte* __dsl_Uplane = Uplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (Texture* __dsl_texture = texture)
            {
                return (MaybeBool<byte>)
                    (byte)UpdateYUVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_Uplane,
                        Upitch,
                        __dsl_Vplane,
                        Vpitch
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitCondition(ConditionHandle cond, MutexHandle mutex) =>
            Underlying.Value!.WaitCondition(cond, mutex);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitConditionTimeout(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitConditionTimeout(cond, mutex, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WaitConditionTimeoutRaw(
            ConditionHandle cond,
            MutexHandle mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitConditionTimeoutRaw(cond, mutex, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WaitEvent(Event* @event) => Underlying.Value!.WaitEvent(@event);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)WaitEvent(__dsl_event);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WaitEventTimeout(
            Event* @event,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitEventTimeout(@event, timeoutMS);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<byte>)(byte)WaitEventTimeout(__dsl_event, timeoutMS);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitSemaphore(SemaphoreHandle sem) =>
            Underlying.Value!.WaitSemaphore(sem);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WaitSemaphoreTimeout(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitSemaphoreTimeout(sem, timeoutMS);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WaitSemaphoreTimeoutRaw(
            SemaphoreHandle sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitSemaphoreTimeoutRaw(sem, timeoutMS);

        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(ThreadHandle thread, int* status) =>
            Underlying.Value!.WaitThread(thread, status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(ThreadHandle thread, Ref<int> status)
        {
            fixed (int* __dsl_status = status)
            {
                WaitThread(thread, __dsl_status);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WarpMouseGlobal(float x, float y) =>
            Underlying.Value!.WarpMouseGlobal(x, y);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WarpMouseGlobalRaw(float x, float y) =>
            Underlying.Value!.WarpMouseGlobalRaw(x, y);

        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WarpMouseInWindow(WindowHandle window, float x, float y) =>
            Underlying.Value!.WarpMouseInWindow(window, x, y);

        [return: NativeTypeName("SDL_InitFlags")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WasInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint WasInit([NativeTypeName("SDL_InitFlags")] uint flags) =>
            Underlying.Value!.WasInit(flags);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WindowHasSurface(WindowHandle window) =>
            Underlying.Value!.WindowHasSurface(window);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WindowHasSurfaceRaw(WindowHandle window) =>
            Underlying.Value!.WindowHasSurfaceRaw(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.WriteIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            IOStreamHandle context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            {
                return (nuint)WriteIO(context, __dsl_ptr, size);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS16BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.WriteS16BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS16BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.WriteS16BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS16LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.WriteS16LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS16LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.WriteS16LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS32BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => Underlying.Value!.WriteS32BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS32BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => Underlying.Value!.WriteS32BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS32LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => Underlying.Value!.WriteS32LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS32LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint32")] int value
        ) => Underlying.Value!.WriteS32LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS64BE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.WriteS64BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS64BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.WriteS64BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS64LE(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.WriteS64LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS64LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.WriteS64LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteS8(
            IOStreamHandle dst,
            [NativeTypeName("Sint8")] sbyte value
        ) => Underlying.Value!.WriteS8(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteS8Raw(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
            Underlying.Value!.WriteS8Raw(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        ) => Underlying.Value!.WriteStorageFile(storage, path, source, length);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteStorageFile(
            StorageHandle storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_source = source)
            fixed (sbyte* __dsl_path = path)
            {
                return (MaybeBool<byte>)
                    (byte)WriteStorageFile(storage, __dsl_path, __dsl_source, length);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.WriteSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)(byte)WriteSurfacePixel(__dsl_surface, x, y, r, g, b, a);
            }
        }

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteSurfacePixelFloat(
            Surface* surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        ) => Underlying.Value!.WriteSurfacePixelFloat(surface, x, y, r, g, b, a);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteSurfacePixelFloat(
            Ref<Surface> surface,
            int x,
            int y,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<byte>)
                    (byte)WriteSurfacePixelFloat(__dsl_surface, x, y, r, g, b, a);
            }
        }

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU16BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => Underlying.Value!.WriteU16BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU16BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => Underlying.Value!.WriteU16BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU16LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => Underlying.Value!.WriteU16LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU16LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint16")] ushort value
        ) => Underlying.Value!.WriteU16LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU32BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => Underlying.Value!.WriteU32BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU32BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => Underlying.Value!.WriteU32BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU32LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => Underlying.Value!.WriteU32LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU32LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint32")] uint value
        ) => Underlying.Value!.WriteU32LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU64BE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => Underlying.Value!.WriteU64BE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU64BERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => Underlying.Value!.WriteU64BERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU64LE(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => Underlying.Value!.WriteU64LE(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU64LERaw(
            IOStreamHandle dst,
            [NativeTypeName("Uint64")] ulong value
        ) => Underlying.Value!.WriteU64LERaw(dst, value);

        [return: NativeTypeName("bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<byte> WriteU8(
            IOStreamHandle dst,
            [NativeTypeName("Uint8")] byte value
        ) => Underlying.Value!.WriteU8(dst, value);

        [return: NativeTypeName("bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte WriteU8Raw(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
            Underlying.Value!.WriteU8Raw(dst, value);
    }

    [NativeTypeName("#define SDL_ASSERT_LEVEL 2")]
    public const int AssertLevel = 2;

    [NativeTypeName("#define SDL_FILE __FILE__")]
    public static Utf8String File =>
        "/Users/dylan/Documents/Silk.NET3/eng/silktouch/sdl/SDL3/sdl-SDL.h"u8;

    [NativeTypeName("#define SDL_LINE __LINE__")]
    public const int Line = 7;

    [NativeTypeName("#define SDL_NULL_WHILE_LOOP_CONDITION (0)")]
    public const int NullWhileLoopCondition = (0);

    [NativeTypeName(
        "#define SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER \"SDL.thread.create.entry_function\""
    )]
    public static Utf8String PropThreadCreateEntryFunctionPointer =>
        "SDL.thread.create.entry_function"u8;

    [NativeTypeName("#define SDL_PROP_THREAD_CREATE_NAME_STRING \"SDL.thread.create.name\"")]
    public static Utf8String PropThreadCreateNameString => "SDL.thread.create.name"u8;

    [NativeTypeName(
        "#define SDL_PROP_THREAD_CREATE_USERDATA_POINTER \"SDL.thread.create.userdata\""
    )]
    public static Utf8String PropThreadCreateUserdataPointer => "SDL.thread.create.userdata"u8;

    [NativeTypeName(
        "#define SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER \"SDL.thread.create.stacksize\""
    )]
    public static Utf8String PropThreadCreateStacksizeNumber => "SDL.thread.create.stacksize"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER \"SDL.iostream.windows.handle\""
    )]
    public static Utf8String PropIostreamWindowsHandlePointer => "SDL.iostream.windows.handle"u8;

    [NativeTypeName("#define SDL_PROP_IOSTREAM_STDIO_FILE_POINTER \"SDL.iostream.stdio.file\"")]
    public static Utf8String PropIostreamStdioFilePointer => "SDL.iostream.stdio.file"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER \"SDL.iostream.file_descriptor\""
    )]
    public static Utf8String PropIostreamFileDescriptorNumber => "SDL.iostream.file_descriptor"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER \"SDL.iostream.android.aasset\""
    )]
    public static Utf8String PropIostreamAndroidAassetPointer => "SDL.iostream.android.aasset"u8;

    [NativeTypeName("#define SDL_PROP_IOSTREAM_MEMORY_POINTER \"SDL.iostream.memory.base\"")]
    public static Utf8String PropIostreamMemoryPointer => "SDL.iostream.memory.base"u8;

    [NativeTypeName("#define SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER \"SDL.iostream.memory.size\"")]
    public static Utf8String PropIostreamMemorySizeNumber => "SDL.iostream.memory.size"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER \"SDL.iostream.dynamic.memory\""
    )]
    public static Utf8String PropIostreamDynamicMemoryPointer => "SDL.iostream.dynamic.memory"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER \"SDL.iostream.dynamic.chunksize\""
    )]
    public static Utf8String PropIostreamDynamicChunksizeNumber =>
        "SDL.iostream.dynamic.chunksize"u8;

    [NativeTypeName("#define SDL_AUDIO_MASK_BITSIZE (0xFFu)")]
    public const uint AudioMaskBitsize = (0xFFU);

    [NativeTypeName("#define SDL_AUDIO_MASK_FLOAT (1u<<8)")]
    public const uint AudioMaskFloat = (1U << 8);

    [NativeTypeName("#define SDL_AUDIO_MASK_BIG_ENDIAN (1u<<12)")]
    public const uint AudioMaskBigEndian = (1U << 12);

    [NativeTypeName("#define SDL_AUDIO_MASK_SIGNED (1u<<15)")]
    public const uint AudioMaskSigned = (1U << 15);

    [NativeTypeName("#define SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK ((SDL_AudioDeviceID) 0xFFFFFFFFu)")]
    public const uint AudioDeviceDefaultPlayback = ((uint)(0xFFFFFFFFU));

    [NativeTypeName("#define SDL_AUDIO_DEVICE_DEFAULT_RECORDING ((SDL_AudioDeviceID) 0xFFFFFFFEu)")]
    public const uint AudioDeviceDefaultRecording = ((uint)(0xFFFFFFFEU));

    [NativeTypeName("#define SDL_ALPHA_OPAQUE 255")]
    public const int AlphaOpaque = 255;

    [NativeTypeName("#define SDL_ALPHA_OPAQUE_FLOAT 1.0f")]
    public const float AlphaOpaqueFloat = 1.0f;

    [NativeTypeName("#define SDL_ALPHA_TRANSPARENT 0")]
    public const int AlphaTransparent = 0;

    [NativeTypeName("#define SDL_ALPHA_TRANSPARENT_FLOAT 0.0f")]
    public const float AlphaTransparentFloat = 0.0f;

    [NativeTypeName("#define SDL_SURFACE_PREALLOCATED 0x00000001u")]
    public const uint SurfacePreallocated = 0x00000001U;

    [NativeTypeName("#define SDL_SURFACE_LOCK_NEEDED 0x00000002u")]
    public const uint SurfaceLockNeeded = 0x00000002U;

    [NativeTypeName("#define SDL_SURFACE_LOCKED 0x00000004u")]
    public const uint SurfaceLocked = 0x00000004U;

    [NativeTypeName("#define SDL_SURFACE_SIMD_ALIGNED 0x00000008u")]
    public const uint SurfaceSimdAligned = 0x00000008U;

    [NativeTypeName(
        "#define SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT \"SDL.surface.SDR_white_point\""
    )]
    public static Utf8String PropSurfaceSdrWhitePointFloat => "SDL.surface.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT \"SDL.surface.HDR_headroom\"")]
    public static Utf8String PropSurfaceHdrHeadroomFloat => "SDL.surface.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING \"SDL.surface.tonemap\"")]
    public static Utf8String PropSurfaceTonemapOperatorString => "SDL.surface.tonemap"u8;

    [NativeTypeName("#define SDL_CACHELINE_SIZE 128")]
    public const int CachelineSize = 128;

    [NativeTypeName(
        "#define SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER \"SDL.video.wayland.wl_display\""
    )]
    public static Utf8String PropGlobalVideoWaylandWlDisplayPointer =>
        "SDL.video.wayland.wl_display"u8;

    [NativeTypeName("#define SDL_WINDOW_FULLSCREEN SDL_UINT64_C(0x0000000000000001)")]
    public const ulong WindowFullscreen = (0x0000000000000001UL);

    [NativeTypeName("#define SDL_WINDOW_OPENGL SDL_UINT64_C(0x0000000000000002)")]
    public const ulong WindowOpengl = (0x0000000000000002UL);

    [NativeTypeName("#define SDL_WINDOW_OCCLUDED SDL_UINT64_C(0x0000000000000004)")]
    public const ulong WindowOccluded = (0x0000000000000004UL);

    [NativeTypeName("#define SDL_WINDOW_HIDDEN SDL_UINT64_C(0x0000000000000008)")]
    public const ulong WindowHidden = (0x0000000000000008UL);

    [NativeTypeName("#define SDL_WINDOW_BORDERLESS SDL_UINT64_C(0x0000000000000010)")]
    public const ulong WindowBorderless = (0x0000000000000010UL);

    [NativeTypeName("#define SDL_WINDOW_RESIZABLE SDL_UINT64_C(0x0000000000000020)")]
    public const ulong WindowResizable = (0x0000000000000020UL);

    [NativeTypeName("#define SDL_WINDOW_MINIMIZED SDL_UINT64_C(0x0000000000000040)")]
    public const ulong WindowMinimized = (0x0000000000000040UL);

    [NativeTypeName("#define SDL_WINDOW_MAXIMIZED SDL_UINT64_C(0x0000000000000080)")]
    public const ulong WindowMaximized = (0x0000000000000080UL);

    [NativeTypeName("#define SDL_WINDOW_MOUSE_GRABBED SDL_UINT64_C(0x0000000000000100)")]
    public const ulong WindowMouseGrabbed = (0x0000000000000100UL);

    [NativeTypeName("#define SDL_WINDOW_INPUT_FOCUS SDL_UINT64_C(0x0000000000000200)")]
    public const ulong WindowInputFocus = (0x0000000000000200UL);

    [NativeTypeName("#define SDL_WINDOW_MOUSE_FOCUS SDL_UINT64_C(0x0000000000000400)")]
    public const ulong WindowMouseFocus = (0x0000000000000400UL);

    [NativeTypeName("#define SDL_WINDOW_EXTERNAL SDL_UINT64_C(0x0000000000000800)")]
    public const ulong WindowExternal = (0x0000000000000800UL);

    [NativeTypeName("#define SDL_WINDOW_MODAL SDL_UINT64_C(0x0000000000001000)")]
    public const ulong WindowModal = (0x0000000000001000UL);

    [NativeTypeName("#define SDL_WINDOW_HIGH_PIXEL_DENSITY SDL_UINT64_C(0x0000000000002000)")]
    public const ulong WindowHighPixelDensity = (0x0000000000002000UL);

    [NativeTypeName("#define SDL_WINDOW_MOUSE_CAPTURE SDL_UINT64_C(0x0000000000004000)")]
    public const ulong WindowMouseCapture = (0x0000000000004000UL);

    [NativeTypeName("#define SDL_WINDOW_MOUSE_RELATIVE_MODE SDL_UINT64_C(0x0000000000008000)")]
    public const ulong WindowMouseRelativeMode = (0x0000000000008000UL);

    [NativeTypeName("#define SDL_WINDOW_ALWAYS_ON_TOP SDL_UINT64_C(0x0000000000010000)")]
    public const ulong WindowAlwaysOnTop = (0x0000000000010000UL);

    [NativeTypeName("#define SDL_WINDOW_UTILITY SDL_UINT64_C(0x0000000000020000)")]
    public const ulong WindowUtility = (0x0000000000020000UL);

    [NativeTypeName("#define SDL_WINDOW_TOOLTIP SDL_UINT64_C(0x0000000000040000)")]
    public const ulong WindowTooltip = (0x0000000000040000UL);

    [NativeTypeName("#define SDL_WINDOW_POPUP_MENU SDL_UINT64_C(0x0000000000080000)")]
    public const ulong WindowPopupMenu = (0x0000000000080000UL);

    [NativeTypeName("#define SDL_WINDOW_KEYBOARD_GRABBED SDL_UINT64_C(0x0000000000100000)")]
    public const ulong WindowKeyboardGrabbed = (0x0000000000100000UL);

    [NativeTypeName("#define SDL_WINDOW_VULKAN SDL_UINT64_C(0x0000000010000000)")]
    public const ulong WindowVulkan = (0x0000000010000000UL);

    [NativeTypeName("#define SDL_WINDOW_METAL SDL_UINT64_C(0x0000000020000000)")]
    public const ulong WindowMetal = (0x0000000020000000UL);

    [NativeTypeName("#define SDL_WINDOW_TRANSPARENT SDL_UINT64_C(0x0000000040000000)")]
    public const ulong WindowTransparent = (0x0000000040000000UL);

    [NativeTypeName("#define SDL_WINDOW_NOT_FOCUSABLE SDL_UINT64_C(0x0000000080000000)")]
    public const ulong WindowNotFocusable = (0x0000000080000000UL);

    [NativeTypeName("#define SDL_WINDOWPOS_UNDEFINED_MASK 0x1FFF0000u")]
    public const uint WindowposUndefinedMask = 0x1FFF0000U;

    [NativeTypeName("#define SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)")]
    public const uint WindowposUndefined = (0x1FFF0000U | (0));

    [NativeTypeName("#define SDL_WINDOWPOS_CENTERED_MASK 0x2FFF0000u")]
    public const uint WindowposCenteredMask = 0x2FFF0000U;

    [NativeTypeName("#define SDL_WINDOWPOS_CENTERED SDL_WINDOWPOS_CENTERED_DISPLAY(0)")]
    public const uint WindowposCentered = (0x2FFF0000U | (0));

    [NativeTypeName("#define SDL_GL_CONTEXT_PROFILE_CORE 0x0001")]
    public const int GlContextProfileCore = 0x0001;

    [NativeTypeName("#define SDL_GL_CONTEXT_PROFILE_COMPATIBILITY 0x0002")]
    public const int GlContextProfileCompatibility = 0x0002;

    [NativeTypeName("#define SDL_GL_CONTEXT_PROFILE_ES 0x0004")]
    public const int GlContextProfileEs = 0x0004;

    [NativeTypeName("#define SDL_GL_CONTEXT_DEBUG_FLAG 0x0001")]
    public const int GlContextDebugFlag = 0x0001;

    [NativeTypeName("#define SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG 0x0002")]
    public const int GlContextForwardCompatibleFlag = 0x0002;

    [NativeTypeName("#define SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG 0x0004")]
    public const int GlContextRobustAccessFlag = 0x0004;

    [NativeTypeName("#define SDL_GL_CONTEXT_RESET_ISOLATION_FLAG 0x0008")]
    public const int GlContextResetIsolationFlag = 0x0008;

    [NativeTypeName("#define SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE 0x0000")]
    public const int GlContextReleaseBehaviorNone = 0x0000;

    [NativeTypeName("#define SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x0001")]
    public const int GlContextReleaseBehaviorFlush = 0x0001;

    [NativeTypeName("#define SDL_GL_CONTEXT_RESET_NO_NOTIFICATION 0x0000")]
    public const int GlContextResetNoNotification = 0x0000;

    [NativeTypeName("#define SDL_GL_CONTEXT_RESET_LOSE_CONTEXT 0x0001")]
    public const int GlContextResetLoseContext = 0x0001;

    [NativeTypeName("#define SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN \"SDL.display.HDR_enabled\"")]
    public static Utf8String PropDisplayHdrEnabledBoolean => "SDL.display.HDR_enabled"u8;

    [NativeTypeName(
        "#define SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER \"SDL.display.KMSDRM.panel_orientation\""
    )]
    public static Utf8String PropDisplayKmsdrmPanelOrientationNumber =>
        "SDL.display.KMSDRM.panel_orientation"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN \"SDL.window.create.always_on_top\""
    )]
    public static Utf8String PropWindowCreateAlwaysOnTopBoolean =>
        "SDL.window.create.always_on_top"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN \"SDL.window.create.borderless\""
    )]
    public static Utf8String PropWindowCreateBorderlessBoolean => "SDL.window.create.borderless"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN \"SDL.window.create.focusable\""
    )]
    public static Utf8String PropWindowCreateFocusableBoolean => "SDL.window.create.focusable"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN \"SDL.window.create.external_graphics_context\""
    )]
    public static Utf8String PropWindowCreateExternalGraphicsContextBoolean =>
        "SDL.window.create.external_graphics_context"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER \"SDL.window.create.flags\"")]
    public static Utf8String PropWindowCreateFlagsNumber => "SDL.window.create.flags"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN \"SDL.window.create.fullscreen\""
    )]
    public static Utf8String PropWindowCreateFullscreenBoolean => "SDL.window.create.fullscreen"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER \"SDL.window.create.height\"")]
    public static Utf8String PropWindowCreateHeightNumber => "SDL.window.create.height"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN \"SDL.window.create.hidden\"")]
    public static Utf8String PropWindowCreateHiddenBoolean => "SDL.window.create.hidden"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN \"SDL.window.create.high_pixel_density\""
    )]
    public static Utf8String PropWindowCreateHighPixelDensityBoolean =>
        "SDL.window.create.high_pixel_density"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN \"SDL.window.create.maximized\""
    )]
    public static Utf8String PropWindowCreateMaximizedBoolean => "SDL.window.create.maximized"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN \"SDL.window.create.menu\"")]
    public static Utf8String PropWindowCreateMenuBoolean => "SDL.window.create.menu"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN \"SDL.window.create.metal\"")]
    public static Utf8String PropWindowCreateMetalBoolean => "SDL.window.create.metal"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN \"SDL.window.create.minimized\""
    )]
    public static Utf8String PropWindowCreateMinimizedBoolean => "SDL.window.create.minimized"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN \"SDL.window.create.modal\"")]
    public static Utf8String PropWindowCreateModalBoolean => "SDL.window.create.modal"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN \"SDL.window.create.mouse_grabbed\""
    )]
    public static Utf8String PropWindowCreateMouseGrabbedBoolean =>
        "SDL.window.create.mouse_grabbed"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN \"SDL.window.create.opengl\"")]
    public static Utf8String PropWindowCreateOpenglBoolean => "SDL.window.create.opengl"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_PARENT_POINTER \"SDL.window.create.parent\"")]
    public static Utf8String PropWindowCreateParentPointer => "SDL.window.create.parent"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN \"SDL.window.create.resizable\""
    )]
    public static Utf8String PropWindowCreateResizableBoolean => "SDL.window.create.resizable"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_TITLE_STRING \"SDL.window.create.title\"")]
    public static Utf8String PropWindowCreateTitleString => "SDL.window.create.title"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN \"SDL.window.create.transparent\""
    )]
    public static Utf8String PropWindowCreateTransparentBoolean =>
        "SDL.window.create.transparent"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN \"SDL.window.create.tooltip\"")]
    public static Utf8String PropWindowCreateTooltipBoolean => "SDL.window.create.tooltip"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN \"SDL.window.create.utility\"")]
    public static Utf8String PropWindowCreateUtilityBoolean => "SDL.window.create.utility"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN \"SDL.window.create.vulkan\"")]
    public static Utf8String PropWindowCreateVulkanBoolean => "SDL.window.create.vulkan"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER \"SDL.window.create.width\"")]
    public static Utf8String PropWindowCreateWidthNumber => "SDL.window.create.width"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_X_NUMBER \"SDL.window.create.x\"")]
    public static Utf8String PropWindowCreateXNumber => "SDL.window.create.x"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_Y_NUMBER \"SDL.window.create.y\"")]
    public static Utf8String PropWindowCreateYNumber => "SDL.window.create.y"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER \"SDL.window.create.cocoa.window\""
    )]
    public static Utf8String PropWindowCreateCocoaWindowPointer =>
        "SDL.window.create.cocoa.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER \"SDL.window.create.cocoa.view\""
    )]
    public static Utf8String PropWindowCreateCocoaViewPointer => "SDL.window.create.cocoa.view"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN \"SDL.window.create.wayland.surface_role_custom\""
    )]
    public static Utf8String PropWindowCreateWaylandSurfaceRoleCustomBoolean =>
        "SDL.window.create.wayland.surface_role_custom"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN \"SDL.window.create.wayland.create_egl_window\""
    )]
    public static Utf8String PropWindowCreateWaylandCreateEglWindowBoolean =>
        "SDL.window.create.wayland.create_egl_window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER \"SDL.window.create.wayland.wl_surface\""
    )]
    public static Utf8String PropWindowCreateWaylandWlSurfacePointer =>
        "SDL.window.create.wayland.wl_surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER \"SDL.window.create.win32.hwnd\""
    )]
    public static Utf8String PropWindowCreateWin32HwndPointer => "SDL.window.create.win32.hwnd"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER \"SDL.window.create.win32.pixel_format_hwnd\""
    )]
    public static Utf8String PropWindowCreateWin32PixelFormatHwndPointer =>
        "SDL.window.create.win32.pixel_format_hwnd"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER \"SDL.window.create.x11.window\""
    )]
    public static Utf8String PropWindowCreateX11WindowNumber => "SDL.window.create.x11.window"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_SHAPE_POINTER \"SDL.window.shape\"")]
    public static Utf8String PropWindowShapePointer => "SDL.window.shape"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN \"SDL.window.HDR_enabled\"")]
    public static Utf8String PropWindowHdrEnabledBoolean => "SDL.window.HDR_enabled"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT \"SDL.window.SDR_white_level\"")]
    public static Utf8String PropWindowSdrWhiteLevelFloat => "SDL.window.SDR_white_level"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT \"SDL.window.HDR_headroom\"")]
    public static Utf8String PropWindowHdrHeadroomFloat => "SDL.window.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER \"SDL.window.android.window\"")]
    public static Utf8String PropWindowAndroidWindowPointer => "SDL.window.android.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER \"SDL.window.android.surface\""
    )]
    public static Utf8String PropWindowAndroidSurfacePointer => "SDL.window.android.surface"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER \"SDL.window.uikit.window\"")]
    public static Utf8String PropWindowUikitWindowPointer => "SDL.window.uikit.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER \"SDL.window.uikit.metal_view_tag\""
    )]
    public static Utf8String PropWindowUikitMetalViewTagNumber =>
        "SDL.window.uikit.metal_view_tag"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER \"SDL.window.uikit.opengl.framebuffer\""
    )]
    public static Utf8String PropWindowUikitOpenglFramebufferNumber =>
        "SDL.window.uikit.opengl.framebuffer"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER \"SDL.window.uikit.opengl.renderbuffer\""
    )]
    public static Utf8String PropWindowUikitOpenglRenderbufferNumber =>
        "SDL.window.uikit.opengl.renderbuffer"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER \"SDL.window.uikit.opengl.resolve_framebuffer\""
    )]
    public static Utf8String PropWindowUikitOpenglResolveFramebufferNumber =>
        "SDL.window.uikit.opengl.resolve_framebuffer"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER \"SDL.window.kmsdrm.dev_index\""
    )]
    public static Utf8String PropWindowKmsdrmDeviceIndexNumber => "SDL.window.kmsdrm.dev_index"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER \"SDL.window.kmsdrm.drm_fd\"")]
    public static Utf8String PropWindowKmsdrmDrmFdNumber => "SDL.window.kmsdrm.drm_fd"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER \"SDL.window.kmsdrm.gbm_dev\""
    )]
    public static Utf8String PropWindowKmsdrmGbmDevicePointer => "SDL.window.kmsdrm.gbm_dev"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_COCOA_WINDOW_POINTER \"SDL.window.cocoa.window\"")]
    public static Utf8String PropWindowCocoaWindowPointer => "SDL.window.cocoa.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER \"SDL.window.cocoa.metal_view_tag\""
    )]
    public static Utf8String PropWindowCocoaMetalViewTagNumber =>
        "SDL.window.cocoa.metal_view_tag"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_OPENVR_OVERLAY_ID \"SDL.window.openvr.overlay_id\"")]
    public static Utf8String PropWindowOpenvrOverlayId => "SDL.window.openvr.overlay_id"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER \"SDL.window.vivante.display\""
    )]
    public static Utf8String PropWindowVivanteDisplayPointer => "SDL.window.vivante.display"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER \"SDL.window.vivante.window\"")]
    public static Utf8String PropWindowVivanteWindowPointer => "SDL.window.vivante.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER \"SDL.window.vivante.surface\""
    )]
    public static Utf8String PropWindowVivanteSurfacePointer => "SDL.window.vivante.surface"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_HWND_POINTER \"SDL.window.win32.hwnd\"")]
    public static Utf8String PropWindowWin32HwndPointer => "SDL.window.win32.hwnd"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_HDC_POINTER \"SDL.window.win32.hdc\"")]
    public static Utf8String PropWindowWin32HdcPointer => "SDL.window.win32.hdc"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER \"SDL.window.win32.instance\"")]
    public static Utf8String PropWindowWin32InstancePointer => "SDL.window.win32.instance"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER \"SDL.window.wayland.display\""
    )]
    public static Utf8String PropWindowWaylandDisplayPointer => "SDL.window.wayland.display"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER \"SDL.window.wayland.surface\""
    )]
    public static Utf8String PropWindowWaylandSurfacePointer => "SDL.window.wayland.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER \"SDL.window.wayland.egl_window\""
    )]
    public static Utf8String PropWindowWaylandEglWindowPointer => "SDL.window.wayland.egl_window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER \"SDL.window.wayland.xdg_surface\""
    )]
    public static Utf8String PropWindowWaylandXdgSurfacePointer =>
        "SDL.window.wayland.xdg_surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER \"SDL.window.wayland.xdg_toplevel\""
    )]
    public static Utf8String PropWindowWaylandXdgToplevelPointer =>
        "SDL.window.wayland.xdg_toplevel"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING \"SDL.window.wayland.xdg_toplevel_export_handle\""
    )]
    public static Utf8String PropWindowWaylandXdgToplevelExportHandleString =>
        "SDL.window.wayland.xdg_toplevel_export_handle"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER \"SDL.window.wayland.xdg_popup\""
    )]
    public static Utf8String PropWindowWaylandXdgPopupPointer => "SDL.window.wayland.xdg_popup"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER \"SDL.window.wayland.xdg_positioner\""
    )]
    public static Utf8String PropWindowWaylandXdgPositionerPointer =>
        "SDL.window.wayland.xdg_positioner"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_DISPLAY_POINTER \"SDL.window.x11.display\"")]
    public static Utf8String PropWindowX11DisplayPointer => "SDL.window.x11.display"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_SCREEN_NUMBER \"SDL.window.x11.screen\"")]
    public static Utf8String PropWindowX11ScreenNumber => "SDL.window.x11.screen"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_WINDOW_NUMBER \"SDL.window.x11.window\"")]
    public static Utf8String PropWindowX11WindowNumber => "SDL.window.x11.window"u8;

    [NativeTypeName("#define SDL_WINDOW_SURFACE_VSYNC_DISABLED 0")]
    public const int WindowSurfaceVsyncDisabled = 0;

    [NativeTypeName("#define SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE (-1)")]
    public const int WindowSurfaceVsyncAdaptive = (-1);

    [NativeTypeName("#define SDL_STANDARD_GRAVITY 9.80665f")]
    public const float StandardGravity = 9.80665f;

    [NativeTypeName("#define SDL_JOYSTICK_AXIS_MAX 32767")]
    public const int JoystickAxisMax = 32767;

    [NativeTypeName("#define SDL_JOYSTICK_AXIS_MIN -32768")]
    public const int JoystickAxisMin = -32768;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN \"SDL.joystick.cap.mono_led\"")]
    public static Utf8String PropJoystickCapMonoLedBoolean => "SDL.joystick.cap.mono_led"u8;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN \"SDL.joystick.cap.rgb_led\"")]
    public static Utf8String PropJoystickCapRgbLedBoolean => "SDL.joystick.cap.rgb_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN \"SDL.joystick.cap.player_led\""
    )]
    public static Utf8String PropJoystickCapPlayerLedBoolean => "SDL.joystick.cap.player_led"u8;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN \"SDL.joystick.cap.rumble\"")]
    public static Utf8String PropJoystickCapRumbleBoolean => "SDL.joystick.cap.rumble"u8;

    [NativeTypeName(
        "#define SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN \"SDL.joystick.cap.trigger_rumble\""
    )]
    public static Utf8String PropJoystickCapTriggerRumbleBoolean =>
        "SDL.joystick.cap.trigger_rumble"u8;

    [NativeTypeName("#define SDL_HAT_CENTERED 0x00u")]
    public const uint HatCentered = 0x00U;

    [NativeTypeName("#define SDL_HAT_UP 0x01u")]
    public const uint HatUp = 0x01U;

    [NativeTypeName("#define SDL_HAT_RIGHT 0x02u")]
    public const uint HatRight = 0x02U;

    [NativeTypeName("#define SDL_HAT_DOWN 0x04u")]
    public const uint HatDown = 0x04U;

    [NativeTypeName("#define SDL_HAT_LEFT 0x08u")]
    public const uint HatLeft = 0x08U;

    [NativeTypeName("#define SDL_HAT_RIGHTUP (SDL_HAT_RIGHT|SDL_HAT_UP)")]
    public const uint HatRightup = (0x02U | 0x01U);

    [NativeTypeName("#define SDL_HAT_RIGHTDOWN (SDL_HAT_RIGHT|SDL_HAT_DOWN)")]
    public const uint HatRightdown = (0x02U | 0x04U);

    [NativeTypeName("#define SDL_HAT_LEFTUP (SDL_HAT_LEFT|SDL_HAT_UP)")]
    public const uint HatLeftup = (0x08U | 0x01U);

    [NativeTypeName("#define SDL_HAT_LEFTDOWN (SDL_HAT_LEFT|SDL_HAT_DOWN)")]
    public const uint HatLeftdown = (0x08U | 0x04U);

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN"
    )]
    public static Utf8String PropGamepadCapMonoLedBoolean => "SDL.joystick.cap.mono_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN"
    )]
    public static Utf8String PropGamepadCapRgbLedBoolean => "SDL.joystick.cap.rgb_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN"
    )]
    public static Utf8String PropGamepadCapPlayerLedBoolean => "SDL.joystick.cap.player_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN"
    )]
    public static Utf8String PropGamepadCapRumbleBoolean => "SDL.joystick.cap.rumble"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN"
    )]
    public static Utf8String PropGamepadCapTriggerRumbleBoolean =>
        "SDL.joystick.cap.trigger_rumble"u8;

    [NativeTypeName("#define SDLK_SCANCODE_MASK (1u<<30)")]
    public const uint KScancodeMask = (1U << 30);

    [NativeTypeName("#define SDLK_UNKNOWN 0x00000000u")]
    public const uint KUnknown = 0x00000000U;

    [NativeTypeName("#define SDLK_RETURN 0x0000000du")]
    public const uint KReturn = 0x0000000dU;

    [NativeTypeName("#define SDLK_ESCAPE 0x0000001bu")]
    public const uint KEscape = 0x0000001bU;

    [NativeTypeName("#define SDLK_BACKSPACE 0x00000008u")]
    public const uint KBackspace = 0x00000008U;

    [NativeTypeName("#define SDLK_TAB 0x00000009u")]
    public const uint KTab = 0x00000009U;

    [NativeTypeName("#define SDLK_SPACE 0x00000020u")]
    public const uint KSpace = 0x00000020U;

    [NativeTypeName("#define SDLK_EXCLAIM 0x00000021u")]
    public const uint KExclaim = 0x00000021U;

    [NativeTypeName("#define SDLK_DBLAPOSTROPHE 0x00000022u")]
    public const uint KDblapostrophe = 0x00000022U;

    [NativeTypeName("#define SDLK_HASH 0x00000023u")]
    public const uint KHash = 0x00000023U;

    [NativeTypeName("#define SDLK_DOLLAR 0x00000024u")]
    public const uint KDollar = 0x00000024U;

    [NativeTypeName("#define SDLK_PERCENT 0x00000025u")]
    public const uint KPercent = 0x00000025U;

    [NativeTypeName("#define SDLK_AMPERSAND 0x00000026u")]
    public const uint KAmpersand = 0x00000026U;

    [NativeTypeName("#define SDLK_APOSTROPHE 0x00000027u")]
    public const uint KApostrophe = 0x00000027U;

    [NativeTypeName("#define SDLK_LEFTPAREN 0x00000028u")]
    public const uint KLeftparen = 0x00000028U;

    [NativeTypeName("#define SDLK_RIGHTPAREN 0x00000029u")]
    public const uint KRightparen = 0x00000029U;

    [NativeTypeName("#define SDLK_ASTERISK 0x0000002au")]
    public const uint KAsterisk = 0x0000002aU;

    [NativeTypeName("#define SDLK_PLUS 0x0000002bu")]
    public const uint KPlus = 0x0000002bU;

    [NativeTypeName("#define SDLK_COMMA 0x0000002cu")]
    public const uint KComma = 0x0000002cU;

    [NativeTypeName("#define SDLK_MINUS 0x0000002du")]
    public const uint KMinus = 0x0000002dU;

    [NativeTypeName("#define SDLK_PERIOD 0x0000002eu")]
    public const uint KPeriod = 0x0000002eU;

    [NativeTypeName("#define SDLK_SLASH 0x0000002fu")]
    public const uint KSlash = 0x0000002fU;

    [NativeTypeName("#define SDLK_0 0x00000030u")]
    public const uint K0 = 0x00000030U;

    [NativeTypeName("#define SDLK_1 0x00000031u")]
    public const uint K1 = 0x00000031U;

    [NativeTypeName("#define SDLK_2 0x00000032u")]
    public const uint K2 = 0x00000032U;

    [NativeTypeName("#define SDLK_3 0x00000033u")]
    public const uint K3 = 0x00000033U;

    [NativeTypeName("#define SDLK_4 0x00000034u")]
    public const uint K4 = 0x00000034U;

    [NativeTypeName("#define SDLK_5 0x00000035u")]
    public const uint K5 = 0x00000035U;

    [NativeTypeName("#define SDLK_6 0x00000036u")]
    public const uint K6 = 0x00000036U;

    [NativeTypeName("#define SDLK_7 0x00000037u")]
    public const uint K7 = 0x00000037U;

    [NativeTypeName("#define SDLK_8 0x00000038u")]
    public const uint K8 = 0x00000038U;

    [NativeTypeName("#define SDLK_9 0x00000039u")]
    public const uint K9 = 0x00000039U;

    [NativeTypeName("#define SDLK_COLON 0x0000003au")]
    public const uint KColon = 0x0000003aU;

    [NativeTypeName("#define SDLK_SEMICOLON 0x0000003bu")]
    public const uint KSemicolon = 0x0000003bU;

    [NativeTypeName("#define SDLK_LESS 0x0000003cu")]
    public const uint KLess = 0x0000003cU;

    [NativeTypeName("#define SDLK_EQUALS 0x0000003du")]
    public const uint KEquals = 0x0000003dU;

    [NativeTypeName("#define SDLK_GREATER 0x0000003eu")]
    public const uint KGreater = 0x0000003eU;

    [NativeTypeName("#define SDLK_QUESTION 0x0000003fu")]
    public const uint KQuestion = 0x0000003fU;

    [NativeTypeName("#define SDLK_AT 0x00000040u")]
    public const uint KAt = 0x00000040U;

    [NativeTypeName("#define SDLK_LEFTBRACKET 0x0000005bu")]
    public const uint KLeftbracket = 0x0000005bU;

    [NativeTypeName("#define SDLK_BACKSLASH 0x0000005cu")]
    public const uint KBackslash = 0x0000005cU;

    [NativeTypeName("#define SDLK_RIGHTBRACKET 0x0000005du")]
    public const uint KRightbracket = 0x0000005dU;

    [NativeTypeName("#define SDLK_CARET 0x0000005eu")]
    public const uint KCaret = 0x0000005eU;

    [NativeTypeName("#define SDLK_UNDERSCORE 0x0000005fu")]
    public const uint KUnderscore = 0x0000005fU;

    [NativeTypeName("#define SDLK_GRAVE 0x00000060u")]
    public const uint KGrave = 0x00000060U;

    [NativeTypeName("#define SDLK_A 0x00000061u")]
    public const uint Ka = 0x00000061U;

    [NativeTypeName("#define SDLK_B 0x00000062u")]
    public const uint Kb = 0x00000062U;

    [NativeTypeName("#define SDLK_C 0x00000063u")]
    public const uint Kc = 0x00000063U;

    [NativeTypeName("#define SDLK_D 0x00000064u")]
    public const uint Kd = 0x00000064U;

    [NativeTypeName("#define SDLK_E 0x00000065u")]
    public const uint Ke = 0x00000065U;

    [NativeTypeName("#define SDLK_F 0x00000066u")]
    public const uint Kf = 0x00000066U;

    [NativeTypeName("#define SDLK_G 0x00000067u")]
    public const uint Kg = 0x00000067U;

    [NativeTypeName("#define SDLK_H 0x00000068u")]
    public const uint Kh = 0x00000068U;

    [NativeTypeName("#define SDLK_I 0x00000069u")]
    public const uint Ki = 0x00000069U;

    [NativeTypeName("#define SDLK_J 0x0000006au")]
    public const uint Kj = 0x0000006aU;

    [NativeTypeName("#define SDLK_K 0x0000006bu")]
    public const uint Kk = 0x0000006bU;

    [NativeTypeName("#define SDLK_L 0x0000006cu")]
    public const uint Kl = 0x0000006cU;

    [NativeTypeName("#define SDLK_M 0x0000006du")]
    public const uint Km = 0x0000006dU;

    [NativeTypeName("#define SDLK_N 0x0000006eu")]
    public const uint Kn = 0x0000006eU;

    [NativeTypeName("#define SDLK_O 0x0000006fu")]
    public const uint Ko = 0x0000006fU;

    [NativeTypeName("#define SDLK_P 0x00000070u")]
    public const uint Kp = 0x00000070U;

    [NativeTypeName("#define SDLK_Q 0x00000071u")]
    public const uint Kq = 0x00000071U;

    [NativeTypeName("#define SDLK_R 0x00000072u")]
    public const uint Kr = 0x00000072U;

    [NativeTypeName("#define SDLK_S 0x00000073u")]
    public const uint Ks = 0x00000073U;

    [NativeTypeName("#define SDLK_T 0x00000074u")]
    public const uint Kt = 0x00000074U;

    [NativeTypeName("#define SDLK_U 0x00000075u")]
    public const uint Ku = 0x00000075U;

    [NativeTypeName("#define SDLK_V 0x00000076u")]
    public const uint Kv = 0x00000076U;

    [NativeTypeName("#define SDLK_W 0x00000077u")]
    public const uint Kw = 0x00000077U;

    [NativeTypeName("#define SDLK_X 0x00000078u")]
    public const uint Kx = 0x00000078U;

    [NativeTypeName("#define SDLK_Y 0x00000079u")]
    public const uint Ky = 0x00000079U;

    [NativeTypeName("#define SDLK_Z 0x0000007au")]
    public const uint Kz = 0x0000007aU;

    [NativeTypeName("#define SDLK_LEFTBRACE 0x0000007bu")]
    public const uint KLeftbrace = 0x0000007bU;

    [NativeTypeName("#define SDLK_PIPE 0x0000007cu")]
    public const uint KPipe = 0x0000007cU;

    [NativeTypeName("#define SDLK_RIGHTBRACE 0x0000007du")]
    public const uint KRightbrace = 0x0000007dU;

    [NativeTypeName("#define SDLK_TILDE 0x0000007eu")]
    public const uint KTilde = 0x0000007eU;

    [NativeTypeName("#define SDLK_DELETE 0x0000007fu")]
    public const uint KDelete = 0x0000007fU;

    [NativeTypeName("#define SDLK_PLUSMINUS 0x000000b1u")]
    public const uint KPlusminus = 0x000000b1U;

    [NativeTypeName("#define SDLK_CAPSLOCK 0x40000039u")]
    public const uint KCapslock = 0x40000039U;

    [NativeTypeName("#define SDLK_F1 0x4000003au")]
    public const uint KF1 = 0x4000003aU;

    [NativeTypeName("#define SDLK_F2 0x4000003bu")]
    public const uint KF2 = 0x4000003bU;

    [NativeTypeName("#define SDLK_F3 0x4000003cu")]
    public const uint KF3 = 0x4000003cU;

    [NativeTypeName("#define SDLK_F4 0x4000003du")]
    public const uint KF4 = 0x4000003dU;

    [NativeTypeName("#define SDLK_F5 0x4000003eu")]
    public const uint KF5 = 0x4000003eU;

    [NativeTypeName("#define SDLK_F6 0x4000003fu")]
    public const uint KF6 = 0x4000003fU;

    [NativeTypeName("#define SDLK_F7 0x40000040u")]
    public const uint KF7 = 0x40000040U;

    [NativeTypeName("#define SDLK_F8 0x40000041u")]
    public const uint KF8 = 0x40000041U;

    [NativeTypeName("#define SDLK_F9 0x40000042u")]
    public const uint KF9 = 0x40000042U;

    [NativeTypeName("#define SDLK_F10 0x40000043u")]
    public const uint KF10 = 0x40000043U;

    [NativeTypeName("#define SDLK_F11 0x40000044u")]
    public const uint KF11 = 0x40000044U;

    [NativeTypeName("#define SDLK_F12 0x40000045u")]
    public const uint KF12 = 0x40000045U;

    [NativeTypeName("#define SDLK_PRINTSCREEN 0x40000046u")]
    public const uint KPrintscreen = 0x40000046U;

    [NativeTypeName("#define SDLK_SCROLLLOCK 0x40000047u")]
    public const uint KScrolllock = 0x40000047U;

    [NativeTypeName("#define SDLK_PAUSE 0x40000048u")]
    public const uint KPause = 0x40000048U;

    [NativeTypeName("#define SDLK_INSERT 0x40000049u")]
    public const uint KInsert = 0x40000049U;

    [NativeTypeName("#define SDLK_HOME 0x4000004au")]
    public const uint KHome = 0x4000004aU;

    [NativeTypeName("#define SDLK_PAGEUP 0x4000004bu")]
    public const uint KPageup = 0x4000004bU;

    [NativeTypeName("#define SDLK_END 0x4000004du")]
    public const uint KEnd = 0x4000004dU;

    [NativeTypeName("#define SDLK_PAGEDOWN 0x4000004eu")]
    public const uint KPagedown = 0x4000004eU;

    [NativeTypeName("#define SDLK_RIGHT 0x4000004fu")]
    public const uint KRight = 0x4000004fU;

    [NativeTypeName("#define SDLK_LEFT 0x40000050u")]
    public const uint KLeft = 0x40000050U;

    [NativeTypeName("#define SDLK_DOWN 0x40000051u")]
    public const uint KDown = 0x40000051U;

    [NativeTypeName("#define SDLK_UP 0x40000052u")]
    public const uint KUp = 0x40000052U;

    [NativeTypeName("#define SDLK_NUMLOCKCLEAR 0x40000053u")]
    public const uint KNumlockclear = 0x40000053U;

    [NativeTypeName("#define SDLK_KP_DIVIDE 0x40000054u")]
    public const uint KKpDivide = 0x40000054U;

    [NativeTypeName("#define SDLK_KP_MULTIPLY 0x40000055u")]
    public const uint KKpMultiply = 0x40000055U;

    [NativeTypeName("#define SDLK_KP_MINUS 0x40000056u")]
    public const uint KKpMinus = 0x40000056U;

    [NativeTypeName("#define SDLK_KP_PLUS 0x40000057u")]
    public const uint KKpPlus = 0x40000057U;

    [NativeTypeName("#define SDLK_KP_ENTER 0x40000058u")]
    public const uint KKpEnter = 0x40000058U;

    [NativeTypeName("#define SDLK_KP_1 0x40000059u")]
    public const uint KKp1 = 0x40000059U;

    [NativeTypeName("#define SDLK_KP_2 0x4000005au")]
    public const uint KKp2 = 0x4000005aU;

    [NativeTypeName("#define SDLK_KP_3 0x4000005bu")]
    public const uint KKp3 = 0x4000005bU;

    [NativeTypeName("#define SDLK_KP_4 0x4000005cu")]
    public const uint KKp4 = 0x4000005cU;

    [NativeTypeName("#define SDLK_KP_5 0x4000005du")]
    public const uint KKp5 = 0x4000005dU;

    [NativeTypeName("#define SDLK_KP_6 0x4000005eu")]
    public const uint KKp6 = 0x4000005eU;

    [NativeTypeName("#define SDLK_KP_7 0x4000005fu")]
    public const uint KKp7 = 0x4000005fU;

    [NativeTypeName("#define SDLK_KP_8 0x40000060u")]
    public const uint KKp8 = 0x40000060U;

    [NativeTypeName("#define SDLK_KP_9 0x40000061u")]
    public const uint KKp9 = 0x40000061U;

    [NativeTypeName("#define SDLK_KP_0 0x40000062u")]
    public const uint KKp0 = 0x40000062U;

    [NativeTypeName("#define SDLK_KP_PERIOD 0x40000063u")]
    public const uint KKpPeriod = 0x40000063U;

    [NativeTypeName("#define SDLK_APPLICATION 0x40000065u")]
    public const uint KApplication = 0x40000065U;

    [NativeTypeName("#define SDLK_POWER 0x40000066u")]
    public const uint KPower = 0x40000066U;

    [NativeTypeName("#define SDLK_KP_EQUALS 0x40000067u")]
    public const uint KKpEquals = 0x40000067U;

    [NativeTypeName("#define SDLK_F13 0x40000068u")]
    public const uint KF13 = 0x40000068U;

    [NativeTypeName("#define SDLK_F14 0x40000069u")]
    public const uint KF14 = 0x40000069U;

    [NativeTypeName("#define SDLK_F15 0x4000006au")]
    public const uint KF15 = 0x4000006aU;

    [NativeTypeName("#define SDLK_F16 0x4000006bu")]
    public const uint KF16 = 0x4000006bU;

    [NativeTypeName("#define SDLK_F17 0x4000006cu")]
    public const uint KF17 = 0x4000006cU;

    [NativeTypeName("#define SDLK_F18 0x4000006du")]
    public const uint KF18 = 0x4000006dU;

    [NativeTypeName("#define SDLK_F19 0x4000006eu")]
    public const uint KF19 = 0x4000006eU;

    [NativeTypeName("#define SDLK_F20 0x4000006fu")]
    public const uint KF20 = 0x4000006fU;

    [NativeTypeName("#define SDLK_F21 0x40000070u")]
    public const uint KF21 = 0x40000070U;

    [NativeTypeName("#define SDLK_F22 0x40000071u")]
    public const uint KF22 = 0x40000071U;

    [NativeTypeName("#define SDLK_F23 0x40000072u")]
    public const uint KF23 = 0x40000072U;

    [NativeTypeName("#define SDLK_F24 0x40000073u")]
    public const uint KF24 = 0x40000073U;

    [NativeTypeName("#define SDLK_EXECUTE 0x40000074u")]
    public const uint KExecute = 0x40000074U;

    [NativeTypeName("#define SDLK_HELP 0x40000075u")]
    public const uint KHelp = 0x40000075U;

    [NativeTypeName("#define SDLK_MENU 0x40000076u")]
    public const uint KMenu = 0x40000076U;

    [NativeTypeName("#define SDLK_SELECT 0x40000077u")]
    public const uint KSelect = 0x40000077U;

    [NativeTypeName("#define SDLK_STOP 0x40000078u")]
    public const uint KStop = 0x40000078U;

    [NativeTypeName("#define SDLK_AGAIN 0x40000079u")]
    public const uint KAgain = 0x40000079U;

    [NativeTypeName("#define SDLK_UNDO 0x4000007au")]
    public const uint KUndo = 0x4000007aU;

    [NativeTypeName("#define SDLK_CUT 0x4000007bu")]
    public const uint KCut = 0x4000007bU;

    [NativeTypeName("#define SDLK_COPY 0x4000007cu")]
    public const uint KCopy = 0x4000007cU;

    [NativeTypeName("#define SDLK_PASTE 0x4000007du")]
    public const uint KPaste = 0x4000007dU;

    [NativeTypeName("#define SDLK_FIND 0x4000007eu")]
    public const uint KFind = 0x4000007eU;

    [NativeTypeName("#define SDLK_MUTE 0x4000007fu")]
    public const uint KMute = 0x4000007fU;

    [NativeTypeName("#define SDLK_VOLUMEUP 0x40000080u")]
    public const uint KVolumeup = 0x40000080U;

    [NativeTypeName("#define SDLK_VOLUMEDOWN 0x40000081u")]
    public const uint KVolumedown = 0x40000081U;

    [NativeTypeName("#define SDLK_KP_COMMA 0x40000085u")]
    public const uint KKpComma = 0x40000085U;

    [NativeTypeName("#define SDLK_KP_EQUALSAS400 0x40000086u")]
    public const uint KKpEqualsas400 = 0x40000086U;

    [NativeTypeName("#define SDLK_ALTERASE 0x40000099u")]
    public const uint KAlterase = 0x40000099U;

    [NativeTypeName("#define SDLK_SYSREQ 0x4000009au")]
    public const uint KSysreq = 0x4000009aU;

    [NativeTypeName("#define SDLK_CANCEL 0x4000009bu")]
    public const uint KCancel = 0x4000009bU;

    [NativeTypeName("#define SDLK_CLEAR 0x4000009cu")]
    public const uint KClear = 0x4000009cU;

    [NativeTypeName("#define SDLK_PRIOR 0x4000009du")]
    public const uint KPrior = 0x4000009dU;

    [NativeTypeName("#define SDLK_RETURN2 0x4000009eu")]
    public const uint KReturn2 = 0x4000009eU;

    [NativeTypeName("#define SDLK_SEPARATOR 0x4000009fu")]
    public const uint KSeparator = 0x4000009fU;

    [NativeTypeName("#define SDLK_OUT 0x400000a0u")]
    public const uint KOut = 0x400000a0U;

    [NativeTypeName("#define SDLK_OPER 0x400000a1u")]
    public const uint KOper = 0x400000a1U;

    [NativeTypeName("#define SDLK_CLEARAGAIN 0x400000a2u")]
    public const uint KClearagain = 0x400000a2U;

    [NativeTypeName("#define SDLK_CRSEL 0x400000a3u")]
    public const uint KCrsel = 0x400000a3U;

    [NativeTypeName("#define SDLK_EXSEL 0x400000a4u")]
    public const uint KExsel = 0x400000a4U;

    [NativeTypeName("#define SDLK_KP_00 0x400000b0u")]
    public const uint KKp00 = 0x400000b0U;

    [NativeTypeName("#define SDLK_KP_000 0x400000b1u")]
    public const uint KKp000 = 0x400000b1U;

    [NativeTypeName("#define SDLK_THOUSANDSSEPARATOR 0x400000b2u")]
    public const uint KThousandsseparator = 0x400000b2U;

    [NativeTypeName("#define SDLK_DECIMALSEPARATOR 0x400000b3u")]
    public const uint KDecimalseparator = 0x400000b3U;

    [NativeTypeName("#define SDLK_CURRENCYUNIT 0x400000b4u")]
    public const uint KCurrencyunit = 0x400000b4U;

    [NativeTypeName("#define SDLK_CURRENCYSUBUNIT 0x400000b5u")]
    public const uint KCurrencysubunit = 0x400000b5U;

    [NativeTypeName("#define SDLK_KP_LEFTPAREN 0x400000b6u")]
    public const uint KKpLeftparen = 0x400000b6U;

    [NativeTypeName("#define SDLK_KP_RIGHTPAREN 0x400000b7u")]
    public const uint KKpRightparen = 0x400000b7U;

    [NativeTypeName("#define SDLK_KP_LEFTBRACE 0x400000b8u")]
    public const uint KKpLeftbrace = 0x400000b8U;

    [NativeTypeName("#define SDLK_KP_RIGHTBRACE 0x400000b9u")]
    public const uint KKpRightbrace = 0x400000b9U;

    [NativeTypeName("#define SDLK_KP_TAB 0x400000bau")]
    public const uint KKpTab = 0x400000baU;

    [NativeTypeName("#define SDLK_KP_BACKSPACE 0x400000bbu")]
    public const uint KKpBackspace = 0x400000bbU;

    [NativeTypeName("#define SDLK_KP_A 0x400000bcu")]
    public const uint KKpA = 0x400000bcU;

    [NativeTypeName("#define SDLK_KP_B 0x400000bdu")]
    public const uint KKpB = 0x400000bdU;

    [NativeTypeName("#define SDLK_KP_C 0x400000beu")]
    public const uint KKpC = 0x400000beU;

    [NativeTypeName("#define SDLK_KP_D 0x400000bfu")]
    public const uint KKpD = 0x400000bfU;

    [NativeTypeName("#define SDLK_KP_E 0x400000c0u")]
    public const uint KKpE = 0x400000c0U;

    [NativeTypeName("#define SDLK_KP_F 0x400000c1u")]
    public const uint KKpF = 0x400000c1U;

    [NativeTypeName("#define SDLK_KP_XOR 0x400000c2u")]
    public const uint KKpXor = 0x400000c2U;

    [NativeTypeName("#define SDLK_KP_POWER 0x400000c3u")]
    public const uint KKpPower = 0x400000c3U;

    [NativeTypeName("#define SDLK_KP_PERCENT 0x400000c4u")]
    public const uint KKpPercent = 0x400000c4U;

    [NativeTypeName("#define SDLK_KP_LESS 0x400000c5u")]
    public const uint KKpLess = 0x400000c5U;

    [NativeTypeName("#define SDLK_KP_GREATER 0x400000c6u")]
    public const uint KKpGreater = 0x400000c6U;

    [NativeTypeName("#define SDLK_KP_AMPERSAND 0x400000c7u")]
    public const uint KKpAmpersand = 0x400000c7U;

    [NativeTypeName("#define SDLK_KP_DBLAMPERSAND 0x400000c8u")]
    public const uint KKpDblampersand = 0x400000c8U;

    [NativeTypeName("#define SDLK_KP_VERTICALBAR 0x400000c9u")]
    public const uint KKpVerticalbar = 0x400000c9U;

    [NativeTypeName("#define SDLK_KP_DBLVERTICALBAR 0x400000cau")]
    public const uint KKpDblverticalbar = 0x400000caU;

    [NativeTypeName("#define SDLK_KP_COLON 0x400000cbu")]
    public const uint KKpColon = 0x400000cbU;

    [NativeTypeName("#define SDLK_KP_HASH 0x400000ccu")]
    public const uint KKpHash = 0x400000ccU;

    [NativeTypeName("#define SDLK_KP_SPACE 0x400000cdu")]
    public const uint KKpSpace = 0x400000cdU;

    [NativeTypeName("#define SDLK_KP_AT 0x400000ceu")]
    public const uint KKpAt = 0x400000ceU;

    [NativeTypeName("#define SDLK_KP_EXCLAM 0x400000cfu")]
    public const uint KKpExclam = 0x400000cfU;

    [NativeTypeName("#define SDLK_KP_MEMSTORE 0x400000d0u")]
    public const uint KKpMemstore = 0x400000d0U;

    [NativeTypeName("#define SDLK_KP_MEMRECALL 0x400000d1u")]
    public const uint KKpMemrecall = 0x400000d1U;

    [NativeTypeName("#define SDLK_KP_MEMCLEAR 0x400000d2u")]
    public const uint KKpMemclear = 0x400000d2U;

    [NativeTypeName("#define SDLK_KP_MEMADD 0x400000d3u")]
    public const uint KKpMemadd = 0x400000d3U;

    [NativeTypeName("#define SDLK_KP_MEMSUBTRACT 0x400000d4u")]
    public const uint KKpMemsubtract = 0x400000d4U;

    [NativeTypeName("#define SDLK_KP_MEMMULTIPLY 0x400000d5u")]
    public const uint KKpMemmultiply = 0x400000d5U;

    [NativeTypeName("#define SDLK_KP_MEMDIVIDE 0x400000d6u")]
    public const uint KKpMemdivide = 0x400000d6U;

    [NativeTypeName("#define SDLK_KP_PLUSMINUS 0x400000d7u")]
    public const uint KKpPlusminus = 0x400000d7U;

    [NativeTypeName("#define SDLK_KP_CLEAR 0x400000d8u")]
    public const uint KKpClear = 0x400000d8U;

    [NativeTypeName("#define SDLK_KP_CLEARENTRY 0x400000d9u")]
    public const uint KKpClearentry = 0x400000d9U;

    [NativeTypeName("#define SDLK_KP_BINARY 0x400000dau")]
    public const uint KKpBinary = 0x400000daU;

    [NativeTypeName("#define SDLK_KP_OCTAL 0x400000dbu")]
    public const uint KKpOctal = 0x400000dbU;

    [NativeTypeName("#define SDLK_KP_DECIMAL 0x400000dcu")]
    public const uint KKpDecimal = 0x400000dcU;

    [NativeTypeName("#define SDLK_KP_HEXADECIMAL 0x400000ddu")]
    public const uint KKpHexadecimal = 0x400000ddU;

    [NativeTypeName("#define SDLK_LCTRL 0x400000e0u")]
    public const uint KLctrl = 0x400000e0U;

    [NativeTypeName("#define SDLK_LSHIFT 0x400000e1u")]
    public const uint KLshift = 0x400000e1U;

    [NativeTypeName("#define SDLK_LALT 0x400000e2u")]
    public const uint KLalt = 0x400000e2U;

    [NativeTypeName("#define SDLK_LGUI 0x400000e3u")]
    public const uint KLgui = 0x400000e3U;

    [NativeTypeName("#define SDLK_RCTRL 0x400000e4u")]
    public const uint KRctrl = 0x400000e4U;

    [NativeTypeName("#define SDLK_RSHIFT 0x400000e5u")]
    public const uint KRshift = 0x400000e5U;

    [NativeTypeName("#define SDLK_RALT 0x400000e6u")]
    public const uint KRalt = 0x400000e6U;

    [NativeTypeName("#define SDLK_RGUI 0x400000e7u")]
    public const uint KRgui = 0x400000e7U;

    [NativeTypeName("#define SDLK_MODE 0x40000101u")]
    public const uint KMode = 0x40000101U;

    [NativeTypeName("#define SDLK_SLEEP 0x40000102u")]
    public const uint KSleep = 0x40000102U;

    [NativeTypeName("#define SDLK_WAKE 0x40000103u")]
    public const uint KWake = 0x40000103U;

    [NativeTypeName("#define SDLK_CHANNEL_INCREMENT 0x40000104u")]
    public const uint KChannelIncrement = 0x40000104U;

    [NativeTypeName("#define SDLK_CHANNEL_DECREMENT 0x40000105u")]
    public const uint KChannelDecrement = 0x40000105U;

    [NativeTypeName("#define SDLK_MEDIA_PLAY 0x40000106u")]
    public const uint KMediaPlay = 0x40000106U;

    [NativeTypeName("#define SDLK_MEDIA_PAUSE 0x40000107u")]
    public const uint KMediaPause = 0x40000107U;

    [NativeTypeName("#define SDLK_MEDIA_RECORD 0x40000108u")]
    public const uint KMediaRecord = 0x40000108U;

    [NativeTypeName("#define SDLK_MEDIA_FAST_FORWARD 0x40000109u")]
    public const uint KMediaFastForward = 0x40000109U;

    [NativeTypeName("#define SDLK_MEDIA_REWIND 0x4000010au")]
    public const uint KMediaRewind = 0x4000010aU;

    [NativeTypeName("#define SDLK_MEDIA_NEXT_TRACK 0x4000010bu")]
    public const uint KMediaNextTrack = 0x4000010bU;

    [NativeTypeName("#define SDLK_MEDIA_PREVIOUS_TRACK 0x4000010cu")]
    public const uint KMediaPreviousTrack = 0x4000010cU;

    [NativeTypeName("#define SDLK_MEDIA_STOP 0x4000010du")]
    public const uint KMediaStop = 0x4000010dU;

    [NativeTypeName("#define SDLK_MEDIA_EJECT 0x4000010eu")]
    public const uint KMediaEject = 0x4000010eU;

    [NativeTypeName("#define SDLK_MEDIA_PLAY_PAUSE 0x4000010fu")]
    public const uint KMediaPlayPause = 0x4000010fU;

    [NativeTypeName("#define SDLK_MEDIA_SELECT 0x40000110u")]
    public const uint KMediaSelect = 0x40000110U;

    [NativeTypeName("#define SDLK_AC_NEW 0x40000111u")]
    public const uint KAcNew = 0x40000111U;

    [NativeTypeName("#define SDLK_AC_OPEN 0x40000112u")]
    public const uint KAcOpen = 0x40000112U;

    [NativeTypeName("#define SDLK_AC_CLOSE 0x40000113u")]
    public const uint KAcClose = 0x40000113U;

    [NativeTypeName("#define SDLK_AC_EXIT 0x40000114u")]
    public const uint KAcExit = 0x40000114U;

    [NativeTypeName("#define SDLK_AC_SAVE 0x40000115u")]
    public const uint KAcSave = 0x40000115U;

    [NativeTypeName("#define SDLK_AC_PRINT 0x40000116u")]
    public const uint KAcPrint = 0x40000116U;

    [NativeTypeName("#define SDLK_AC_PROPERTIES 0x40000117u")]
    public const uint KAcProperties = 0x40000117U;

    [NativeTypeName("#define SDLK_AC_SEARCH 0x40000118u")]
    public const uint KAcSearch = 0x40000118U;

    [NativeTypeName("#define SDLK_AC_HOME 0x40000119u")]
    public const uint KAcHome = 0x40000119U;

    [NativeTypeName("#define SDLK_AC_BACK 0x4000011au")]
    public const uint KAcBack = 0x4000011aU;

    [NativeTypeName("#define SDLK_AC_FORWARD 0x4000011bu")]
    public const uint KAcForward = 0x4000011bU;

    [NativeTypeName("#define SDLK_AC_STOP 0x4000011cu")]
    public const uint KAcStop = 0x4000011cU;

    [NativeTypeName("#define SDLK_AC_REFRESH 0x4000011du")]
    public const uint KAcRefresh = 0x4000011dU;

    [NativeTypeName("#define SDLK_AC_BOOKMARKS 0x4000011eu")]
    public const uint KAcBookmarks = 0x4000011eU;

    [NativeTypeName("#define SDLK_SOFTLEFT 0x4000011fu")]
    public const uint KSoftleft = 0x4000011fU;

    [NativeTypeName("#define SDLK_SOFTRIGHT 0x40000120u")]
    public const uint KSoftright = 0x40000120U;

    [NativeTypeName("#define SDLK_CALL 0x40000121u")]
    public const uint KCall = 0x40000121U;

    [NativeTypeName("#define SDLK_ENDCALL 0x40000122u")]
    public const uint KEndcall = 0x40000122U;

    [NativeTypeName("#define SDL_KMOD_NONE 0x0000u")]
    public const uint KmodNone = 0x0000U;

    [NativeTypeName("#define SDL_KMOD_LSHIFT 0x0001u")]
    public const uint KmodLshift = 0x0001U;

    [NativeTypeName("#define SDL_KMOD_RSHIFT 0x0002u")]
    public const uint KmodRshift = 0x0002U;

    [NativeTypeName("#define SDL_KMOD_LCTRL 0x0040u")]
    public const uint KmodLctrl = 0x0040U;

    [NativeTypeName("#define SDL_KMOD_RCTRL 0x0080u")]
    public const uint KmodRctrl = 0x0080U;

    [NativeTypeName("#define SDL_KMOD_LALT 0x0100u")]
    public const uint KmodLalt = 0x0100U;

    [NativeTypeName("#define SDL_KMOD_RALT 0x0200u")]
    public const uint KmodRalt = 0x0200U;

    [NativeTypeName("#define SDL_KMOD_LGUI 0x0400u")]
    public const uint KmodLgui = 0x0400U;

    [NativeTypeName("#define SDL_KMOD_RGUI 0x0800u")]
    public const uint KmodRgui = 0x0800U;

    [NativeTypeName("#define SDL_KMOD_NUM 0x1000u")]
    public const uint KmodNum = 0x1000U;

    [NativeTypeName("#define SDL_KMOD_CAPS 0x2000u")]
    public const uint KmodCaps = 0x2000U;

    [NativeTypeName("#define SDL_KMOD_MODE 0x4000u")]
    public const uint KmodMode = 0x4000U;

    [NativeTypeName("#define SDL_KMOD_SCROLL 0x8000u")]
    public const uint KmodScroll = 0x8000U;

    [NativeTypeName("#define SDL_KMOD_CTRL (SDL_KMOD_LCTRL | SDL_KMOD_RCTRL)")]
    public const uint KmodCtrl = (0x0040U | 0x0080U);

    [NativeTypeName("#define SDL_KMOD_SHIFT (SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT)")]
    public const uint KmodShift = (0x0001U | 0x0002U);

    [NativeTypeName("#define SDL_KMOD_ALT (SDL_KMOD_LALT | SDL_KMOD_RALT)")]
    public const uint KmodAlt = (0x0100U | 0x0200U);

    [NativeTypeName("#define SDL_KMOD_GUI (SDL_KMOD_LGUI | SDL_KMOD_RGUI)")]
    public const uint KmodGui = (0x0400U | 0x0800U);

    [NativeTypeName("#define SDL_PROP_TEXTINPUT_TYPE_NUMBER \"SDL.textinput.type\"")]
    public static Utf8String PropTextinputTypeNumber => "SDL.textinput.type"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER \"SDL.textinput.capitalization\""
    )]
    public static Utf8String PropTextinputCapitalizationNumber => "SDL.textinput.capitalization"u8;

    [NativeTypeName("#define SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN \"SDL.textinput.autocorrect\"")]
    public static Utf8String PropTextinputAutocorrectBoolean => "SDL.textinput.autocorrect"u8;

    [NativeTypeName("#define SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN \"SDL.textinput.multiline\"")]
    public static Utf8String PropTextinputMultilineBoolean => "SDL.textinput.multiline"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER \"SDL.textinput.android.inputtype\""
    )]
    public static Utf8String PropTextinputAndroidInputtypeNumber =>
        "SDL.textinput.android.inputtype"u8;

    [NativeTypeName("#define SDL_BUTTON_LEFT 1")]
    public const int ButtonLeft = 1;

    [NativeTypeName("#define SDL_BUTTON_MIDDLE 2")]
    public const int ButtonMiddle = 2;

    [NativeTypeName("#define SDL_BUTTON_RIGHT 3")]
    public const int ButtonRight = 3;

    [NativeTypeName("#define SDL_BUTTON_X1 4")]
    public const int ButtonX1 = 4;

    [NativeTypeName("#define SDL_BUTTON_X2 5")]
    public const int ButtonX2 = 5;

    [NativeTypeName("#define SDL_BUTTON_LMASK SDL_BUTTON_MASK(SDL_BUTTON_LEFT)")]
    public const uint ButtonLmask = (1U << ((1) - 1));

    [NativeTypeName("#define SDL_BUTTON_MMASK SDL_BUTTON_MASK(SDL_BUTTON_MIDDLE)")]
    public const uint ButtonMmask = (1U << ((2) - 1));

    [NativeTypeName("#define SDL_BUTTON_RMASK SDL_BUTTON_MASK(SDL_BUTTON_RIGHT)")]
    public const uint ButtonRmask = (1U << ((3) - 1));

    [NativeTypeName("#define SDL_BUTTON_X1MASK SDL_BUTTON_MASK(SDL_BUTTON_X1)")]
    public const uint ButtonX1Mask = (1U << ((4) - 1));

    [NativeTypeName("#define SDL_BUTTON_X2MASK SDL_BUTTON_MASK(SDL_BUTTON_X2)")]
    public const uint ButtonX2Mask = (1U << ((5) - 1));

    [NativeTypeName("#define SDL_PEN_INPUT_DOWN (1u << 0)")]
    public const uint PenInputDown = (1U << 0);

    [NativeTypeName("#define SDL_PEN_INPUT_BUTTON_1 (1u << 1)")]
    public const uint PenInputButton1 = (1U << 1);

    [NativeTypeName("#define SDL_PEN_INPUT_BUTTON_2 (1u << 2)")]
    public const uint PenInputButton2 = (1U << 2);

    [NativeTypeName("#define SDL_PEN_INPUT_BUTTON_3 (1u << 3)")]
    public const uint PenInputButton3 = (1U << 3);

    [NativeTypeName("#define SDL_PEN_INPUT_BUTTON_4 (1u << 4)")]
    public const uint PenInputButton4 = (1U << 4);

    [NativeTypeName("#define SDL_PEN_INPUT_BUTTON_5 (1u << 5)")]
    public const uint PenInputButton5 = (1U << 5);

    [NativeTypeName("#define SDL_PEN_INPUT_ERASER_TIP (1u << 30)")]
    public const uint PenInputEraserTip = (1U << 30);

    [NativeTypeName("#define SDL_TOUCH_MOUSEID ((SDL_MouseID)-1)")]
    public const uint TouchMouseid = unchecked((uint)(-1));

    [NativeTypeName("#define SDL_MOUSE_TOUCHID ((SDL_TouchID)-1)")]
    public const ulong MouseTouchid = unchecked((ulong)(-1));

    [NativeTypeName("#define SDL_GLOB_CASEINSENSITIVE (1u << 0)")]
    public const uint GlobCaseinsensitive = (1U << 0);

    [NativeTypeName("#define SDL_HAPTIC_CONSTANT (1u<<0)")]
    public const uint HapticConstant = (1U << 0);

    [NativeTypeName("#define SDL_HAPTIC_SINE (1u<<1)")]
    public const uint HapticSine = (1U << 1);

    [NativeTypeName("#define SDL_HAPTIC_SQUARE (1u<<2)")]
    public const uint HapticSquare = (1U << 2);

    [NativeTypeName("#define SDL_HAPTIC_TRIANGLE (1u<<3)")]
    public const uint HapticTriangle = (1U << 3);

    [NativeTypeName("#define SDL_HAPTIC_SAWTOOTHUP (1u<<4)")]
    public const uint HapticSawtoothup = (1U << 4);

    [NativeTypeName("#define SDL_HAPTIC_SAWTOOTHDOWN (1u<<5)")]
    public const uint HapticSawtoothdown = (1U << 5);

    [NativeTypeName("#define SDL_HAPTIC_RAMP (1u<<6)")]
    public const uint HapticRamp = (1U << 6);

    [NativeTypeName("#define SDL_HAPTIC_SPRING (1u<<7)")]
    public const uint HapticSpring = (1U << 7);

    [NativeTypeName("#define SDL_HAPTIC_DAMPER (1u<<8)")]
    public const uint HapticDamper = (1U << 8);

    [NativeTypeName("#define SDL_HAPTIC_INERTIA (1u<<9)")]
    public const uint HapticInertia = (1U << 9);

    [NativeTypeName("#define SDL_HAPTIC_FRICTION (1u<<10)")]
    public const uint HapticFriction = (1U << 10);

    [NativeTypeName("#define SDL_HAPTIC_LEFTRIGHT (1u<<11)")]
    public const uint HapticLeftright = (1U << 11);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED1 (1u<<12)")]
    public const uint HapticReserved1 = (1U << 12);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED2 (1u<<13)")]
    public const uint HapticReserved2 = (1U << 13);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED3 (1u<<14)")]
    public const uint HapticReserved3 = (1U << 14);

    [NativeTypeName("#define SDL_HAPTIC_CUSTOM (1u<<15)")]
    public const uint HapticCustom = (1U << 15);

    [NativeTypeName("#define SDL_HAPTIC_GAIN (1u<<16)")]
    public const uint HapticGain = (1U << 16);

    [NativeTypeName("#define SDL_HAPTIC_AUTOCENTER (1u<<17)")]
    public const uint HapticAutocenter = (1U << 17);

    [NativeTypeName("#define SDL_HAPTIC_STATUS (1u<<18)")]
    public const uint HapticStatus = (1U << 18);

    [NativeTypeName("#define SDL_HAPTIC_PAUSE (1u<<19)")]
    public const uint HapticPause = (1U << 19);

    [NativeTypeName("#define SDL_HAPTIC_POLAR 0")]
    public const int HapticPolar = 0;

    [NativeTypeName("#define SDL_HAPTIC_CARTESIAN 1")]
    public const int HapticCartesian = 1;

    [NativeTypeName("#define SDL_HAPTIC_SPHERICAL 2")]
    public const int HapticSpherical = 2;

    [NativeTypeName("#define SDL_HAPTIC_STEERING_AXIS 3")]
    public const int HapticSteeringAxis = 3;

    [NativeTypeName("#define SDL_HAPTIC_INFINITY 4294967295U")]
    public const uint HapticInfinity = 4294967295U;

    [NativeTypeName(
        "#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED \"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\""
    )]
    public static Utf8String HintAllowAltTabWhileGrabbed => "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"u8;

    [NativeTypeName(
        "#define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY \"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\""
    )]
    public static Utf8String HintAndroidAllowRecreateActivity =>
        "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"u8;

    [NativeTypeName("#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE \"SDL_ANDROID_BLOCK_ON_PAUSE\"")]
    public static Utf8String HintAndroidBlockOnPause => "SDL_ANDROID_BLOCK_ON_PAUSE"u8;

    [NativeTypeName("#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON \"SDL_ANDROID_TRAP_BACK_BUTTON\"")]
    public static Utf8String HintAndroidTrapBackButton => "SDL_ANDROID_TRAP_BACK_BUTTON"u8;

    [NativeTypeName("#define SDL_HINT_APP_ID \"SDL_APP_ID\"")]
    public static Utf8String HintAppId => "SDL_APP_ID"u8;

    [NativeTypeName("#define SDL_HINT_APP_NAME \"SDL_APP_NAME\"")]
    public static Utf8String HintAppName => "SDL_APP_NAME"u8;

    [NativeTypeName(
        "#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS \"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\""
    )]
    public static Utf8String HintAppleTvControllerUiEvents => "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"u8;

    [NativeTypeName(
        "#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION \"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\""
    )]
    public static Utf8String HintAppleTvRemoteAllowRotation =>
        "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE \"SDL_AUDIO_ALSA_DEFAULT_DEVICE\"")]
    public static Utf8String HintAudioAlsaDefaultDevice => "SDL_AUDIO_ALSA_DEFAULT_DEVICE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_CATEGORY \"SDL_AUDIO_CATEGORY\"")]
    public static Utf8String HintAudioCategory => "SDL_AUDIO_CATEGORY"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_CHANNELS \"SDL_AUDIO_CHANNELS\"")]
    public static Utf8String HintAudioChannels => "SDL_AUDIO_CHANNELS"u8;

    [NativeTypeName(
        "#define SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME \"SDL_AUDIO_DEVICE_APP_ICON_NAME\""
    )]
    public static Utf8String HintAudioDeviceAppIconName => "SDL_AUDIO_DEVICE_APP_ICON_NAME"u8;

    [NativeTypeName(
        "#define SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES \"SDL_AUDIO_DEVICE_SAMPLE_FRAMES\""
    )]
    public static Utf8String HintAudioDeviceSampleFrames => "SDL_AUDIO_DEVICE_SAMPLE_FRAMES"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME \"SDL_AUDIO_DEVICE_STREAM_NAME\"")]
    public static Utf8String HintAudioDeviceStreamName => "SDL_AUDIO_DEVICE_STREAM_NAME"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE \"SDL_AUDIO_DEVICE_STREAM_ROLE\"")]
    public static Utf8String HintAudioDeviceStreamRole => "SDL_AUDIO_DEVICE_STREAM_ROLE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DISK_INPUT_FILE \"SDL_AUDIO_DISK_INPUT_FILE\"")]
    public static Utf8String HintAudioDiskInputFile => "SDL_AUDIO_DISK_INPUT_FILE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DISK_OUTPUT_FILE \"SDL_AUDIO_DISK_OUTPUT_FILE\"")]
    public static Utf8String HintAudioDiskOutputFile => "SDL_AUDIO_DISK_OUTPUT_FILE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DISK_TIMESCALE \"SDL_AUDIO_DISK_TIMESCALE\"")]
    public static Utf8String HintAudioDiskTimescale => "SDL_AUDIO_DISK_TIMESCALE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DRIVER \"SDL_AUDIO_DRIVER\"")]
    public static Utf8String HintAudioDriver => "SDL_AUDIO_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DUMMY_TIMESCALE \"SDL_AUDIO_DUMMY_TIMESCALE\"")]
    public static Utf8String HintAudioDummyTimescale => "SDL_AUDIO_DUMMY_TIMESCALE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_FORMAT \"SDL_AUDIO_FORMAT\"")]
    public static Utf8String HintAudioFormat => "SDL_AUDIO_FORMAT"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_FREQUENCY \"SDL_AUDIO_FREQUENCY\"")]
    public static Utf8String HintAudioFrequency => "SDL_AUDIO_FREQUENCY"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_INCLUDE_MONITORS \"SDL_AUDIO_INCLUDE_MONITORS\"")]
    public static Utf8String HintAudioIncludeMonitors => "SDL_AUDIO_INCLUDE_MONITORS"u8;

    [NativeTypeName("#define SDL_HINT_AUTO_UPDATE_JOYSTICKS \"SDL_AUTO_UPDATE_JOYSTICKS\"")]
    public static Utf8String HintAutoUpdateJoysticks => "SDL_AUTO_UPDATE_JOYSTICKS"u8;

    [NativeTypeName("#define SDL_HINT_AUTO_UPDATE_SENSORS \"SDL_AUTO_UPDATE_SENSORS\"")]
    public static Utf8String HintAutoUpdateSensors => "SDL_AUTO_UPDATE_SENSORS"u8;

    [NativeTypeName("#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT \"SDL_BMP_SAVE_LEGACY_FORMAT\"")]
    public static Utf8String HintBmpSaveLegacyFormat => "SDL_BMP_SAVE_LEGACY_FORMAT"u8;

    [NativeTypeName("#define SDL_HINT_CAMERA_DRIVER \"SDL_CAMERA_DRIVER\"")]
    public static Utf8String HintCameraDriver => "SDL_CAMERA_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_CPU_FEATURE_MASK \"SDL_CPU_FEATURE_MASK\"")]
    public static Utf8String HintCpuFeatureMask => "SDL_CPU_FEATURE_MASK"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_DIRECTINPUT \"SDL_JOYSTICK_DIRECTINPUT\"")]
    public static Utf8String HintJoystickDirectinput => "SDL_JOYSTICK_DIRECTINPUT"u8;

    [NativeTypeName("#define SDL_HINT_FILE_DIALOG_DRIVER \"SDL_FILE_DIALOG_DRIVER\"")]
    public static Utf8String HintFileDialogDriver => "SDL_FILE_DIALOG_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_DISPLAY_USABLE_BOUNDS \"SDL_DISPLAY_USABLE_BOUNDS\"")]
    public static Utf8String HintDisplayUsableBounds => "SDL_DISPLAY_USABLE_BOUNDS"u8;

    [NativeTypeName("#define SDL_HINT_EMSCRIPTEN_ASYNCIFY \"SDL_EMSCRIPTEN_ASYNCIFY\"")]
    public static Utf8String HintEmscriptenAsyncify => "SDL_EMSCRIPTEN_ASYNCIFY"u8;

    [NativeTypeName(
        "#define SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR \"SDL_EMSCRIPTEN_CANVAS_SELECTOR\""
    )]
    public static Utf8String HintEmscriptenCanvasSelector => "SDL_EMSCRIPTEN_CANVAS_SELECTOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT \"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\""
    )]
    public static Utf8String HintEmscriptenKeyboardElement => "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"u8;

    [NativeTypeName("#define SDL_HINT_ENABLE_SCREEN_KEYBOARD \"SDL_ENABLE_SCREEN_KEYBOARD\"")]
    public static Utf8String HintEnableScreenKeyboard => "SDL_ENABLE_SCREEN_KEYBOARD"u8;

    [NativeTypeName("#define SDL_HINT_EVDEV_DEVICES \"SDL_EVDEV_DEVICES\"")]
    public static Utf8String HintEvdevDevices => "SDL_EVDEV_DEVICES"u8;

    [NativeTypeName("#define SDL_HINT_EVENT_LOGGING \"SDL_EVENT_LOGGING\"")]
    public static Utf8String HintEventLogging => "SDL_EVENT_LOGGING"u8;

    [NativeTypeName("#define SDL_HINT_FORCE_RAISEWINDOW \"SDL_FORCE_RAISEWINDOW\"")]
    public static Utf8String HintForceRaisewindow => "SDL_FORCE_RAISEWINDOW"u8;

    [NativeTypeName("#define SDL_HINT_FRAMEBUFFER_ACCELERATION \"SDL_FRAMEBUFFER_ACCELERATION\"")]
    public static Utf8String HintFramebufferAcceleration => "SDL_FRAMEBUFFER_ACCELERATION"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERCONFIG \"SDL_GAMECONTROLLERCONFIG\"")]
    public static Utf8String HintGamecontrollerconfig => "SDL_GAMECONTROLLERCONFIG"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERCONFIG_FILE \"SDL_GAMECONTROLLERCONFIG_FILE\"")]
    public static Utf8String HintGamecontrollerconfigFile => "SDL_GAMECONTROLLERCONFIG_FILE"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERTYPE \"SDL_GAMECONTROLLERTYPE\"")]
    public static Utf8String HintGamecontrollertype => "SDL_GAMECONTROLLERTYPE"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES \"SDL_GAMECONTROLLER_IGNORE_DEVICES\""
    )]
    public static Utf8String HintGamecontrollerIgnoreDevices =>
        "SDL_GAMECONTROLLER_IGNORE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT \"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\""
    )]
    public static Utf8String HintGamecontrollerIgnoreDevicesExcept =>
        "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION \"SDL_GAMECONTROLLER_SENSOR_FUSION\""
    )]
    public static Utf8String HintGamecontrollerSensorFusion => "SDL_GAMECONTROLLER_SENSOR_FUSION"u8;

    [NativeTypeName(
        "#define SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT \"SDL_GDK_TEXTINPUT_DEFAULT_TEXT\""
    )]
    public static Utf8String HintGdkTextinputDefaultText => "SDL_GDK_TEXTINPUT_DEFAULT_TEXT"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION \"SDL_GDK_TEXTINPUT_DESCRIPTION\"")]
    public static Utf8String HintGdkTextinputDescription => "SDL_GDK_TEXTINPUT_DESCRIPTION"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH \"SDL_GDK_TEXTINPUT_MAX_LENGTH\"")]
    public static Utf8String HintGdkTextinputMaxLength => "SDL_GDK_TEXTINPUT_MAX_LENGTH"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_SCOPE \"SDL_GDK_TEXTINPUT_SCOPE\"")]
    public static Utf8String HintGdkTextinputScope => "SDL_GDK_TEXTINPUT_SCOPE"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_TITLE \"SDL_GDK_TEXTINPUT_TITLE\"")]
    public static Utf8String HintGdkTextinputTitle => "SDL_GDK_TEXTINPUT_TITLE"u8;

    [NativeTypeName("#define SDL_HINT_HIDAPI_LIBUSB \"SDL_HIDAPI_LIBUSB\"")]
    public static Utf8String HintHidapiLibusb => "SDL_HIDAPI_LIBUSB"u8;

    [NativeTypeName("#define SDL_HINT_HIDAPI_LIBUSB_WHITELIST \"SDL_HIDAPI_LIBUSB_WHITELIST\"")]
    public static Utf8String HintHidapiLibusbWhitelist => "SDL_HIDAPI_LIBUSB_WHITELIST"u8;

    [NativeTypeName("#define SDL_HINT_HIDAPI_UDEV \"SDL_HIDAPI_UDEV\"")]
    public static Utf8String HintHidapiUdev => "SDL_HIDAPI_UDEV"u8;

    [NativeTypeName("#define SDL_HINT_GPU_DRIVER \"SDL_GPU_DRIVER\"")]
    public static Utf8String HintGpuDriver => "SDL_GPU_DRIVER"u8;

    [NativeTypeName(
        "#define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS \"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\""
    )]
    public static Utf8String HintHidapiEnumerateOnlyControllers =>
        "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"u8;

    [NativeTypeName("#define SDL_HINT_HIDAPI_IGNORE_DEVICES \"SDL_HIDAPI_IGNORE_DEVICES\"")]
    public static Utf8String HintHidapiIgnoreDevices => "SDL_HIDAPI_IGNORE_DEVICES"u8;

    [NativeTypeName("#define SDL_HINT_IME_IMPLEMENTED_UI \"SDL_IME_IMPLEMENTED_UI\"")]
    public static Utf8String HintImeImplementedUi => "SDL_IME_IMPLEMENTED_UI"u8;

    [NativeTypeName("#define SDL_HINT_IOS_HIDE_HOME_INDICATOR \"SDL_IOS_HIDE_HOME_INDICATOR\"")]
    public static Utf8String HintIosHideHomeIndicator => "SDL_IOS_HIDE_HOME_INDICATOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\""
    )]
    public static Utf8String HintJoystickAllowBackgroundEvents =>
        "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES \"SDL_JOYSTICK_ARCADESTICK_DEVICES\""
    )]
    public static Utf8String HintJoystickArcadestickDevices => "SDL_JOYSTICK_ARCADESTICK_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickArcadestickDevicesExcluded =>
        "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES \"SDL_JOYSTICK_BLACKLIST_DEVICES\""
    )]
    public static Utf8String HintJoystickBlacklistDevices => "SDL_JOYSTICK_BLACKLIST_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED \"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickBlacklistDevicesExcluded =>
        "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_DEVICE \"SDL_JOYSTICK_DEVICE\"")]
    public static Utf8String HintJoystickDevice => "SDL_JOYSTICK_DEVICE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES\""
    )]
    public static Utf8String HintJoystickFlightstickDevices => "SDL_JOYSTICK_FLIGHTSTICK_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickFlightstickDevicesExcluded =>
        "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_GAMEINPUT \"SDL_JOYSTICK_GAMEINPUT\"")]
    public static Utf8String HintJoystickGameinput => "SDL_JOYSTICK_GAMEINPUT"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES \"SDL_JOYSTICK_GAMECUBE_DEVICES\"")]
    public static Utf8String HintJoystickGamecubeDevices => "SDL_JOYSTICK_GAMECUBE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED \"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickGamecubeDevicesExcluded =>
        "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI \"SDL_JOYSTICK_HIDAPI\"")]
    public static Utf8String HintJoystickHidapi => "SDL_JOYSTICK_HIDAPI"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS \"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\""
    )]
    public static Utf8String HintJoystickHidapiCombineJoyCons =>
        "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE \"SDL_JOYSTICK_HIDAPI_GAMECUBE\"")]
    public static Utf8String HintJoystickHidapiGamecube => "SDL_JOYSTICK_HIDAPI_GAMECUBE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE \"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE\""
    )]
    public static Utf8String HintJoystickHidapiGamecubeRumbleBrake =>
        "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS \"SDL_JOYSTICK_HIDAPI_JOY_CONS\"")]
    public static Utf8String HintJoystickHidapiJoyCons => "SDL_JOYSTICK_HIDAPI_JOY_CONS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED \"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\""
    )]
    public static Utf8String HintJoystickHidapiJoyconHomeLed =>
        "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_LUNA \"SDL_JOYSTICK_HIDAPI_LUNA\"")]
    public static Utf8String HintJoystickHidapiLuna => "SDL_JOYSTICK_HIDAPI_LUNA"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC \"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\""
    )]
    public static Utf8String HintJoystickHidapiNintendoClassic =>
        "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS3 \"SDL_JOYSTICK_HIDAPI_PS3\"")]
    public static Utf8String HintJoystickHidapiPs3 => "SDL_JOYSTICK_HIDAPI_PS3"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER \"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER\""
    )]
    public static Utf8String HintJoystickHidapiPs3SixaxisDriver =>
        "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS4 \"SDL_JOYSTICK_HIDAPI_PS4\"")]
    public static Utf8String HintJoystickHidapiPs4 => "SDL_JOYSTICK_HIDAPI_PS4"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL \"SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL\""
    )]
    public static Utf8String HintJoystickHidapiPs4ReportInterval =>
        "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\""
    )]
    public static Utf8String HintJoystickHidapiPs4Rumble => "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS5 \"SDL_JOYSTICK_HIDAPI_PS5\"")]
    public static Utf8String HintJoystickHidapiPs5 => "SDL_JOYSTICK_HIDAPI_PS5"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\""
    )]
    public static Utf8String HintJoystickHidapiPs5PlayerLed =>
        "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\""
    )]
    public static Utf8String HintJoystickHidapiPs5Rumble => "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD \"SDL_JOYSTICK_HIDAPI_SHIELD\"")]
    public static Utf8String HintJoystickHidapiShield => "SDL_JOYSTICK_HIDAPI_SHIELD"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STADIA \"SDL_JOYSTICK_HIDAPI_STADIA\"")]
    public static Utf8String HintJoystickHidapiStadia => "SDL_JOYSTICK_HIDAPI_STADIA"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STEAM \"SDL_JOYSTICK_HIDAPI_STEAM\"")]
    public static Utf8String HintJoystickHidapiSteam => "SDL_JOYSTICK_HIDAPI_STEAM"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK \"SDL_JOYSTICK_HIDAPI_STEAMDECK\"")]
    public static Utf8String HintJoystickHidapiSteamdeck => "SDL_JOYSTICK_HIDAPI_STEAMDECK"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI \"SDL_JOYSTICK_HIDAPI_STEAM_HORI\""
    )]
    public static Utf8String HintJoystickHidapiSteamHori => "SDL_JOYSTICK_HIDAPI_STEAM_HORI"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH \"SDL_JOYSTICK_HIDAPI_SWITCH\"")]
    public static Utf8String HintJoystickHidapiSwitch => "SDL_JOYSTICK_HIDAPI_SWITCH"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\""
    )]
    public static Utf8String HintJoystickHidapiSwitchHomeLed =>
        "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\""
    )]
    public static Utf8String HintJoystickHidapiSwitchPlayerLed =>
        "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS \"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\""
    )]
    public static Utf8String HintJoystickHidapiVerticalJoyCons =>
        "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_WII \"SDL_JOYSTICK_HIDAPI_WII\"")]
    public static Utf8String HintJoystickHidapiWii => "SDL_JOYSTICK_HIDAPI_WII"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\""
    )]
    public static Utf8String HintJoystickHidapiWiiPlayerLed =>
        "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX \"SDL_JOYSTICK_HIDAPI_XBOX\"")]
    public static Utf8String HintJoystickHidapiXbox => "SDL_JOYSTICK_HIDAPI_XBOX"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 \"SDL_JOYSTICK_HIDAPI_XBOX_360\"")]
    public static Utf8String HintJoystickHidapiXbox360 => "SDL_JOYSTICK_HIDAPI_XBOX_360"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\""
    )]
    public static Utf8String HintJoystickHidapiXbox360PlayerLed =>
        "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS \"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\""
    )]
    public static Utf8String HintJoystickHidapiXbox360Wireless =>
        "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE \"SDL_JOYSTICK_HIDAPI_XBOX_ONE\"")]
    public static Utf8String HintJoystickHidapiXboxOne => "SDL_JOYSTICK_HIDAPI_XBOX_ONE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED \"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\""
    )]
    public static Utf8String HintJoystickHidapiXboxOneHomeLed =>
        "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_IOKIT \"SDL_JOYSTICK_IOKIT\"")]
    public static Utf8String HintJoystickIokit => "SDL_JOYSTICK_IOKIT"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_LINUX_CLASSIC \"SDL_JOYSTICK_LINUX_CLASSIC\"")]
    public static Utf8String HintJoystickLinuxClassic => "SDL_JOYSTICK_LINUX_CLASSIC"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_LINUX_DEADZONES \"SDL_JOYSTICK_LINUX_DEADZONES\"")]
    public static Utf8String HintJoystickLinuxDeadzones => "SDL_JOYSTICK_LINUX_DEADZONES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS \"SDL_JOYSTICK_LINUX_DIGITAL_HATS\""
    )]
    public static Utf8String HintJoystickLinuxDigitalHats => "SDL_JOYSTICK_LINUX_DIGITAL_HATS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES \"SDL_JOYSTICK_LINUX_HAT_DEADZONES\""
    )]
    public static Utf8String HintJoystickLinuxHatDeadzones => "SDL_JOYSTICK_LINUX_HAT_DEADZONES"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_MFI \"SDL_JOYSTICK_MFI\"")]
    public static Utf8String HintJoystickMfi => "SDL_JOYSTICK_MFI"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_RAWINPUT \"SDL_JOYSTICK_RAWINPUT\"")]
    public static Utf8String HintJoystickRawinput => "SDL_JOYSTICK_RAWINPUT"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT \"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\""
    )]
    public static Utf8String HintJoystickRawinputCorrelateXinput =>
        "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_ROG_CHAKRAM \"SDL_JOYSTICK_ROG_CHAKRAM\"")]
    public static Utf8String HintJoystickRogChakram => "SDL_JOYSTICK_ROG_CHAKRAM"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_THREAD \"SDL_JOYSTICK_THREAD\"")]
    public static Utf8String HintJoystickThread => "SDL_JOYSTICK_THREAD"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES \"SDL_JOYSTICK_THROTTLE_DEVICES\"")]
    public static Utf8String HintJoystickThrottleDevices => "SDL_JOYSTICK_THROTTLE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED \"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickThrottleDevicesExcluded =>
        "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_WGI \"SDL_JOYSTICK_WGI\"")]
    public static Utf8String HintJoystickWgi => "SDL_JOYSTICK_WGI"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_WHEEL_DEVICES \"SDL_JOYSTICK_WHEEL_DEVICES\"")]
    public static Utf8String HintJoystickWheelDevices => "SDL_JOYSTICK_WHEEL_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED \"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\""
    )]
    public static Utf8String HintJoystickWheelDevicesExcluded =>
        "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES \"SDL_JOYSTICK_ZERO_CENTERED_DEVICES\""
    )]
    public static Utf8String HintJoystickZeroCenteredDevices =>
        "SDL_JOYSTICK_ZERO_CENTERED_DEVICES"u8;

    [NativeTypeName("#define SDL_HINT_KEYCODE_OPTIONS \"SDL_KEYCODE_OPTIONS\"")]
    public static Utf8String HintKeycodeOptions => "SDL_KEYCODE_OPTIONS"u8;

    [NativeTypeName("#define SDL_HINT_KMSDRM_DEVICE_INDEX \"SDL_KMSDRM_DEVICE_INDEX\"")]
    public static Utf8String HintKmsdrmDeviceIndex => "SDL_KMSDRM_DEVICE_INDEX"u8;

    [NativeTypeName("#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER \"SDL_KMSDRM_REQUIRE_DRM_MASTER\"")]
    public static Utf8String HintKmsdrmRequireDrmMaster => "SDL_KMSDRM_REQUIRE_DRM_MASTER"u8;

    [NativeTypeName("#define SDL_HINT_LOGGING \"SDL_LOGGING\"")]
    public static Utf8String HintLogging => "SDL_LOGGING"u8;

    [NativeTypeName("#define SDL_HINT_MAC_BACKGROUND_APP \"SDL_MAC_BACKGROUND_APP\"")]
    public static Utf8String HintMacBackgroundApp => "SDL_MAC_BACKGROUND_APP"u8;

    [NativeTypeName(
        "#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK \"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\""
    )]
    public static Utf8String HintMacCtrlClickEmulateRightClick =>
        "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"u8;

    [NativeTypeName("#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH \"SDL_MAC_OPENGL_ASYNC_DISPATCH\"")]
    public static Utf8String HintMacOpenglAsyncDispatch => "SDL_MAC_OPENGL_ASYNC_DISPATCH"u8;

    [NativeTypeName("#define SDL_HINT_MAC_SCROLL_MOMENTUM \"SDL_MAC_SCROLL_MOMENTUM\"")]
    public static Utf8String HintMacScrollMomentum => "SDL_MAC_SCROLL_MOMENTUM"u8;

    [NativeTypeName("#define SDL_HINT_MAIN_CALLBACK_RATE \"SDL_MAIN_CALLBACK_RATE\"")]
    public static Utf8String HintMainCallbackRate => "SDL_MAIN_CALLBACK_RATE"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_AUTO_CAPTURE \"SDL_MOUSE_AUTO_CAPTURE\"")]
    public static Utf8String HintMouseAutoCapture => "SDL_MOUSE_AUTO_CAPTURE"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\"")]
    public static Utf8String HintMouseDoubleClickRadius => "SDL_MOUSE_DOUBLE_CLICK_RADIUS"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME \"SDL_MOUSE_DOUBLE_CLICK_TIME\"")]
    public static Utf8String HintMouseDoubleClickTime => "SDL_MOUSE_DOUBLE_CLICK_TIME"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE \"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE\""
    )]
    public static Utf8String HintMouseEmulateWarpWithRelative =>
        "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH \"SDL_MOUSE_FOCUS_CLICKTHROUGH\"")]
    public static Utf8String HintMouseFocusClickthrough => "SDL_MOUSE_FOCUS_CLICKTHROUGH"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE \"SDL_MOUSE_NORMAL_SPEED_SCALE\"")]
    public static Utf8String HintMouseNormalSpeedScale => "SDL_MOUSE_NORMAL_SPEED_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER \"SDL_MOUSE_RELATIVE_MODE_CENTER\""
    )]
    public static Utf8String HintMouseRelativeModeCenter => "SDL_MOUSE_RELATIVE_MODE_CENTER"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_RELATIVE_MODE_WARP \"SDL_MOUSE_RELATIVE_MODE_WARP\"")]
    public static Utf8String HintMouseRelativeModeWarp => "SDL_MOUSE_RELATIVE_MODE_WARP"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE \"SDL_MOUSE_RELATIVE_SPEED_SCALE\""
    )]
    public static Utf8String HintMouseRelativeSpeedScale => "SDL_MOUSE_RELATIVE_SPEED_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE \"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\""
    )]
    public static Utf8String HintMouseRelativeSystemScale => "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION \"SDL_MOUSE_RELATIVE_WARP_MOTION\""
    )]
    public static Utf8String HintMouseRelativeWarpMotion => "SDL_MOUSE_RELATIVE_WARP_MOTION"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE \"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE\""
    )]
    public static Utf8String HintMouseRelativeCursorVisible =>
        "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL \"SDL_MOUSE_RELATIVE_CLIP_INTERVAL\""
    )]
    public static Utf8String HintMouseRelativeClipInterval => "SDL_MOUSE_RELATIVE_CLIP_INTERVAL"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_TOUCH_EVENTS \"SDL_MOUSE_TOUCH_EVENTS\"")]
    public static Utf8String HintMouseTouchEvents => "SDL_MOUSE_TOUCH_EVENTS"u8;

    [NativeTypeName("#define SDL_HINT_MUTE_CONSOLE_KEYBOARD \"SDL_MUTE_CONSOLE_KEYBOARD\"")]
    public static Utf8String HintMuteConsoleKeyboard => "SDL_MUTE_CONSOLE_KEYBOARD"u8;

    [NativeTypeName("#define SDL_HINT_NO_SIGNAL_HANDLERS \"SDL_NO_SIGNAL_HANDLERS\"")]
    public static Utf8String HintNoSignalHandlers => "SDL_NO_SIGNAL_HANDLERS"u8;

    [NativeTypeName("#define SDL_HINT_OPENGL_LIBRARY \"SDL_OPENGL_LIBRARY\"")]
    public static Utf8String HintOpenglLibrary => "SDL_OPENGL_LIBRARY"u8;

    [NativeTypeName("#define SDL_HINT_OPENGL_ES_DRIVER \"SDL_OPENGL_ES_DRIVER\"")]
    public static Utf8String HintOpenglEsDriver => "SDL_OPENGL_ES_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_OPENVR_LIBRARY \"SDL_OPENVR_LIBRARY\"")]
    public static Utf8String HintOpenvrLibrary => "SDL_OPENVR_LIBRARY"u8;

    [NativeTypeName("#define SDL_HINT_ORIENTATIONS \"SDL_ORIENTATIONS\"")]
    public static Utf8String HintOrientations => "SDL_ORIENTATIONS"u8;

    [NativeTypeName("#define SDL_HINT_POLL_SENTINEL \"SDL_POLL_SENTINEL\"")]
    public static Utf8String HintPollSentinel => "SDL_POLL_SENTINEL"u8;

    [NativeTypeName("#define SDL_HINT_PREFERRED_LOCALES \"SDL_PREFERRED_LOCALES\"")]
    public static Utf8String HintPreferredLocales => "SDL_PREFERRED_LOCALES"u8;

    [NativeTypeName("#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE \"SDL_QUIT_ON_LAST_WINDOW_CLOSE\"")]
    public static Utf8String HintQuitOnLastWindowClose => "SDL_QUIT_ON_LAST_WINDOW_CLOSE"u8;

    [NativeTypeName(
        "#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE \"SDL_RENDER_DIRECT3D_THREADSAFE\""
    )]
    public static Utf8String HintRenderDirect3DThreadsafe => "SDL_RENDER_DIRECT3D_THREADSAFE"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_DIRECT3D11_DEBUG \"SDL_RENDER_DIRECT3D11_DEBUG\"")]
    public static Utf8String HintRenderDirect3D11Debug => "SDL_RENDER_DIRECT3D11_DEBUG"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_VULKAN_DEBUG \"SDL_RENDER_VULKAN_DEBUG\"")]
    public static Utf8String HintRenderVulkanDebug => "SDL_RENDER_VULKAN_DEBUG"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_GPU_DEBUG \"SDL_RENDER_GPU_DEBUG\"")]
    public static Utf8String HintRenderGpuDebug => "SDL_RENDER_GPU_DEBUG"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_GPU_LOW_POWER \"SDL_RENDER_GPU_LOW_POWER\"")]
    public static Utf8String HintRenderGpuLowPower => "SDL_RENDER_GPU_LOW_POWER"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_DRIVER \"SDL_RENDER_DRIVER\"")]
    public static Utf8String HintRenderDriver => "SDL_RENDER_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_LINE_METHOD \"SDL_RENDER_LINE_METHOD\"")]
    public static Utf8String HintRenderLineMethod => "SDL_RENDER_LINE_METHOD"u8;

    [NativeTypeName(
        "#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE \"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\""
    )]
    public static Utf8String HintRenderMetalPreferLowPowerDevice =>
        "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_VSYNC \"SDL_RENDER_VSYNC\"")]
    public static Utf8String HintRenderVsync => "SDL_RENDER_VSYNC"u8;

    [NativeTypeName("#define SDL_HINT_RETURN_KEY_HIDES_IME \"SDL_RETURN_KEY_HIDES_IME\"")]
    public static Utf8String HintReturnKeyHidesIme => "SDL_RETURN_KEY_HIDES_IME"u8;

    [NativeTypeName("#define SDL_HINT_ROG_GAMEPAD_MICE \"SDL_ROG_GAMEPAD_MICE\"")]
    public static Utf8String HintRogGamepadMice => "SDL_ROG_GAMEPAD_MICE"u8;

    [NativeTypeName("#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED \"SDL_ROG_GAMEPAD_MICE_EXCLUDED\"")]
    public static Utf8String HintRogGamepadMiceExcluded => "SDL_ROG_GAMEPAD_MICE_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_RPI_VIDEO_LAYER \"SDL_RPI_VIDEO_LAYER\"")]
    public static Utf8String HintRpiVideoLayer => "SDL_RPI_VIDEO_LAYER"u8;

    [NativeTypeName(
        "#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME \"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\""
    )]
    public static Utf8String HintScreensaverInhibitActivityName =>
        "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"u8;

    [NativeTypeName("#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT \"SDL_SHUTDOWN_DBUS_ON_QUIT\"")]
    public static Utf8String HintShutdownDbusOnQuit => "SDL_SHUTDOWN_DBUS_ON_QUIT"u8;

    [NativeTypeName("#define SDL_HINT_STORAGE_TITLE_DRIVER \"SDL_STORAGE_TITLE_DRIVER\"")]
    public static Utf8String HintStorageTitleDriver => "SDL_STORAGE_TITLE_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_STORAGE_USER_DRIVER \"SDL_STORAGE_USER_DRIVER\"")]
    public static Utf8String HintStorageUserDriver => "SDL_STORAGE_USER_DRIVER"u8;

    [NativeTypeName(
        "#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL \"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\""
    )]
    public static Utf8String HintThreadForceRealtimeTimeCritical =>
        "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"u8;

    [NativeTypeName("#define SDL_HINT_THREAD_PRIORITY_POLICY \"SDL_THREAD_PRIORITY_POLICY\"")]
    public static Utf8String HintThreadPriorityPolicy => "SDL_THREAD_PRIORITY_POLICY"u8;

    [NativeTypeName("#define SDL_HINT_TIMER_RESOLUTION \"SDL_TIMER_RESOLUTION\"")]
    public static Utf8String HintTimerResolution => "SDL_TIMER_RESOLUTION"u8;

    [NativeTypeName("#define SDL_HINT_TOUCH_MOUSE_EVENTS \"SDL_TOUCH_MOUSE_EVENTS\"")]
    public static Utf8String HintTouchMouseEvents => "SDL_TOUCH_MOUSE_EVENTS"u8;

    [NativeTypeName("#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY \"SDL_TRACKPAD_IS_TOUCH_ONLY\"")]
    public static Utf8String HintTrackpadIsTouchOnly => "SDL_TRACKPAD_IS_TOUCH_ONLY"u8;

    [NativeTypeName("#define SDL_HINT_TV_REMOTE_AS_JOYSTICK \"SDL_TV_REMOTE_AS_JOYSTICK\"")]
    public static Utf8String HintTvRemoteAsJoystick => "SDL_TV_REMOTE_AS_JOYSTICK"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER \"SDL_VIDEO_ALLOW_SCREENSAVER\"")]
    public static Utf8String HintVideoAllowScreensaver => "SDL_VIDEO_ALLOW_SCREENSAVER"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DISPLAY_PRIORITY \"SDL_VIDEO_DISPLAY_PRIORITY\"")]
    public static Utf8String HintVideoDisplayPriority => "SDL_VIDEO_DISPLAY_PRIORITY"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DOUBLE_BUFFER \"SDL_VIDEO_DOUBLE_BUFFER\"")]
    public static Utf8String HintVideoDoubleBuffer => "SDL_VIDEO_DOUBLE_BUFFER"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DRIVER \"SDL_VIDEO_DRIVER\"")]
    public static Utf8String HintVideoDriver => "SDL_VIDEO_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES \"SDL_VIDEO_DUMMY_SAVE_FRAMES\"")]
    public static Utf8String HintVideoDummySaveFrames => "SDL_VIDEO_DUMMY_SAVE_FRAMES"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK \"SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK\""
    )]
    public static Utf8String HintVideoEglAllowGetdisplayFallback =>
        "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_FORCE_EGL \"SDL_VIDEO_FORCE_EGL\"")]
    public static Utf8String HintVideoForceEgl => "SDL_VIDEO_FORCE_EGL"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES \"SDL_VIDEO_MAC_FULLSCREEN_SPACES\""
    )]
    public static Utf8String HintVideoMacFullscreenSpaces => "SDL_VIDEO_MAC_FULLSCREEN_SPACES"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS \"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\""
    )]
    public static Utf8String HintVideoMinimizeOnFocusLoss => "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES \"SDL_VIDEO_OFFSCREEN_SAVE_FRAMES\""
    )]
    public static Utf8String HintVideoOffscreenSaveFrames => "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS \"SDL_VIDEO_SYNC_WINDOW_OPERATIONS\""
    )]
    public static Utf8String HintVideoSyncWindowOperations => "SDL_VIDEO_SYNC_WINDOW_OPERATIONS"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR \"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\""
    )]
    public static Utf8String HintVideoWaylandAllowLibdecor => "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION \"SDL_VIDEO_WAYLAND_MODE_EMULATION\""
    )]
    public static Utf8String HintVideoWaylandModeEmulation => "SDL_VIDEO_WAYLAND_MODE_EMULATION"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_MODE_SCALING \"SDL_VIDEO_WAYLAND_MODE_SCALING\""
    )]
    public static Utf8String HintVideoWaylandModeScaling => "SDL_VIDEO_WAYLAND_MODE_SCALING"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR \"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\""
    )]
    public static Utf8String HintVideoWaylandPreferLibdecor =>
        "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY \"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY\""
    )]
    public static Utf8String HintVideoWaylandScaleToDisplay =>
        "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_WIN_D3DCOMPILER \"SDL_VIDEO_WIN_D3DCOMPILER\"")]
    public static Utf8String HintVideoWinD3Dcompiler => "SDL_VIDEO_WIN_D3DCOMPILER"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR \"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\""
    )]
    public static Utf8String HintVideoX11NetWmBypassCompositor =>
        "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_NET_WM_PING \"SDL_VIDEO_X11_NET_WM_PING\"")]
    public static Utf8String HintVideoX11NetWmPing => "SDL_VIDEO_X11_NET_WM_PING"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_NODIRECTCOLOR \"SDL_VIDEO_X11_NODIRECTCOLOR\"")]
    public static Utf8String HintVideoX11Nodirectcolor => "SDL_VIDEO_X11_NODIRECTCOLOR"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_SCALING_FACTOR \"SDL_VIDEO_X11_SCALING_FACTOR\"")]
    public static Utf8String HintVideoX11ScalingFactor => "SDL_VIDEO_X11_SCALING_FACTOR"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_VISUALID \"SDL_VIDEO_X11_VISUALID\"")]
    public static Utf8String HintVideoX11Visualid => "SDL_VIDEO_X11_VISUALID"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID \"SDL_VIDEO_X11_WINDOW_VISUALID\"")]
    public static Utf8String HintVideoX11WindowVisualid => "SDL_VIDEO_X11_WINDOW_VISUALID"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_XRANDR \"SDL_VIDEO_X11_XRANDR\"")]
    public static Utf8String HintVideoX11Xrandr => "SDL_VIDEO_X11_XRANDR"u8;

    [NativeTypeName("#define SDL_HINT_VITA_ENABLE_BACK_TOUCH \"SDL_VITA_ENABLE_BACK_TOUCH\"")]
    public static Utf8String HintVitaEnableBackTouch => "SDL_VITA_ENABLE_BACK_TOUCH"u8;

    [NativeTypeName("#define SDL_HINT_VITA_ENABLE_FRONT_TOUCH \"SDL_VITA_ENABLE_FRONT_TOUCH\"")]
    public static Utf8String HintVitaEnableFrontTouch => "SDL_VITA_ENABLE_FRONT_TOUCH"u8;

    [NativeTypeName("#define SDL_HINT_VITA_MODULE_PATH \"SDL_VITA_MODULE_PATH\"")]
    public static Utf8String HintVitaModulePath => "SDL_VITA_MODULE_PATH"u8;

    [NativeTypeName("#define SDL_HINT_VITA_PVR_INIT \"SDL_VITA_PVR_INIT\"")]
    public static Utf8String HintVitaPvrInit => "SDL_VITA_PVR_INIT"u8;

    [NativeTypeName("#define SDL_HINT_VITA_RESOLUTION \"SDL_VITA_RESOLUTION\"")]
    public static Utf8String HintVitaResolution => "SDL_VITA_RESOLUTION"u8;

    [NativeTypeName("#define SDL_HINT_VITA_PVR_OPENGL \"SDL_VITA_PVR_OPENGL\"")]
    public static Utf8String HintVitaPvrOpengl => "SDL_VITA_PVR_OPENGL"u8;

    [NativeTypeName("#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE \"SDL_VITA_TOUCH_MOUSE_DEVICE\"")]
    public static Utf8String HintVitaTouchMouseDevice => "SDL_VITA_TOUCH_MOUSE_DEVICE"u8;

    [NativeTypeName("#define SDL_HINT_VULKAN_DISPLAY \"SDL_VULKAN_DISPLAY\"")]
    public static Utf8String HintVulkanDisplay => "SDL_VULKAN_DISPLAY"u8;

    [NativeTypeName("#define SDL_HINT_VULKAN_LIBRARY \"SDL_VULKAN_LIBRARY\"")]
    public static Utf8String HintVulkanLibrary => "SDL_VULKAN_LIBRARY"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_FACT_CHUNK \"SDL_WAVE_FACT_CHUNK\"")]
    public static Utf8String HintWaveFactChunk => "SDL_WAVE_FACT_CHUNK"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_CHUNK_LIMIT \"SDL_WAVE_CHUNK_LIMIT\"")]
    public static Utf8String HintWaveChunkLimit => "SDL_WAVE_CHUNK_LIMIT"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE \"SDL_WAVE_RIFF_CHUNK_SIZE\"")]
    public static Utf8String HintWaveRiffChunkSize => "SDL_WAVE_RIFF_CHUNK_SIZE"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_TRUNCATION \"SDL_WAVE_TRUNCATION\"")]
    public static Utf8String HintWaveTruncation => "SDL_WAVE_TRUNCATION"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED \"SDL_WINDOW_ACTIVATE_WHEN_RAISED\""
    )]
    public static Utf8String HintWindowActivateWhenRaised => "SDL_WINDOW_ACTIVATE_WHEN_RAISED"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN \"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\""
    )]
    public static Utf8String HintWindowActivateWhenShown => "SDL_WINDOW_ACTIVATE_WHEN_SHOWN"u8;

    [NativeTypeName("#define SDL_HINT_WINDOW_ALLOW_TOPMOST \"SDL_WINDOW_ALLOW_TOPMOST\"")]
    public static Utf8String HintWindowAllowTopmost => "SDL_WINDOW_ALLOW_TOPMOST"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN \"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\""
    )]
    public static Utf8String HintWindowFrameUsableWhileCursorHidden =>
        "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 \"SDL_WINDOWS_CLOSE_ON_ALT_F4\"")]
    public static Utf8String HintWindowsCloseOnAltF4 => "SDL_WINDOWS_CLOSE_ON_ALT_F4"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS \"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\""
    )]
    public static Utf8String HintWindowsEnableMenuMnemonics =>
        "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP \"SDL_WINDOWS_ENABLE_MESSAGELOOP\""
    )]
    public static Utf8String HintWindowsEnableMessageloop => "SDL_WINDOWS_ENABLE_MESSAGELOOP"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_GAMEINPUT \"SDL_WINDOWS_GAMEINPUT\"")]
    public static Utf8String HintWindowsGameinput => "SDL_WINDOWS_GAMEINPUT"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_RAW_KEYBOARD \"SDL_WINDOWS_RAW_KEYBOARD\"")]
    public static Utf8String HintWindowsRawKeyboard => "SDL_WINDOWS_RAW_KEYBOARD"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL \"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\""
    )]
    public static Utf8String HintWindowsForceSemaphoreKernel =>
        "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_INTRESOURCE_ICON \"SDL_WINDOWS_INTRESOURCE_ICON\"")]
    public static Utf8String HintWindowsIntresourceIcon => "SDL_WINDOWS_INTRESOURCE_ICON"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL \"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\""
    )]
    public static Utf8String HintWindowsIntresourceIconSmall =>
        "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_USE_D3D9EX \"SDL_WINDOWS_USE_D3D9EX\"")]
    public static Utf8String HintWindowsUseD3D9Ex => "SDL_WINDOWS_USE_D3D9EX"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE \"SDL_WINDOWS_ERASE_BACKGROUND_MODE\""
    )]
    public static Utf8String HintWindowsEraseBackgroundMode =>
        "SDL_WINDOWS_ERASE_BACKGROUND_MODE"u8;

    [NativeTypeName(
        "#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT \"SDL_X11_FORCE_OVERRIDE_REDIRECT\""
    )]
    public static Utf8String HintX11ForceOverrideRedirect => "SDL_X11_FORCE_OVERRIDE_REDIRECT"u8;

    [NativeTypeName("#define SDL_HINT_X11_WINDOW_TYPE \"SDL_X11_WINDOW_TYPE\"")]
    public static Utf8String HintX11WindowType => "SDL_X11_WINDOW_TYPE"u8;

    [NativeTypeName("#define SDL_HINT_X11_XCB_LIBRARY \"SDL_X11_XCB_LIBRARY\"")]
    public static Utf8String HintX11XcbLibrary => "SDL_X11_XCB_LIBRARY"u8;

    [NativeTypeName("#define SDL_HINT_XINPUT_ENABLED \"SDL_XINPUT_ENABLED\"")]
    public static Utf8String HintXinputEnabled => "SDL_XINPUT_ENABLED"u8;

    [NativeTypeName("#define SDL_HINT_ASSERT \"SDL_ASSERT\"")]
    public static Utf8String HintAssert => "SDL_ASSERT"u8;

    [NativeTypeName("#define SDL_INIT_AUDIO 0x00000010u")]
    public const uint InitAudio = 0x00000010U;

    [NativeTypeName("#define SDL_INIT_VIDEO 0x00000020u")]
    public const uint InitVideo = 0x00000020U;

    [NativeTypeName("#define SDL_INIT_JOYSTICK 0x00000200u")]
    public const uint InitJoystick = 0x00000200U;

    [NativeTypeName("#define SDL_INIT_HAPTIC 0x00001000u")]
    public const uint InitHaptic = 0x00001000U;

    [NativeTypeName("#define SDL_INIT_GAMEPAD 0x00002000u")]
    public const uint InitGamepad = 0x00002000U;

    [NativeTypeName("#define SDL_INIT_EVENTS 0x00004000u")]
    public const uint InitEvents = 0x00004000U;

    [NativeTypeName("#define SDL_INIT_SENSOR 0x00008000u")]
    public const uint InitSensor = 0x00008000U;

    [NativeTypeName("#define SDL_INIT_CAMERA 0x00010000u")]
    public const uint InitCamera = 0x00010000U;

    [NativeTypeName("#define SDL_PROP_APP_METADATA_NAME_STRING \"SDL.app.metadata.name\"")]
    public static Utf8String PropAppMetadataNameString => "SDL.app.metadata.name"u8;

    [NativeTypeName("#define SDL_PROP_APP_METADATA_VERSION_STRING \"SDL.app.metadata.version\"")]
    public static Utf8String PropAppMetadataVersionString => "SDL.app.metadata.version"u8;

    [NativeTypeName(
        "#define SDL_PROP_APP_METADATA_IDENTIFIER_STRING \"SDL.app.metadata.identifier\""
    )]
    public static Utf8String PropAppMetadataIdentifierString => "SDL.app.metadata.identifier"u8;

    [NativeTypeName("#define SDL_PROP_APP_METADATA_CREATOR_STRING \"SDL.app.metadata.creator\"")]
    public static Utf8String PropAppMetadataCreatorString => "SDL.app.metadata.creator"u8;

    [NativeTypeName(
        "#define SDL_PROP_APP_METADATA_COPYRIGHT_STRING \"SDL.app.metadata.copyright\""
    )]
    public static Utf8String PropAppMetadataCopyrightString => "SDL.app.metadata.copyright"u8;

    [NativeTypeName("#define SDL_PROP_APP_METADATA_URL_STRING \"SDL.app.metadata.url\"")]
    public static Utf8String PropAppMetadataUrlString => "SDL.app.metadata.url"u8;

    [NativeTypeName("#define SDL_PROP_APP_METADATA_TYPE_STRING \"SDL.app.metadata.type\"")]
    public static Utf8String PropAppMetadataTypeString => "SDL.app.metadata.type"u8;

    [NativeTypeName("#define SDL_MESSAGEBOX_ERROR 0x00000010u")]
    public const uint MessageboxError = 0x00000010U;

    [NativeTypeName("#define SDL_MESSAGEBOX_WARNING 0x00000020u")]
    public const uint MessageboxWarning = 0x00000020U;

    [NativeTypeName("#define SDL_MESSAGEBOX_INFORMATION 0x00000040u")]
    public const uint MessageboxInformation = 0x00000040U;

    [NativeTypeName("#define SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT 0x00000080u")]
    public const uint MessageboxButtonsLeftToRight = 0x00000080U;

    [NativeTypeName("#define SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT 0x00000100u")]
    public const uint MessageboxButtonsRightToLeft = 0x00000100U;

    [NativeTypeName("#define SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT 0x00000001u")]
    public const uint MessageboxButtonReturnkeyDefault = 0x00000001U;

    [NativeTypeName("#define SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT 0x00000002u")]
    public const uint MessageboxButtonEscapekeyDefault = 0x00000002U;

    [NativeTypeName("#define SDL_SOFTWARE_RENDERER \"software\"")]
    public static Utf8String SoftwareRenderer => "software"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_NAME_STRING \"SDL.renderer.create.name\"")]
    public static Utf8String PropRendererCreateNameString => "SDL.renderer.create.name"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_WINDOW_POINTER \"SDL.renderer.create.window\""
    )]
    public static Utf8String PropRendererCreateWindowPointer => "SDL.renderer.create.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_SURFACE_POINTER \"SDL.renderer.create.surface\""
    )]
    public static Utf8String PropRendererCreateSurfacePointer => "SDL.renderer.create.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER \"SDL.renderer.create.output_colorspace\""
    )]
    public static Utf8String PropRendererCreateOutputColorspaceNumber =>
        "SDL.renderer.create.output_colorspace"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER \"SDL.renderer.create.present_vsync\""
    )]
    public static Utf8String PropRendererCreatePresentVsyncNumber =>
        "SDL.renderer.create.present_vsync"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER \"SDL.renderer.create.vulkan.instance\""
    )]
    public static Utf8String PropRendererCreateVulkanInstancePointer =>
        "SDL.renderer.create.vulkan.instance"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER \"SDL.renderer.create.vulkan.surface\""
    )]
    public static Utf8String PropRendererCreateVulkanSurfaceNumber =>
        "SDL.renderer.create.vulkan.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER \"SDL.renderer.create.vulkan.physical_device\""
    )]
    public static Utf8String PropRendererCreateVulkanPhysicalDevicePointer =>
        "SDL.renderer.create.vulkan.physical_device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER \"SDL.renderer.create.vulkan.device\""
    )]
    public static Utf8String PropRendererCreateVulkanDevicePointer =>
        "SDL.renderer.create.vulkan.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.create.vulkan.graphics_queue_family_index\""
    )]
    public static Utf8String PropRendererCreateVulkanGraphicsQueueFamilyIndexNumber =>
        "SDL.renderer.create.vulkan.graphics_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.create.vulkan.present_queue_family_index\""
    )]
    public static Utf8String PropRendererCreateVulkanPresentQueueFamilyIndexNumber =>
        "SDL.renderer.create.vulkan.present_queue_family_index"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_NAME_STRING \"SDL.renderer.name\"")]
    public static Utf8String PropRendererNameString => "SDL.renderer.name"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_WINDOW_POINTER \"SDL.renderer.window\"")]
    public static Utf8String PropRendererWindowPointer => "SDL.renderer.window"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_SURFACE_POINTER \"SDL.renderer.surface\"")]
    public static Utf8String PropRendererSurfacePointer => "SDL.renderer.surface"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_VSYNC_NUMBER \"SDL.renderer.vsync\"")]
    public static Utf8String PropRendererVsyncNumber => "SDL.renderer.vsync"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER \"SDL.renderer.max_texture_size\""
    )]
    public static Utf8String PropRendererMaxTextureSizeNumber => "SDL.renderer.max_texture_size"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER \"SDL.renderer.texture_formats\""
    )]
    public static Utf8String PropRendererTextureFormatsPointer => "SDL.renderer.texture_formats"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER \"SDL.renderer.output_colorspace\""
    )]
    public static Utf8String PropRendererOutputColorspaceNumber =>
        "SDL.renderer.output_colorspace"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN \"SDL.renderer.HDR_enabled\"")]
    public static Utf8String PropRendererHdrEnabledBoolean => "SDL.renderer.HDR_enabled"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT \"SDL.renderer.SDR_white_point\""
    )]
    public static Utf8String PropRendererSdrWhitePointFloat => "SDL.renderer.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT \"SDL.renderer.HDR_headroom\"")]
    public static Utf8String PropRendererHdrHeadroomFloat => "SDL.renderer.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D9_DEVICE_POINTER \"SDL.renderer.d3d9.device\"")]
    public static Utf8String PropRendererD3D9DevicePointer => "SDL.renderer.d3d9.device"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D11_DEVICE_POINTER \"SDL.renderer.d3d11.device\"")]
    public static Utf8String PropRendererD3D11DevicePointer => "SDL.renderer.d3d11.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER \"SDL.renderer.d3d11.swap_chain\""
    )]
    public static Utf8String PropRendererD3D11SwapchainPointer => "SDL.renderer.d3d11.swap_chain"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D12_DEVICE_POINTER \"SDL.renderer.d3d12.device\"")]
    public static Utf8String PropRendererD3D12DevicePointer => "SDL.renderer.d3d12.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER \"SDL.renderer.d3d12.swap_chain\""
    )]
    public static Utf8String PropRendererD3D12SwapchainPointer => "SDL.renderer.d3d12.swap_chain"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER \"SDL.renderer.d3d12.command_queue\""
    )]
    public static Utf8String PropRendererD3D12CommandQueuePointer =>
        "SDL.renderer.d3d12.command_queue"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER \"SDL.renderer.vulkan.instance\""
    )]
    public static Utf8String PropRendererVulkanInstancePointer => "SDL.renderer.vulkan.instance"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER \"SDL.renderer.vulkan.surface\""
    )]
    public static Utf8String PropRendererVulkanSurfaceNumber => "SDL.renderer.vulkan.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER \"SDL.renderer.vulkan.physical_device\""
    )]
    public static Utf8String PropRendererVulkanPhysicalDevicePointer =>
        "SDL.renderer.vulkan.physical_device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER \"SDL.renderer.vulkan.device\""
    )]
    public static Utf8String PropRendererVulkanDevicePointer => "SDL.renderer.vulkan.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.vulkan.graphics_queue_family_index\""
    )]
    public static Utf8String PropRendererVulkanGraphicsQueueFamilyIndexNumber =>
        "SDL.renderer.vulkan.graphics_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.vulkan.present_queue_family_index\""
    )]
    public static Utf8String PropRendererVulkanPresentQueueFamilyIndexNumber =>
        "SDL.renderer.vulkan.present_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER \"SDL.renderer.vulkan.swapchain_image_count\""
    )]
    public static Utf8String PropRendererVulkanSwapchainImageCountNumber =>
        "SDL.renderer.vulkan.swapchain_image_count"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER \"SDL.texture.create.colorspace\""
    )]
    public static Utf8String PropTextureCreateColorspaceNumber => "SDL.texture.create.colorspace"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER \"SDL.texture.create.format\"")]
    public static Utf8String PropTextureCreateFormatNumber => "SDL.texture.create.format"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER \"SDL.texture.create.access\"")]
    public static Utf8String PropTextureCreateAccessNumber => "SDL.texture.create.access"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER \"SDL.texture.create.width\"")]
    public static Utf8String PropTextureCreateWidthNumber => "SDL.texture.create.width"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER \"SDL.texture.create.height\"")]
    public static Utf8String PropTextureCreateHeightNumber => "SDL.texture.create.height"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT \"SDL.texture.create.SDR_white_point\""
    )]
    public static Utf8String PropTextureCreateSdrWhitePointFloat =>
        "SDL.texture.create.SDR_white_point"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT \"SDL.texture.create.HDR_headroom\""
    )]
    public static Utf8String PropTextureCreateHdrHeadroomFloat =>
        "SDL.texture.create.HDR_headroom"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER \"SDL.texture.create.d3d11.texture\""
    )]
    public static Utf8String PropTextureCreateD3D11TexturePointer =>
        "SDL.texture.create.d3d11.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER \"SDL.texture.create.d3d11.texture_u\""
    )]
    public static Utf8String PropTextureCreateD3D11TextureUPointer =>
        "SDL.texture.create.d3d11.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER \"SDL.texture.create.d3d11.texture_v\""
    )]
    public static Utf8String PropTextureCreateD3D11TextureVPointer =>
        "SDL.texture.create.d3d11.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER \"SDL.texture.create.d3d12.texture\""
    )]
    public static Utf8String PropTextureCreateD3D12TexturePointer =>
        "SDL.texture.create.d3d12.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER \"SDL.texture.create.d3d12.texture_u\""
    )]
    public static Utf8String PropTextureCreateD3D12TextureUPointer =>
        "SDL.texture.create.d3d12.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER \"SDL.texture.create.d3d12.texture_v\""
    )]
    public static Utf8String PropTextureCreateD3D12TextureVPointer =>
        "SDL.texture.create.d3d12.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER \"SDL.texture.create.metal.pixelbuffer\""
    )]
    public static Utf8String PropTextureCreateMetalPixelbufferPointer =>
        "SDL.texture.create.metal.pixelbuffer"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER \"SDL.texture.create.opengl.texture\""
    )]
    public static Utf8String PropTextureCreateOpenglTextureNumber =>
        "SDL.texture.create.opengl.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER \"SDL.texture.create.opengl.texture_uv\""
    )]
    public static Utf8String PropTextureCreateOpenglTextureUvNumber =>
        "SDL.texture.create.opengl.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER \"SDL.texture.create.opengl.texture_u\""
    )]
    public static Utf8String PropTextureCreateOpenglTextureUNumber =>
        "SDL.texture.create.opengl.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER \"SDL.texture.create.opengl.texture_v\""
    )]
    public static Utf8String PropTextureCreateOpenglTextureVNumber =>
        "SDL.texture.create.opengl.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER \"SDL.texture.create.opengles2.texture\""
    )]
    public static Utf8String PropTextureCreateOpengles2TextureNumber =>
        "SDL.texture.create.opengles2.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER \"SDL.texture.create.opengles2.texture_uv\""
    )]
    public static Utf8String PropTextureCreateOpengles2TextureUvNumber =>
        "SDL.texture.create.opengles2.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER \"SDL.texture.create.opengles2.texture_u\""
    )]
    public static Utf8String PropTextureCreateOpengles2TextureUNumber =>
        "SDL.texture.create.opengles2.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER \"SDL.texture.create.opengles2.texture_v\""
    )]
    public static Utf8String PropTextureCreateOpengles2TextureVNumber =>
        "SDL.texture.create.opengles2.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER \"SDL.texture.create.vulkan.texture\""
    )]
    public static Utf8String PropTextureCreateVulkanTextureNumber =>
        "SDL.texture.create.vulkan.texture"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_COLORSPACE_NUMBER \"SDL.texture.colorspace\"")]
    public static Utf8String PropTextureColorspaceNumber => "SDL.texture.colorspace"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_FORMAT_NUMBER \"SDL.texture.format\"")]
    public static Utf8String PropTextureFormatNumber => "SDL.texture.format"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_ACCESS_NUMBER \"SDL.texture.access\"")]
    public static Utf8String PropTextureAccessNumber => "SDL.texture.access"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_WIDTH_NUMBER \"SDL.texture.width\"")]
    public static Utf8String PropTextureWidthNumber => "SDL.texture.width"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_HEIGHT_NUMBER \"SDL.texture.height\"")]
    public static Utf8String PropTextureHeightNumber => "SDL.texture.height"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT \"SDL.texture.SDR_white_point\""
    )]
    public static Utf8String PropTextureSdrWhitePointFloat => "SDL.texture.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT \"SDL.texture.HDR_headroom\"")]
    public static Utf8String PropTextureHdrHeadroomFloat => "SDL.texture.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER \"SDL.texture.d3d11.texture\"")]
    public static Utf8String PropTextureD3D11TexturePointer => "SDL.texture.d3d11.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER \"SDL.texture.d3d11.texture_u\""
    )]
    public static Utf8String PropTextureD3D11TextureUPointer => "SDL.texture.d3d11.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER \"SDL.texture.d3d11.texture_v\""
    )]
    public static Utf8String PropTextureD3D11TextureVPointer => "SDL.texture.d3d11.texture_v"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER \"SDL.texture.d3d12.texture\"")]
    public static Utf8String PropTextureD3D12TexturePointer => "SDL.texture.d3d12.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER \"SDL.texture.d3d12.texture_u\""
    )]
    public static Utf8String PropTextureD3D12TextureUPointer => "SDL.texture.d3d12.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER \"SDL.texture.d3d12.texture_v\""
    )]
    public static Utf8String PropTextureD3D12TextureVPointer => "SDL.texture.d3d12.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER \"SDL.texture.opengl.texture\""
    )]
    public static Utf8String PropTextureOpenglTextureNumber => "SDL.texture.opengl.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER \"SDL.texture.opengl.texture_uv\""
    )]
    public static Utf8String PropTextureOpenglTextureUvNumber => "SDL.texture.opengl.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER \"SDL.texture.opengl.texture_u\""
    )]
    public static Utf8String PropTextureOpenglTextureUNumber => "SDL.texture.opengl.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER \"SDL.texture.opengl.texture_v\""
    )]
    public static Utf8String PropTextureOpenglTextureVNumber => "SDL.texture.opengl.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER \"SDL.texture.opengl.target\""
    )]
    public static Utf8String PropTextureOpenglTextureTargetNumber => "SDL.texture.opengl.target"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT \"SDL.texture.opengl.tex_w\"")]
    public static Utf8String PropTextureOpenglTexWFloat => "SDL.texture.opengl.tex_w"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT \"SDL.texture.opengl.tex_h\"")]
    public static Utf8String PropTextureOpenglTexHFloat => "SDL.texture.opengl.tex_h"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER \"SDL.texture.opengles2.texture\""
    )]
    public static Utf8String PropTextureOpengles2TextureNumber => "SDL.texture.opengles2.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER \"SDL.texture.opengles2.texture_uv\""
    )]
    public static Utf8String PropTextureOpengles2TextureUvNumber =>
        "SDL.texture.opengles2.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER \"SDL.texture.opengles2.texture_u\""
    )]
    public static Utf8String PropTextureOpengles2TextureUNumber =>
        "SDL.texture.opengles2.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER \"SDL.texture.opengles2.texture_v\""
    )]
    public static Utf8String PropTextureOpengles2TextureVNumber =>
        "SDL.texture.opengles2.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER \"SDL.texture.opengles2.target\""
    )]
    public static Utf8String PropTextureOpengles2TextureTargetNumber =>
        "SDL.texture.opengles2.target"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER \"SDL.texture.vulkan.texture\""
    )]
    public static Utf8String PropTextureVulkanTextureNumber => "SDL.texture.vulkan.texture"u8;

    [NativeTypeName("#define SDL_RENDERER_VSYNC_DISABLED 0")]
    public const int RendererVsyncDisabled = 0;

    [NativeTypeName("#define SDL_RENDERER_VSYNC_ADAPTIVE (-1)")]
    public const int RendererVsyncAdaptive = (-1);

    [NativeTypeName("#define SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE 8")]
    public const int DebugTextFontCharacterSize = 8;

    [NativeTypeName("#define SDL_MS_PER_SECOND 1000")]
    public const int MsPerSecond = 1000;

    [NativeTypeName("#define SDL_US_PER_SECOND 1000000")]
    public const int UsPerSecond = 1000000;

    [NativeTypeName("#define SDL_NS_PER_SECOND 1000000000LL")]
    public const long NsPerSecond = 1000000000L;

    [NativeTypeName("#define SDL_NS_PER_MS 1000000")]
    public const int NsPerMs = 1000000;

    [NativeTypeName("#define SDL_NS_PER_US 1000")]
    public const int NsPerUs = 1000;

    [NativeTypeName("#define SDL_MAJOR_VERSION 3")]
    public const int MajorVersion = 3;

    [NativeTypeName("#define SDL_MINOR_VERSION 1")]
    public const int MinorVersion = 1;

    [NativeTypeName("#define SDL_MICRO_VERSION 6")]
    public const int MicroVersion = 6;

    [NativeTypeName(
        "#define SDL_VERSION SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION)"
    )]
    public const int Version = ((3) * 1000000 + (1) * 1000 + (6));

    public static bool PointInRect(
        [NativeTypeName("const SDL_Point *")] Point* p,
        [NativeTypeName("const SDL_Rect *")] Rect* r
    )
    {
        return (
            (p) != null
            && (r) != null
            && (p->X >= r->X)
            && (p->X < (r->X + r->W))
            && (p->Y >= r->Y)
            && (p->Y < (r->Y + r->H))
        )
            ? true
            : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool PointInRect(
        [NativeTypeName("const SDL_Point *")] Ref<Point> p,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> r
    )
    {
        fixed (Rect* __dsl_r = r)
        fixed (Point* __dsl_p = p)
        {
            return (bool)PointInRect(__dsl_p, __dsl_r);
        }
    }

    public static bool PointInRectFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* p,
        [NativeTypeName("const SDL_FRect *")] FRect* r
    )
    {
        return (
            (p) != null
            && (r) != null
            && (p->X >= r->X)
            && (p->X <= (r->X + r->W))
            && (p->Y >= r->Y)
            && (p->Y <= (r->Y + r->H))
        )
            ? true
            : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool PointInRectFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> p,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> r
    )
    {
        fixed (FRect* __dsl_r = r)
        fixed (FPoint* __dsl_p = p)
        {
            return (bool)PointInRectFloat(__dsl_p, __dsl_r);
        }
    }

    public static bool RectEmpty([NativeTypeName("const SDL_Rect *")] Rect* r)
    {
        return ((r == null) || (r->W <= 0) || (r->H <= 0)) ? true : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool RectEmpty([NativeTypeName("const SDL_Rect *")] Ref<Rect> r)
    {
        fixed (Rect* __dsl_r = r)
        {
            return (bool)RectEmpty(__dsl_r);
        }
    }

    public static bool RectEmptyFloat([NativeTypeName("const SDL_FRect *")] FRect* r)
    {
        return ((r == null) || (r->W < 0.0f) || (r->H < 0.0f)) ? true : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool RectEmptyFloat([NativeTypeName("const SDL_FRect *")] Ref<FRect> r)
    {
        fixed (FRect* __dsl_r = r)
        {
            return (bool)RectEmptyFloat(__dsl_r);
        }
    }

    public static bool RectsEqual(
        [NativeTypeName("const SDL_Rect *")] Rect* a,
        [NativeTypeName("const SDL_Rect *")] Rect* b
    )
    {
        return (
            (a) != null
            && (b) != null
            && (a->X == b->X)
            && (a->Y == b->Y)
            && (a->W == b->W)
            && (a->H == b->H)
        )
            ? true
            : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool RectsEqual(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> a,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> b
    )
    {
        fixed (Rect* __dsl_b = b)
        fixed (Rect* __dsl_a = a)
        {
            return (bool)RectsEqual(__dsl_a, __dsl_b);
        }
    }

    public static bool RectsEqualEpsilon(
        [NativeTypeName("const SDL_FRect *")] FRect* a,
        [NativeTypeName("const SDL_FRect *")] FRect* b,
        [NativeTypeName("const float")] float epsilon
    )
    {
        return (
            (a) != null
            && (b) != null
            && (
                (a == b)
                || (
                    (float.Abs(a->X - b->X) <= epsilon)
                    && (float.Abs(a->Y - b->Y) <= epsilon)
                    && (float.Abs(a->W - b->W) <= epsilon)
                    && (float.Abs(a->H - b->H) <= epsilon)
                )
            )
        )
            ? true
            : false;
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool RectsEqualEpsilon(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> a,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> b,
        [NativeTypeName("const float")] float epsilon
    )
    {
        fixed (FRect* __dsl_b = b)
        fixed (FRect* __dsl_a = a)
        {
            return (bool)RectsEqualEpsilon(__dsl_a, __dsl_b, epsilon);
        }
    }

    public static bool RectsEqualFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* a,
        [NativeTypeName("const SDL_FRect *")] FRect* b
    )
    {
        return RectsEqualEpsilon(a, b, 1.1920928955078125e-07F);
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool RectsEqualFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> a,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> b
    )
    {
        fixed (FRect* __dsl_b = b)
        fixed (FRect* __dsl_a = a)
        {
            return (bool)RectsEqualFloat(__dsl_a, __dsl_b);
        }
    }

    public static void RectToFRect([NativeTypeName("const SDL_Rect *")] Rect* rect, FRect* frect)
    {
        frect->X = (float)(rect->X);
        frect->Y = (float)(rect->Y);
        frect->W = (float)(rect->W);
        frect->H = (float)(rect->H);
    }

    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RectToFRect(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref<FRect> frect
    )
    {
        fixed (FRect* __dsl_frect = frect)
        fixed (Rect* __dsl_rect = rect)
        {
            RectToFRect(__dsl_rect, __dsl_frect);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.AcquireCameraFrame(
        CameraHandle camera,
        [NativeTypeName("Uint64 *")] ulong* timestampNS
    ) =>
        (
            (delegate* unmanaged<CameraHandle, ulong*, Surface*>)(
                _slots[0] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[0] = nativeContext.LoadFunction("SDL_AcquireCameraFrame", "SDL3")
            )
        )(camera, timestampNS);

    [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* AcquireCameraFrame(
        CameraHandle camera,
        [NativeTypeName("Uint64 *")] ulong* timestampNS
    ) => DllImport.AcquireCameraFrame(camera, timestampNS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.AcquireCameraFrame(
        CameraHandle camera,
        [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
    )
    {
        fixed (ulong* __dsl_timestampNS = timestampNS)
        {
            return (Surface*)((ISdl)this).AcquireCameraFrame(camera, __dsl_timestampNS);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> AcquireCameraFrame(
        CameraHandle camera,
        [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
    ) => DllImport.AcquireCameraFrame(camera, timestampNS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddAtomicInt(AtomicInt* a, int v) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int>)(
                _slots[1] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[1] = nativeContext.LoadFunction("SDL_AddAtomicInt", "SDL3")
            )
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddAtomicInt(AtomicInt* a, int v) => DllImport.AddAtomicInt(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddAtomicInt(Ref<AtomicInt> a, int v)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).AddAtomicInt(__dsl_a, v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddAtomicInt(Ref<AtomicInt> a, int v) => DllImport.AddAtomicInt(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<EventFilter, void*, byte>)(
                _slots[2] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[2] = nativeContext.LoadFunction("SDL_AddEventWatch", "SDL3")
            )
        )(filter, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) => DllImport.AddEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).AddEventWatch(filter, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        Ref userdata
    ) => DllImport.AddEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
        (
            (delegate* unmanaged<sbyte*, int>)(
                _slots[3] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[3] = nativeContext.LoadFunction("SDL_AddGamepadMapping", "SDL3")
            )
        )(mapping);

    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
        DllImport.AddGamepadMapping(mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
    {
        fixed (sbyte* __dsl_mapping = mapping)
        {
            return (int)((ISdl)this).AddGamepadMapping(__dsl_mapping);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping) =>
        DllImport.AddGamepadMapping(mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
        (
            (delegate* unmanaged<sbyte*, int>)(
                _slots[4] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[4] = nativeContext.LoadFunction(
                        "SDL_AddGamepadMappingsFromFile",
                        "SDL3"
                    )
            )
        )(file);

    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
        DllImport.AddGamepadMappingsFromFile(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromFile([NativeTypeName("const char *")] Ref<sbyte> file)
    {
        fixed (sbyte* __dsl_file = file)
        {
            return (int)((ISdl)this).AddGamepadMappingsFromFile(__dsl_file);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file
    ) => DllImport.AddGamepadMappingsFromFile(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromIO(IOStreamHandle src, [NativeTypeName("bool")] byte closeio) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte, int>)(
                _slots[5] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[5] = nativeContext.LoadFunction("SDL_AddGamepadMappingsFromIO", "SDL3")
            )
        )(src, closeio);

    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] byte closeio
    ) => DllImport.AddGamepadMappingsFromIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => (int)((ISdl)this).AddGamepadMappingsFromIO(src, (byte)closeio);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => DllImport.AddGamepadMappingsFromIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.AddHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<sbyte*, HintCallback, void*, byte>)(
                _slots[6] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[6] = nativeContext.LoadFunction("SDL_AddHintCallback", "SDL3")
            )
        )(name, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte AddHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        void* userdata
    ) => DllImport.AddHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.AddHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).AddHintCallback(__dsl_name, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> AddHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        Ref userdata
    ) => DllImport.AddHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.AddSurfaceAlternateImage(Surface* surface, Surface* image) =>
        (
            (delegate* unmanaged<Surface*, Surface*, byte>)(
                _slots[7] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[7] = nativeContext.LoadFunction("SDL_AddSurfaceAlternateImage", "SDL3")
            )
        )(surface, image);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte AddSurfaceAlternateImage(Surface* surface, Surface* image) =>
        DllImport.AddSurfaceAlternateImage(surface, image);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.AddSurfaceAlternateImage(Ref<Surface> surface, Ref<Surface> image)
    {
        fixed (Surface* __dsl_image = image)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).AddSurfaceAlternateImage(__dsl_surface, __dsl_image);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddSurfaceAlternateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> AddSurfaceAlternateImage(
        Ref<Surface> surface,
        Ref<Surface> image
    ) => DllImport.AddSurfaceAlternateImage(surface, image);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, TimerCallback, void*, uint>)(
                _slots[8] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[8] = nativeContext.LoadFunction("SDL_AddTimer", "SDL3")
            )
        )(interval, callback, userdata);

    [return: NativeTypeName("SDL_TimerID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
        void* userdata
    ) => DllImport.AddTimer(interval, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (uint)((ISdl)this).AddTimer(interval, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("SDL_TimerID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] TimerCallback callback,
        Ref userdata
    ) => DllImport.AddTimer(interval, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimerNS(
        [NativeTypeName("Uint64")] ulong interval,
        [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<ulong, NSTimerCallback, void*, uint>)(
                _slots[9] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[9] = nativeContext.LoadFunction("SDL_AddTimerNS", "SDL3")
            )
        )(interval, callback, userdata);

    [return: NativeTypeName("SDL_TimerID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimerNS(
        [NativeTypeName("Uint64")] ulong interval,
        [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
        void* userdata
    ) => DllImport.AddTimerNS(interval, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimerNS(
        [NativeTypeName("Uint64")] ulong interval,
        [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (uint)((ISdl)this).AddTimerNS(interval, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("SDL_TimerID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddTimerNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimerNS(
        [NativeTypeName("Uint64")] ulong interval,
        [NativeTypeName("SDL_NSTimerCallback")] NSTimerCallback callback,
        Ref userdata
    ) => DllImport.AddTimerNS(interval, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.AddVulkanRenderSemaphores(
        RendererHandle renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).AddVulkanRenderSemaphoresRaw(
                    renderer,
                    wait_stage_mask,
                    wait_semaphore,
                    signal_semaphore
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> AddVulkanRenderSemaphores(
        RendererHandle renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        DllImport.AddVulkanRenderSemaphores(
            renderer,
            wait_stage_mask,
            wait_semaphore,
            signal_semaphore
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.AddVulkanRenderSemaphoresRaw(
        RendererHandle renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        (
            (delegate* unmanaged<RendererHandle, uint, long, long, byte>)(
                _slots[10] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[10] = nativeContext.LoadFunction(
                        "SDL_AddVulkanRenderSemaphores",
                        "SDL3"
                    )
            )
        )(renderer, wait_stage_mask, wait_semaphore, signal_semaphore);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte AddVulkanRenderSemaphoresRaw(
        RendererHandle renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        DllImport.AddVulkanRenderSemaphoresRaw(
            renderer,
            wait_stage_mask,
            wait_semaphore,
            signal_semaphore
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AttachVirtualJoystick(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
    ) =>
        (
            (delegate* unmanaged<VirtualJoystickDesc*, uint>)(
                _slots[11] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[11] = nativeContext.LoadFunction("SDL_AttachVirtualJoystick", "SDL3")
            )
        )(desc);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AttachVirtualJoystick(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
    ) => DllImport.AttachVirtualJoystick(desc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AttachVirtualJoystick(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
    )
    {
        fixed (VirtualJoystickDesc* __dsl_desc = desc)
        {
            return (uint)((ISdl)this).AttachVirtualJoystick(__dsl_desc);
        }
    }

    [return: NativeTypeName("SDL_JoystickID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AttachVirtualJoystick(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
    ) => DllImport.AttachVirtualJoystick(desc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.AudioDevicePaused([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (MaybeBool<byte>)(byte)((ISdl)this).AudioDevicePausedRaw(dev);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> AudioDevicePaused(
        [NativeTypeName("SDL_AudioDeviceID")] uint dev
    ) => DllImport.AudioDevicePaused(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[12] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[12] = nativeContext.LoadFunction("SDL_AudioDevicePaused", "SDL3")
            )
        )(dev);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.AudioDevicePausedRaw(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle stream
    ) => (MaybeBool<byte>)(byte)((ISdl)this).BindAudioStreamRaw(devid, stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle stream
    ) => DllImport.BindAudioStream(devid, stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BindAudioStreamRaw(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle stream
    ) =>
        (
            (delegate* unmanaged<uint, AudioStreamHandle, byte>)(
                _slots[13] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[13] = nativeContext.LoadFunction("SDL_BindAudioStream", "SDL3")
            )
        )(devid, stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BindAudioStreamRaw(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle stream
    ) => DllImport.BindAudioStreamRaw(devid, stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle* streams,
        int num_streams
    ) =>
        (
            (delegate* unmanaged<uint, AudioStreamHandle*, int, byte>)(
                _slots[14] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[14] = nativeContext.LoadFunction("SDL_BindAudioStreams", "SDL3")
            )
        )(devid, streams, num_streams);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioStreamHandle* streams,
        int num_streams
    ) => DllImport.BindAudioStreams(devid, streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioStreamHandle> streams,
        int num_streams
    )
    {
        fixed (AudioStreamHandle* __dsl_streams = streams)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).BindAudioStreams(devid, __dsl_streams, num_streams);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioStreamHandle> streams,
        int num_streams
    ) => DllImport.BindAudioStreams(devid, streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurface(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, byte>)(
                _slots[15] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[15] = nativeContext.LoadFunction("SDL_BlitSurface", "SDL3")
            )
        )(src, srcrect, dst, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurface(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) => DllImport.BlitSurface(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurface(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurface(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) => DllImport.BlitSurface(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurface9Grid(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        int left_width,
        int right_width,
        int top_height,
        int bottom_height,
        float scale,
        ScaleMode scaleMode,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<
                Surface*,
                Rect*,
                int,
                int,
                int,
                int,
                float,
                ScaleMode,
                Surface*,
                Rect*,
                byte>)(
                _slots[16] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[16] = nativeContext.LoadFunction("SDL_BlitSurface9Grid", "SDL3")
            )
        )(
            src,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            scaleMode,
            dst,
            dstrect
        );

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurface9Grid(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        int left_width,
        int right_width,
        int top_height,
        int bottom_height,
        float scale,
        ScaleMode scaleMode,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        DllImport.BlitSurface9Grid(
            src,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            scaleMode,
            dst,
            dstrect
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurface9Grid(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        int left_width,
        int right_width,
        int top_height,
        int bottom_height,
        float scale,
        ScaleMode scaleMode,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurface9Grid(
                        __dsl_src,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface9Grid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurface9Grid(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        int left_width,
        int right_width,
        int top_height,
        int bottom_height,
        float scale,
        ScaleMode scaleMode,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) =>
        DllImport.BlitSurface9Grid(
            src,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            scaleMode,
            dst,
            dstrect
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurfaceScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, ScaleMode, byte>)(
                _slots[17] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[17] = nativeContext.LoadFunction("SDL_BlitSurfaceScaled", "SDL3")
            )
        )(src, srcrect, dst, dstrect, scaleMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurfaceScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurfaceScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurfaceScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurfaceScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurfaceTiled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, byte>)(
                _slots[18] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[18] = nativeContext.LoadFunction("SDL_BlitSurfaceTiled", "SDL3")
            )
        )(src, srcrect, dst, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurfaceTiled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) => DllImport.BlitSurfaceTiled(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurfaceTiled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurfaceTiled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurfaceTiled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) => DllImport.BlitSurfaceTiled(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurfaceTiledWithScale(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        float scale,
        ScaleMode scaleMode,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, float, ScaleMode, Surface*, Rect*, byte>)(
                _slots[19] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[19] = nativeContext.LoadFunction(
                        "SDL_BlitSurfaceTiledWithScale",
                        "SDL3"
                    )
            )
        )(src, srcrect, scale, scaleMode, dst, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurfaceTiledWithScale(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        float scale,
        ScaleMode scaleMode,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) => DllImport.BlitSurfaceTiledWithScale(src, srcrect, scale, scaleMode, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurfaceTiledWithScale(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        float scale,
        ScaleMode scaleMode,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurfaceTiledWithScale(
                        __dsl_src,
                        __dsl_srcrect,
                        scale,
                        scaleMode,
                        __dsl_dst,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurfaceTiledWithScale(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        float scale,
        ScaleMode scaleMode,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) => DllImport.BlitSurfaceTiledWithScale(src, srcrect, scale, scaleMode, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurfaceUnchecked(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, byte>)(
                _slots[20] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[20] = nativeContext.LoadFunction("SDL_BlitSurfaceUnchecked", "SDL3")
            )
        )(src, srcrect, dst, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurfaceUnchecked(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) => DllImport.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurfaceUnchecked(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurfaceUnchecked(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurfaceUnchecked(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) => DllImport.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.BlitSurfaceUncheckedScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, ScaleMode, byte>)(
                _slots[21] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[21] = nativeContext.LoadFunction(
                        "SDL_BlitSurfaceUncheckedScaled",
                        "SDL3"
                    )
            )
        )(src, srcrect, dst, dstrect, scaleMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte BlitSurfaceUncheckedScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.BlitSurfaceUncheckedScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).BlitSurfaceUncheckedScaled(
                        __dsl_src,
                        __dsl_srcrect,
                        __dsl_dst,
                        __dsl_dstrect,
                        scaleMode
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> BlitSurfaceUncheckedScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.BroadcastCondition(ConditionHandle cond) =>
        (
            (delegate* unmanaged<ConditionHandle, void>)(
                _slots[22] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[22] = nativeContext.LoadFunction("SDL_BroadcastCondition", "SDL3")
            )
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void BroadcastCondition(ConditionHandle cond) =>
        DllImport.BroadcastCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CaptureMouse([NativeTypeName("bool")] byte enabled) =>
        (
            (delegate* unmanaged<byte, byte>)(
                _slots[23] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[23] = nativeContext.LoadFunction("SDL_CaptureMouse", "SDL3")
            )
        )(enabled);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CaptureMouse([NativeTypeName("bool")] byte enabled) =>
        DllImport.CaptureMouse(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CaptureMouse([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        (MaybeBool<byte>)(byte)((ISdl)this).CaptureMouse((byte)enabled);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CaptureMouse([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        DllImport.CaptureMouse(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CleanupTLS() =>
        (
            (delegate* unmanaged<void>)(
                _slots[24] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[24] = nativeContext.LoadFunction("SDL_CleanupTLS", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CleanupTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CleanupTLS() => DllImport.CleanupTLS();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearAudioStream(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ClearAudioStreamRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearAudioStream(AudioStreamHandle stream) =>
        DllImport.ClearAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearAudioStreamRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[25] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[25] = nativeContext.LoadFunction("SDL_ClearAudioStream", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearAudioStreamRaw(AudioStreamHandle stream) =>
        DllImport.ClearAudioStreamRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearClipboardData() =>
        (MaybeBool<byte>)(byte)((ISdl)this).ClearClipboardDataRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearClipboardData() => DllImport.ClearClipboardData();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearClipboardDataRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[26] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[26] = nativeContext.LoadFunction("SDL_ClearClipboardData", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearClipboardDataRaw() => DllImport.ClearClipboardDataRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearComposition(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ClearCompositionRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearComposition(WindowHandle window) =>
        DllImport.ClearComposition(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearCompositionRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[27] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[27] = nativeContext.LoadFunction("SDL_ClearComposition", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearComposition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearCompositionRaw(WindowHandle window) =>
        DllImport.ClearCompositionRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearError() => (MaybeBool<byte>)(byte)((ISdl)this).ClearErrorRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearError() => DllImport.ClearError();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearErrorRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[28] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[28] = nativeContext.LoadFunction("SDL_ClearError", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearErrorRaw() => DllImport.ClearErrorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, byte>)(
                _slots[29] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[29] = nativeContext.LoadFunction("SDL_ClearProperty", "SDL3")
            )
        )(props, name);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.ClearProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ClearProperty(props, __dsl_name);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.ClearProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ClearSurface(Surface* surface, float r, float g, float b, float a) =>
        (
            (delegate* unmanaged<Surface*, float, float, float, float, byte>)(
                _slots[30] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[30] = nativeContext.LoadFunction("SDL_ClearSurface", "SDL3")
            )
        )(surface, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ClearSurface(Surface* surface, float r, float g, float b, float a) =>
        DllImport.ClearSurface(surface, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ClearSurface(Ref<Surface> surface, float r, float g, float b, float a)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ClearSurface(__dsl_surface, r, g, b, a);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ClearSurface(
        Ref<Surface> surface,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.ClearSurface(surface, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[31] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[31] = nativeContext.LoadFunction("SDL_CloseAudioDevice", "SDL3")
            )
        )(devid);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.CloseAudioDevice(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseCamera(CameraHandle camera) =>
        (
            (delegate* unmanaged<CameraHandle, void>)(
                _slots[32] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[32] = nativeContext.LoadFunction("SDL_CloseCamera", "SDL3")
            )
        )(camera);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseCamera(CameraHandle camera) => DllImport.CloseCamera(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseGamepad(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, void>)(
                _slots[33] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[33] = nativeContext.LoadFunction("SDL_CloseGamepad", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseGamepad(GamepadHandle gamepad) => DllImport.CloseGamepad(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseHaptic(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, void>)(
                _slots[34] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[34] = nativeContext.LoadFunction("SDL_CloseHaptic", "SDL3")
            )
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseHaptic(HapticHandle haptic) => DllImport.CloseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CloseIO(IOStreamHandle context) =>
        (MaybeBool<byte>)(byte)((ISdl)this).CloseIORaw(context);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CloseIO(IOStreamHandle context) => DllImport.CloseIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CloseIORaw(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte>)(
                _slots[35] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[35] = nativeContext.LoadFunction("SDL_CloseIO", "SDL3")
            )
        )(context);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CloseIORaw(IOStreamHandle context) => DllImport.CloseIORaw(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseJoystick(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, void>)(
                _slots[36] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[36] = nativeContext.LoadFunction("SDL_CloseJoystick", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseJoystick(JoystickHandle joystick) => DllImport.CloseJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseSensor(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, void>)(
                _slots[37] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[37] = nativeContext.LoadFunction("SDL_CloseSensor", "SDL3")
            )
        )(sensor);

    [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseSensor(SensorHandle sensor) => DllImport.CloseSensor(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CloseStorage(StorageHandle storage) =>
        (MaybeBool<byte>)(byte)((ISdl)this).CloseStorageRaw(storage);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CloseStorage(StorageHandle storage) =>
        DllImport.CloseStorage(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CloseStorageRaw(StorageHandle storage) =>
        (
            (delegate* unmanaged<StorageHandle, byte>)(
                _slots[38] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[38] = nativeContext.LoadFunction("SDL_CloseStorage", "SDL3")
            )
        )(storage);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CloseStorageRaw(StorageHandle storage) => DllImport.CloseStorageRaw(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CompareAndSwapAtomicInt(AtomicInt* a, int oldval, int newval) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int, byte>)(
                _slots[39] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[39] = nativeContext.LoadFunction("SDL_CompareAndSwapAtomicInt", "SDL3")
            )
        )(a, oldval, newval);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CompareAndSwapAtomicInt(AtomicInt* a, int oldval, int newval) =>
        DllImport.CompareAndSwapAtomicInt(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CompareAndSwapAtomicInt(Ref<AtomicInt> a, int oldval, int newval)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).CompareAndSwapAtomicInt(__dsl_a, oldval, newval);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CompareAndSwapAtomicInt(
        Ref<AtomicInt> a,
        int oldval,
        int newval
    ) => DllImport.CompareAndSwapAtomicInt(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval) =>
        (
            (delegate* unmanaged<void**, void*, void*, byte>)(
                _slots[40] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[40] = nativeContext.LoadFunction(
                        "SDL_CompareAndSwapAtomicPointer",
                        "SDL3"
                    )
            )
        )(a, oldval, newval);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval) =>
        DllImport.CompareAndSwapAtomicPointer(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CompareAndSwapAtomicPointer(Ref2D a, Ref oldval, Ref newval)
    {
        fixed (void* __dsl_newval = newval)
        fixed (void* __dsl_oldval = oldval)
        fixed (void** __dsl_a = a)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).CompareAndSwapAtomicPointer(__dsl_a, __dsl_oldval, __dsl_newval);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CompareAndSwapAtomicPointer(Ref2D a, Ref oldval, Ref newval) =>
        DllImport.CompareAndSwapAtomicPointer(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CompareAndSwapAtomicU32(
        AtomicU32* a,
        [NativeTypeName("Uint32")] uint oldval,
        [NativeTypeName("Uint32")] uint newval
    ) =>
        (
            (delegate* unmanaged<AtomicU32*, uint, uint, byte>)(
                _slots[41] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[41] = nativeContext.LoadFunction("SDL_CompareAndSwapAtomicU32", "SDL3")
            )
        )(a, oldval, newval);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CompareAndSwapAtomicU32(
        AtomicU32* a,
        [NativeTypeName("Uint32")] uint oldval,
        [NativeTypeName("Uint32")] uint newval
    ) => DllImport.CompareAndSwapAtomicU32(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CompareAndSwapAtomicU32(
        Ref<AtomicU32> a,
        [NativeTypeName("Uint32")] uint oldval,
        [NativeTypeName("Uint32")] uint newval
    )
    {
        fixed (AtomicU32* __dsl_a = a)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).CompareAndSwapAtomicU32(__dsl_a, oldval, newval);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CompareAndSwapAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CompareAndSwapAtomicU32(
        Ref<AtomicU32> a,
        [NativeTypeName("Uint32")] uint oldval,
        [NativeTypeName("Uint32")] uint newval
    ) => DllImport.CompareAndSwapAtomicU32(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.ComposeCustomBlendMode(
        BlendFactor srcColorFactor,
        BlendFactor dstColorFactor,
        BlendOperation colorOperation,
        BlendFactor srcAlphaFactor,
        BlendFactor dstAlphaFactor,
        BlendOperation alphaOperation
    ) =>
        (
            (delegate* unmanaged<
                BlendFactor,
                BlendFactor,
                BlendOperation,
                BlendFactor,
                BlendFactor,
                BlendOperation,
                uint>)(
                _slots[42] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[42] = nativeContext.LoadFunction("SDL_ComposeCustomBlendMode", "SDL3")
            )
        )(
            srcColorFactor,
            dstColorFactor,
            colorOperation,
            srcAlphaFactor,
            dstAlphaFactor,
            alphaOperation
        );

    [return: NativeTypeName("SDL_BlendMode")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ComposeCustomBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint ComposeCustomBlendMode(
        BlendFactor srcColorFactor,
        BlendFactor dstColorFactor,
        BlendOperation colorOperation,
        BlendFactor srcAlphaFactor,
        BlendFactor dstAlphaFactor,
        BlendOperation alphaOperation
    ) =>
        DllImport.ComposeCustomBlendMode(
            srcColorFactor,
            dstColorFactor,
            colorOperation,
            srcAlphaFactor,
            dstAlphaFactor,
            alphaOperation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const Uint8 *")] byte* src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
        [NativeTypeName("Uint8 **")] byte** dst_data,
        int* dst_len
    ) =>
        (
            (delegate* unmanaged<AudioSpec*, byte*, int, AudioSpec*, byte**, int*, byte>)(
                _slots[43] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[43] = nativeContext.LoadFunction("SDL_ConvertAudioSamples", "SDL3")
            )
        )(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const Uint8 *")] byte* src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
        [NativeTypeName("Uint8 **")] byte** dst_data,
        int* dst_len
    ) => DllImport.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
        Ref<int> dst_len
    )
    {
        fixed (int* __dsl_dst_len = dst_len)
        fixed (byte** __dsl_dst_data = dst_data)
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (byte* __dsl_src_data = src_data)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).ConvertAudioSamples(
                        __dsl_src_spec,
                        __dsl_src_data,
                        src_len,
                        __dsl_dst_spec,
                        __dsl_dst_data,
                        __dsl_dst_len
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
        Ref<int> dst_len
    ) => DllImport.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ConvertEventToRenderCoordinates(RendererHandle renderer, Event* @event) =>
        (
            (delegate* unmanaged<RendererHandle, Event*, byte>)(
                _slots[44] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[44] = nativeContext.LoadFunction(
                        "SDL_ConvertEventToRenderCoordinates",
                        "SDL3"
                    )
            )
        )(renderer, @event);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ConvertEventToRenderCoordinates(RendererHandle renderer, Event* @event) =>
        DllImport.ConvertEventToRenderCoordinates(renderer, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ConvertEventToRenderCoordinates(RendererHandle renderer, Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).ConvertEventToRenderCoordinates(renderer, __dsl_event);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ConvertEventToRenderCoordinates(
        RendererHandle renderer,
        Ref<Event> @event
    ) => DllImport.ConvertEventToRenderCoordinates(renderer, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ConvertPixels(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        void* dst,
        int dst_pitch
    ) =>
        (
            (delegate* unmanaged<int, int, PixelFormat, void*, int, PixelFormat, void*, int, byte>)(
                _slots[45] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[45] = nativeContext.LoadFunction("SDL_ConvertPixels", "SDL3")
            )
        )(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ConvertPixels(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        void* dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixels(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ConvertPixels(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Ref dst,
        int dst_pitch
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).ConvertPixels(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ConvertPixels(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Ref dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixels(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormat src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        void* dst,
        int dst_pitch
    ) =>
        (
            (delegate* unmanaged<
                int,
                int,
                PixelFormat,
                Colorspace,
                uint,
                void*,
                int,
                PixelFormat,
                Colorspace,
                uint,
                void*,
                int,
                byte>)(
                _slots[46] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[46] = nativeContext.LoadFunction(
                        "SDL_ConvertPixelsAndColorspace",
                        "SDL3"
                    )
            )
        )(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormat src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        void* dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixelsAndColorspace(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormat src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        Ref dst,
        int dst_pitch
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).ConvertPixelsAndColorspace(
                        width,
                        height,
                        src_format,
                        src_colorspace,
                        src_properties,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        dst_colorspace,
                        dst_properties,
                        __dsl_dst,
                        dst_pitch
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormat src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        Ref dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixelsAndColorspace(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ConvertSurface(Surface* surface, PixelFormat format) =>
        (
            (delegate* unmanaged<Surface*, PixelFormat, Surface*>)(
                _slots[47] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[47] = nativeContext.LoadFunction("SDL_ConvertSurface", "SDL3")
            )
        )(surface, format);

    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ConvertSurface(Surface* surface, PixelFormat format) =>
        DllImport.ConvertSurface(surface, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ConvertSurface(Ref<Surface> surface, PixelFormat format)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).ConvertSurface(__dsl_surface, format);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ConvertSurface(Ref<Surface> surface, PixelFormat format) =>
        DllImport.ConvertSurface(surface, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ConvertSurfaceAndColorspace(
        Surface* surface,
        PixelFormat format,
        Palette* palette,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<Surface*, PixelFormat, Palette*, Colorspace, uint, Surface*>)(
                _slots[48] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[48] = nativeContext.LoadFunction(
                        "SDL_ConvertSurfaceAndColorspace",
                        "SDL3"
                    )
            )
        )(surface, format, palette, colorspace, props);

    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ConvertSurfaceAndColorspace(
        Surface* surface,
        PixelFormat format,
        Palette* palette,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.ConvertSurfaceAndColorspace(surface, format, palette, colorspace, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ConvertSurfaceAndColorspace(
        Ref<Surface> surface,
        PixelFormat format,
        Ref<Palette> palette,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)
                ((ISdl)this).ConvertSurfaceAndColorspace(
                    __dsl_surface,
                    format,
                    __dsl_palette,
                    colorspace,
                    props
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ConvertSurfaceAndColorspace(
        Ref<Surface> surface,
        PixelFormat format,
        Ref<Palette> palette,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.ConvertSurfaceAndColorspace(surface, format, palette, colorspace, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CopyFile(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, byte>)(
                _slots[49] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[49] = nativeContext.LoadFunction("SDL_CopyFile", "SDL3")
            )
        )(oldpath, newpath);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CopyFile(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.CopyFile(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CopyFile(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).CopyFile(__dsl_oldpath, __dsl_newpath);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CopyFile(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.CopyFile(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CopyProperties(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) => (MaybeBool<byte>)(byte)((ISdl)this).CopyPropertiesRaw(src, dst);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CopyProperties(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) => DllImport.CopyProperties(src, dst);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CopyPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) =>
        (
            (delegate* unmanaged<uint, uint, byte>)(
                _slots[50] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[50] = nativeContext.LoadFunction("SDL_CopyProperties", "SDL3")
            )
        )(src, dst);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CopyPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) => DllImport.CopyPropertiesRaw(src, dst);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CopyStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, sbyte*, byte>)(
                _slots[51] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[51] = nativeContext.LoadFunction("SDL_CopyStorageFile", "SDL3")
            )
        )(storage, oldpath, newpath);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CopyStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.CopyStorageFile(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CopyStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).CopyStorageFile(storage, __dsl_oldpath, __dsl_newpath);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CopyStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CopyStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.CopyStorageFile(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AudioStreamHandle ISdl.CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<AudioSpec*, AudioSpec*, AudioStreamHandle>)(
                _slots[52] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[52] = nativeContext.LoadFunction("SDL_CreateAudioStream", "SDL3")
            )
        )(src_spec, dst_spec);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AudioStreamHandle CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) => DllImport.CreateAudioStream(src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AudioStreamHandle ISdl.CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (AudioStreamHandle)
                ((ISdl)this).CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AudioStreamHandle CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    ) => DllImport.CreateAudioStream(src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
        (
            (delegate* unmanaged<Surface*, int, int, CursorHandle>)(
                _slots[53] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[53] = nativeContext.LoadFunction("SDL_CreateColorCursor", "SDL3")
            )
        )(surface, hot_x, hot_y);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
        DllImport.CreateColorCursor(surface, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (CursorHandle)((ISdl)this).CreateColorCursor(__dsl_surface, hot_x, hot_y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y) =>
        DllImport.CreateColorCursor(surface, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ConditionHandle ISdl.CreateCondition() =>
        (
            (delegate* unmanaged<ConditionHandle>)(
                _slots[54] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[54] = nativeContext.LoadFunction("SDL_CreateCondition", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ConditionHandle CreateCondition() => DllImport.CreateCondition();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.CreateCursor(
        [NativeTypeName("const Uint8 *")] byte* data,
        [NativeTypeName("const Uint8 *")] byte* mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) =>
        (
            (delegate* unmanaged<byte*, byte*, int, int, int, int, CursorHandle>)(
                _slots[55] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[55] = nativeContext.LoadFunction("SDL_CreateCursor", "SDL3")
            )
        )(data, mask, w, h, hot_x, hot_y);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle CreateCursor(
        [NativeTypeName("const Uint8 *")] byte* data,
        [NativeTypeName("const Uint8 *")] byte* mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) => DllImport.CreateCursor(data, mask, w, h, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.CreateCursor(
        [NativeTypeName("const Uint8 *")] Ref<byte> data,
        [NativeTypeName("const Uint8 *")] Ref<byte> mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    )
    {
        fixed (byte* __dsl_mask = mask)
        fixed (byte* __dsl_data = data)
        {
            return (CursorHandle)
                ((ISdl)this).CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle CreateCursor(
        [NativeTypeName("const Uint8 *")] Ref<byte> data,
        [NativeTypeName("const Uint8 *")] Ref<byte> mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) => DllImport.CreateCursor(data, mask, w, h, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[56] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[56] = nativeContext.LoadFunction("SDL_CreateDirectory", "SDL3")
            )
        )(path);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.CreateDirectory(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).CreateDirectory(__dsl_path);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CreateDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.CreateDirectory(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateHapticEffect(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) =>
        (
            (delegate* unmanaged<HapticHandle, HapticEffect*, int>)(
                _slots[57] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[57] = nativeContext.LoadFunction("SDL_CreateHapticEffect", "SDL3")
            )
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateHapticEffect(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) => DllImport.CreateHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateHapticEffect(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    )
    {
        fixed (HapticEffect* __dsl_effect = effect)
        {
            return (int)((ISdl)this).CreateHapticEffect(haptic, __dsl_effect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateHapticEffect(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    ) => DllImport.CreateHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MutexHandle ISdl.CreateMutex() =>
        (
            (delegate* unmanaged<MutexHandle>)(
                _slots[58] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[58] = nativeContext.LoadFunction("SDL_CreateMutex", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MutexHandle CreateMutex() => DllImport.CreateMutex();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Palette> ISdl.CreatePalette(int ncolors) =>
        (Palette*)((ISdl)this).CreatePaletteRaw(ncolors);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Palette> CreatePalette(int ncolors) => DllImport.CreatePalette(ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Palette* ISdl.CreatePaletteRaw(int ncolors) =>
        (
            (delegate* unmanaged<int, Palette*>)(
                _slots[59] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[59] = nativeContext.LoadFunction("SDL_CreatePalette", "SDL3")
            )
        )(ncolors);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Palette* CreatePaletteRaw(int ncolors) => DllImport.CreatePaletteRaw(ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.CreatePopupWindow(
        WindowHandle parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    ) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, int, int, ulong, WindowHandle>)(
                _slots[60] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[60] = nativeContext.LoadFunction("SDL_CreatePopupWindow", "SDL3")
            )
        )(parent, offset_x, offset_y, w, h, flags);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle CreatePopupWindow(
        WindowHandle parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    ) => DllImport.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.CreateProperties() =>
        (
            (delegate* unmanaged<uint>)(
                _slots[61] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[61] = nativeContext.LoadFunction("SDL_CreateProperties", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint CreateProperties() => DllImport.CreateProperties();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.CreateRenderer(
        WindowHandle window,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<WindowHandle, sbyte*, RendererHandle>)(
                _slots[62] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[62] = nativeContext.LoadFunction("SDL_CreateRenderer", "SDL3")
            )
        )(window, name);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle CreateRenderer(
        WindowHandle window,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.CreateRenderer(window, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.CreateRenderer(
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (RendererHandle)((ISdl)this).CreateRenderer(window, __dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle CreateRenderer(
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.CreateRenderer(window, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.CreateRendererWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<uint, RendererHandle>)(
                _slots[63] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[63] = nativeContext.LoadFunction(
                        "SDL_CreateRendererWithProperties",
                        "SDL3"
                    )
            )
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle CreateRendererWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateRendererWithProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RWLockHandle ISdl.CreateRWLock() =>
        (
            (delegate* unmanaged<RWLockHandle>)(
                _slots[64] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[64] = nativeContext.LoadFunction("SDL_CreateRWLock", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RWLockHandle CreateRWLock() => DllImport.CreateRWLock();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SemaphoreHandle ISdl.CreateSemaphore([NativeTypeName("Uint32")] uint initial_value) =>
        (
            (delegate* unmanaged<uint, SemaphoreHandle>)(
                _slots[65] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[65] = nativeContext.LoadFunction("SDL_CreateSemaphore", "SDL3")
            )
        )(initial_value);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SemaphoreHandle CreateSemaphore([NativeTypeName("Uint32")] uint initial_value) =>
        DllImport.CreateSemaphore(initial_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.CreateSoftwareRenderer(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, RendererHandle>)(
                _slots[66] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[66] = nativeContext.LoadFunction("SDL_CreateSoftwareRenderer", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle CreateSoftwareRenderer(Surface* surface) =>
        DllImport.CreateSoftwareRenderer(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.CreateSoftwareRenderer(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (RendererHandle)((ISdl)this).CreateSoftwareRenderer(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle CreateSoftwareRenderer(Ref<Surface> surface) =>
        DllImport.CreateSoftwareRenderer(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CreateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, byte>)(
                _slots[67] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[67] = nativeContext.LoadFunction("SDL_CreateStorageDirectory", "SDL3")
            )
        )(storage, path);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CreateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path
    ) => DllImport.CreateStorageDirectory(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CreateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    )
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).CreateStorageDirectory(storage, __dsl_path);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CreateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.CreateStorageDirectory(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.CreateSurface(int width, int height, PixelFormat format) =>
        (Surface*)((ISdl)this).CreateSurfaceRaw(width, height, format);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> CreateSurface(int width, int height, PixelFormat format) =>
        DllImport.CreateSurface(width, height, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.CreateSurfaceFrom(
        int width,
        int height,
        PixelFormat format,
        void* pixels,
        int pitch
    ) =>
        (
            (delegate* unmanaged<int, int, PixelFormat, void*, int, Surface*>)(
                _slots[69] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[69] = nativeContext.LoadFunction("SDL_CreateSurfaceFrom", "SDL3")
            )
        )(width, height, format, pixels, pitch);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* CreateSurfaceFrom(
        int width,
        int height,
        PixelFormat format,
        void* pixels,
        int pitch
    ) => DllImport.CreateSurfaceFrom(width, height, format, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.CreateSurfaceFrom(
        int width,
        int height,
        PixelFormat format,
        Ref pixels,
        int pitch
    )
    {
        fixed (void* __dsl_pixels = pixels)
        {
            return (Surface*)
                ((ISdl)this).CreateSurfaceFrom(width, height, format, __dsl_pixels, pitch);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> CreateSurfaceFrom(
        int width,
        int height,
        PixelFormat format,
        Ref pixels,
        int pitch
    ) => DllImport.CreateSurfaceFrom(width, height, format, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Palette* ISdl.CreateSurfacePalette(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, Palette*>)(
                _slots[70] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[70] = nativeContext.LoadFunction("SDL_CreateSurfacePalette", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Palette* CreateSurfacePalette(Surface* surface) =>
        DllImport.CreateSurfacePalette(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Palette> ISdl.CreateSurfacePalette(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Palette*)((ISdl)this).CreateSurfacePalette(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Palette> CreateSurfacePalette(Ref<Surface> surface) =>
        DllImport.CreateSurfacePalette(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.CreateSurfaceRaw(int width, int height, PixelFormat format) =>
        (
            (delegate* unmanaged<int, int, PixelFormat, Surface*>)(
                _slots[68] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[68] = nativeContext.LoadFunction("SDL_CreateSurface", "SDL3")
            )
        )(width, height, format);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* CreateSurfaceRaw(int width, int height, PixelFormat format) =>
        DllImport.CreateSurfaceRaw(width, height, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.CreateSystemCursor(SystemCursor id) =>
        (
            (delegate* unmanaged<SystemCursor, CursorHandle>)(
                _slots[71] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[71] = nativeContext.LoadFunction("SDL_CreateSystemCursor", "SDL3")
            )
        )(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle CreateSystemCursor(SystemCursor id) =>
        DllImport.CreateSystemCursor(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Texture> ISdl.CreateTexture(
        RendererHandle renderer,
        PixelFormat format,
        TextureAccess access,
        int w,
        int h
    ) => (Texture*)((ISdl)this).CreateTextureRaw(renderer, format, access, w, h);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Texture> CreateTexture(
        RendererHandle renderer,
        PixelFormat format,
        TextureAccess access,
        int w,
        int h
    ) => DllImport.CreateTexture(renderer, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Texture* ISdl.CreateTextureFromSurface(RendererHandle renderer, Surface* surface) =>
        (
            (delegate* unmanaged<RendererHandle, Surface*, Texture*>)(
                _slots[73] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[73] = nativeContext.LoadFunction(
                        "SDL_CreateTextureFromSurface",
                        "SDL3"
                    )
            )
        )(renderer, surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Texture* CreateTextureFromSurface(RendererHandle renderer, Surface* surface) =>
        DllImport.CreateTextureFromSurface(renderer, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Texture> ISdl.CreateTextureFromSurface(RendererHandle renderer, Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Texture*)((ISdl)this).CreateTextureFromSurface(renderer, __dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Texture> CreateTextureFromSurface(
        RendererHandle renderer,
        Ref<Surface> surface
    ) => DllImport.CreateTextureFromSurface(renderer, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Texture* ISdl.CreateTextureRaw(
        RendererHandle renderer,
        PixelFormat format,
        TextureAccess access,
        int w,
        int h
    ) =>
        (
            (delegate* unmanaged<RendererHandle, PixelFormat, TextureAccess, int, int, Texture*>)(
                _slots[72] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[72] = nativeContext.LoadFunction("SDL_CreateTexture", "SDL3")
            )
        )(renderer, format, access, w, h);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Texture* CreateTextureRaw(
        RendererHandle renderer,
        PixelFormat format,
        TextureAccess access,
        int w,
        int h
    ) => DllImport.CreateTextureRaw(renderer, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Texture> ISdl.CreateTextureWithProperties(
        RendererHandle renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => (Texture*)((ISdl)this).CreateTextureWithPropertiesRaw(renderer, props);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Texture> CreateTextureWithProperties(
        RendererHandle renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateTextureWithProperties(renderer, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Texture* ISdl.CreateTextureWithPropertiesRaw(
        RendererHandle renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<RendererHandle, uint, Texture*>)(
                _slots[74] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[74] = nativeContext.LoadFunction(
                        "SDL_CreateTextureWithProperties",
                        "SDL3"
                    )
            )
        )(renderer, props);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Texture* CreateTextureWithPropertiesRaw(
        RendererHandle renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateTextureWithPropertiesRaw(renderer, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ThreadHandle ISdl.CreateThreadRuntime(
        [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
        [NativeTypeName("const char *")] sbyte* name,
        void* data,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    ) =>
        (
            (delegate* unmanaged<
                ThreadFunction,
                sbyte*,
                void*,
                FunctionPointer,
                FunctionPointer,
                ThreadHandle>)(
                _slots[75] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[75] = nativeContext.LoadFunction("SDL_CreateThreadRuntime", "SDL3")
            )
        )(fn, name, data, pfnBeginThread, pfnEndThread);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ThreadHandle CreateThreadRuntime(
        [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
        [NativeTypeName("const char *")] sbyte* name,
        void* data,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    ) => DllImport.CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ThreadHandle ISdl.CreateThreadRuntime(
        [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref data,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    )
    {
        fixed (void* __dsl_data = data)
        fixed (sbyte* __dsl_name = name)
        {
            return (ThreadHandle)
                ((ISdl)this).CreateThreadRuntime(
                    fn,
                    __dsl_name,
                    __dsl_data,
                    pfnBeginThread,
                    pfnEndThread
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadRuntime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ThreadHandle CreateThreadRuntime(
        [NativeTypeName("SDL_ThreadFunction")] ThreadFunction fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref data,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    ) => DllImport.CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ThreadHandle ISdl.CreateThreadWithPropertiesRuntime(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    ) =>
        (
            (delegate* unmanaged<uint, FunctionPointer, FunctionPointer, ThreadHandle>)(
                _slots[76] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[76] = nativeContext.LoadFunction(
                        "SDL_CreateThreadWithPropertiesRuntime",
                        "SDL3"
                    )
            )
        )(props, pfnBeginThread, pfnEndThread);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithPropertiesRuntime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ThreadHandle CreateThreadWithPropertiesRuntime(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnBeginThread,
        [NativeTypeName("SDL_FunctionPointer")] FunctionPointer pfnEndThread
    ) => DllImport.CreateThreadWithPropertiesRuntime(props, pfnBeginThread, pfnEndThread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.CreateWindow(
        [NativeTypeName("const char *")] sbyte* title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    ) =>
        (
            (delegate* unmanaged<sbyte*, int, int, ulong, WindowHandle>)(
                _slots[77] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[77] = nativeContext.LoadFunction("SDL_CreateWindow", "SDL3")
            )
        )(title, w, h, flags);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle CreateWindow(
        [NativeTypeName("const char *")] sbyte* title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    ) => DllImport.CreateWindow(title, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.CreateWindow(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    )
    {
        fixed (sbyte* __dsl_title = title)
        {
            return (WindowHandle)((ISdl)this).CreateWindow(__dsl_title, w, h, flags);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle CreateWindow(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] ulong flags
    ) => DllImport.CreateWindow(title, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CreateWindowAndRenderer(
        [NativeTypeName("const char *")] sbyte* title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
        WindowHandle* window,
        RendererHandle* renderer
    ) =>
        (
            (delegate* unmanaged<sbyte*, int, int, ulong, WindowHandle*, RendererHandle*, byte>)(
                _slots[78] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[78] = nativeContext.LoadFunction("SDL_CreateWindowAndRenderer", "SDL3")
            )
        )(title, width, height, window_flags, window, renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CreateWindowAndRenderer(
        [NativeTypeName("const char *")] sbyte* title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
        WindowHandle* window,
        RendererHandle* renderer
    ) => DllImport.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CreateWindowAndRenderer(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
        Ref<WindowHandle> window,
        Ref<RendererHandle> renderer
    )
    {
        fixed (RendererHandle* __dsl_renderer = renderer)
        fixed (WindowHandle* __dsl_window = window)
        fixed (sbyte* __dsl_title = title)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).CreateWindowAndRenderer(
                        __dsl_title,
                        width,
                        height,
                        window_flags,
                        __dsl_window,
                        __dsl_renderer
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CreateWindowAndRenderer(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] ulong window_flags,
        Ref<WindowHandle> window,
        Ref<RendererHandle> renderer
    ) => DllImport.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.CreateWindowWithProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        (
            (delegate* unmanaged<uint, WindowHandle>)(
                _slots[79] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[79] = nativeContext.LoadFunction(
                        "SDL_CreateWindowWithProperties",
                        "SDL3"
                    )
            )
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle CreateWindowWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateWindowWithProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.CursorVisible() => (MaybeBool<byte>)(byte)((ISdl)this).CursorVisibleRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> CursorVisible() => DllImport.CursorVisible();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.CursorVisibleRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[80] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[80] = nativeContext.LoadFunction("SDL_CursorVisible", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte CursorVisibleRaw() => DllImport.CursorVisibleRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
        [NativeTypeName("SDL_Time *")] long* ticks
    ) =>
        (
            (delegate* unmanaged<DateTime*, long*, byte>)(
                _slots[81] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[81] = nativeContext.LoadFunction("SDL_DateTimeToTime", "SDL3")
            )
        )(dt, ticks);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
        [NativeTypeName("SDL_Time *")] long* ticks
    ) => DllImport.DateTimeToTime(dt, ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
        [NativeTypeName("SDL_Time *")] Ref<long> ticks
    )
    {
        fixed (long* __dsl_ticks = ticks)
        fixed (DateTime* __dsl_dt = dt)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).DateTimeToTime(__dsl_dt, __dsl_ticks);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
        [NativeTypeName("SDL_Time *")] Ref<long> ticks
    ) => DllImport.DateTimeToTime(dt, ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.Delay([NativeTypeName("Uint32")] uint ms) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[82] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[82] = nativeContext.LoadFunction("SDL_Delay", "SDL3")
            )
        )(ms);

    [NativeFunction("SDL3", EntryPoint = "SDL_Delay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void Delay([NativeTypeName("Uint32")] uint ms) => DllImport.Delay(ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelayNS([NativeTypeName("Uint64")] ulong ns) =>
        (
            (delegate* unmanaged<ulong, void>)(
                _slots[83] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[83] = nativeContext.LoadFunction("SDL_DelayNS", "SDL3")
            )
        )(ns);

    [NativeFunction("SDL3", EntryPoint = "SDL_DelayNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelayNS([NativeTypeName("Uint64")] ulong ns) => DllImport.DelayNS(ns);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelayPrecise([NativeTypeName("Uint64")] ulong ns) =>
        (
            (delegate* unmanaged<ulong, void>)(
                _slots[84] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[84] = nativeContext.LoadFunction("SDL_DelayPrecise", "SDL3")
            )
        )(ns);

    [NativeFunction("SDL3", EntryPoint = "SDL_DelayPrecise")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelayPrecise([NativeTypeName("Uint64")] ulong ns) =>
        DllImport.DelayPrecise(ns);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyAudioStream(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, void>)(
                _slots[85] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[85] = nativeContext.LoadFunction("SDL_DestroyAudioStream", "SDL3")
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAudioStream(AudioStreamHandle stream) =>
        DllImport.DestroyAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCondition(ConditionHandle cond) =>
        (
            (delegate* unmanaged<ConditionHandle, void>)(
                _slots[86] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[86] = nativeContext.LoadFunction("SDL_DestroyCondition", "SDL3")
            )
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCondition(ConditionHandle cond) => DllImport.DestroyCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCursor(CursorHandle cursor) =>
        (
            (delegate* unmanaged<CursorHandle, void>)(
                _slots[87] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[87] = nativeContext.LoadFunction("SDL_DestroyCursor", "SDL3")
            )
        )(cursor);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCursor(CursorHandle cursor) => DllImport.DestroyCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyHapticEffect(HapticHandle haptic, int effect) =>
        (
            (delegate* unmanaged<HapticHandle, int, void>)(
                _slots[88] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[88] = nativeContext.LoadFunction("SDL_DestroyHapticEffect", "SDL3")
            )
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyHapticEffect(HapticHandle haptic, int effect) =>
        DllImport.DestroyHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyMutex(MutexHandle mutex) =>
        (
            (delegate* unmanaged<MutexHandle, void>)(
                _slots[89] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[89] = nativeContext.LoadFunction("SDL_DestroyMutex", "SDL3")
            )
        )(mutex);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMutex(MutexHandle mutex) => DllImport.DestroyMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPalette(Palette* palette) =>
        (
            (delegate* unmanaged<Palette*, void>)(
                _slots[90] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[90] = nativeContext.LoadFunction("SDL_DestroyPalette", "SDL3")
            )
        )(palette);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPalette(Palette* palette) => DllImport.DestroyPalette(palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPalette(Ref<Palette> palette)
    {
        fixed (Palette* __dsl_palette = palette)
        {
            ((ISdl)this).DestroyPalette(__dsl_palette);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPalette(Ref<Palette> palette) => DllImport.DestroyPalette(palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[91] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[91] = nativeContext.LoadFunction("SDL_DestroyProperties", "SDL3")
            )
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.DestroyProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRenderer(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, void>)(
                _slots[92] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[92] = nativeContext.LoadFunction("SDL_DestroyRenderer", "SDL3")
            )
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderer(RendererHandle renderer) =>
        DllImport.DestroyRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRWLock(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, void>)(
                _slots[93] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[93] = nativeContext.LoadFunction("SDL_DestroyRWLock", "SDL3")
            )
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRWLock(RWLockHandle rwlock) => DllImport.DestroyRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySemaphore(SemaphoreHandle sem) =>
        (
            (delegate* unmanaged<SemaphoreHandle, void>)(
                _slots[94] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[94] = nativeContext.LoadFunction("SDL_DestroySemaphore", "SDL3")
            )
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(SemaphoreHandle sem) => DllImport.DestroySemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySurface(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, void>)(
                _slots[95] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[95] = nativeContext.LoadFunction("SDL_DestroySurface", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurface(Surface* surface) => DllImport.DestroySurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            ((ISdl)this).DestroySurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurface(Ref<Surface> surface) => DllImport.DestroySurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyTexture(Texture* texture) =>
        (
            (delegate* unmanaged<Texture*, void>)(
                _slots[96] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[96] = nativeContext.LoadFunction("SDL_DestroyTexture", "SDL3")
            )
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTexture(Texture* texture) => DllImport.DestroyTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyTexture(Ref<Texture> texture)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            ((ISdl)this).DestroyTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTexture(Ref<Texture> texture) => DllImport.DestroyTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyWindow(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, void>)(
                _slots[97] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[97] = nativeContext.LoadFunction("SDL_DestroyWindow", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyWindow(WindowHandle window) => DllImport.DestroyWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.DestroyWindowSurface(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).DestroyWindowSurfaceRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> DestroyWindowSurface(WindowHandle window) =>
        DllImport.DestroyWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.DestroyWindowSurfaceRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[98] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[98] = nativeContext.LoadFunction("SDL_DestroyWindowSurface", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte DestroyWindowSurfaceRaw(WindowHandle window) =>
        DllImport.DestroyWindowSurfaceRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DetachThread(ThreadHandle thread) =>
        (
            (delegate* unmanaged<ThreadHandle, void>)(
                _slots[99] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[99] = nativeContext.LoadFunction("SDL_DetachThread", "SDL3")
            )
        )(thread);

    [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DetachThread(ThreadHandle thread) => DllImport.DetachThread(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.DetachVirtualJoystick(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => (MaybeBool<byte>)(byte)((ISdl)this).DetachVirtualJoystickRaw(instance_id);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> DetachVirtualJoystick(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.DetachVirtualJoystick(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.DetachVirtualJoystickRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[100] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[100] = nativeContext.LoadFunction("SDL_DetachVirtualJoystick", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_DetachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte DetachVirtualJoystickRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.DetachVirtualJoystickRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.DisableScreenSaver() =>
        (MaybeBool<byte>)(byte)((ISdl)this).DisableScreenSaverRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> DisableScreenSaver() => DllImport.DisableScreenSaver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.DisableScreenSaverRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[101] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[101] = nativeContext.LoadFunction("SDL_DisableScreenSaver", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_DisableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte DisableScreenSaverRaw() => DllImport.DisableScreenSaverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.DuplicateSurface(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, Surface*>)(
                _slots[102] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[102] = nativeContext.LoadFunction("SDL_DuplicateSurface", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* DuplicateSurface(Surface* surface) =>
        DllImport.DuplicateSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.DuplicateSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).DuplicateSurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface) =>
        DllImport.DuplicateSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetCurrentConfig() => (void*)((ISdl)this).EGLGetCurrentConfigRaw();

    [return: NativeTypeName("SDL_EGLConfig")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetCurrentConfig() => DllImport.EGLGetCurrentConfig();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetCurrentConfigRaw() =>
        (
            (delegate* unmanaged<void*>)(
                _slots[103] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[103] = nativeContext.LoadFunction("SDL_EGL_GetCurrentConfig", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_EGLConfig")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentConfig")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetCurrentConfigRaw() => DllImport.EGLGetCurrentConfigRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetCurrentDisplay() => (void*)((ISdl)this).EGLGetCurrentDisplayRaw();

    [return: NativeTypeName("SDL_EGLDisplay")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetCurrentDisplay() => DllImport.EGLGetCurrentDisplay();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetCurrentDisplayRaw() =>
        (
            (delegate* unmanaged<void*>)(
                _slots[104] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[104] = nativeContext.LoadFunction("SDL_EGL_GetCurrentDisplay", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_EGLDisplay")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetCurrentDisplayRaw() => DllImport.EGLGetCurrentDisplayRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.EGLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
        (
            (delegate* unmanaged<sbyte*, FunctionPointer>)(
                _slots[105] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[105] = nativeContext.LoadFunction("SDL_EGL_GetProcAddress", "SDL3")
            )
        )(proc);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer EGLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
        DllImport.EGLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.EGLGetProcAddress([NativeTypeName("const char *")] Ref<sbyte> proc)
    {
        fixed (sbyte* __dsl_proc = proc)
        {
            return (FunctionPointer)((ISdl)this).EGLGetProcAddress(__dsl_proc);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer EGLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    ) => DllImport.EGLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetWindowSurface(WindowHandle window) =>
        (void*)((ISdl)this).EGLGetWindowSurfaceRaw(window);

    [return: NativeTypeName("SDL_EGLSurface")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetWindowSurface(WindowHandle window) =>
        DllImport.EGLGetWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetWindowSurfaceRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, void*>)(
                _slots[106] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[106] = nativeContext.LoadFunction("SDL_EGL_GetWindowSurface", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_EGLSurface")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetWindowSurfaceRaw(WindowHandle window) =>
        DllImport.EGLGetWindowSurfaceRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.EGLSetAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            EGLAttribArrayCallback platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                EGLAttribArrayCallback,
                EGLIntArrayCallback,
                EGLIntArrayCallback,
                void*,
                void>)(
                _slots[107] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[107] = nativeContext.LoadFunction(
                        "SDL_EGL_SetAttributeCallbacks",
                        "SDL3"
                    )
            )
        )(platformAttribCallback, surfaceAttribCallback, contextAttribCallback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void EGLSetAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            EGLAttribArrayCallback platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
        void* userdata
    ) =>
        DllImport.EGLSetAttributeCallbacks(
            platformAttribCallback,
            surfaceAttribCallback,
            contextAttribCallback,
            userdata
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.EGLSetAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            EGLAttribArrayCallback platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).EGLSetAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback,
                __dsl_userdata
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void EGLSetAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            EGLAttribArrayCallback platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] EGLIntArrayCallback contextAttribCallback,
        Ref userdata
    ) =>
        DllImport.EGLSetAttributeCallbacks(
            platformAttribCallback,
            surfaceAttribCallback,
            contextAttribCallback,
            userdata
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.EnableScreenSaver() =>
        (MaybeBool<byte>)(byte)((ISdl)this).EnableScreenSaverRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> EnableScreenSaver() => DllImport.EnableScreenSaver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.EnableScreenSaverRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[108] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[108] = nativeContext.LoadFunction("SDL_EnableScreenSaver", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte EnableScreenSaverRaw() => DllImport.EnableScreenSaverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.EnumerateDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<sbyte*, EnumerateDirectoryCallback, void*, byte>)(
                _slots[109] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[109] = nativeContext.LoadFunction("SDL_EnumerateDirectory", "SDL3")
            )
        )(path, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte EnumerateDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        void* userdata
    ) => DllImport.EnumerateDirectory(path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.EnumerateDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> EnumerateDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        Ref userdata
    ) => DllImport.EnumerateDirectory(path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")] EnumeratePropertiesCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, EnumeratePropertiesCallback, void*, byte>)(
                _slots[110] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[110] = nativeContext.LoadFunction("SDL_EnumerateProperties", "SDL3")
            )
        )(props, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")] EnumeratePropertiesCallback callback,
        void* userdata
    ) => DllImport.EnumerateProperties(props, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")] EnumeratePropertiesCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).EnumerateProperties(props, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")] EnumeratePropertiesCallback callback,
        Ref userdata
    ) => DllImport.EnumerateProperties(props, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.EnumerateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, EnumerateDirectoryCallback, void*, byte>)(
                _slots[111] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[111] = nativeContext.LoadFunction(
                        "SDL_EnumerateStorageDirectory",
                        "SDL3"
                    )
            )
        )(storage, path, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte EnumerateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        void* userdata
    ) => DllImport.EnumerateStorageDirectory(storage, path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.EnumerateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).EnumerateStorageDirectory(
                        storage,
                        __dsl_path,
                        callback,
                        __dsl_userdata
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> EnumerateStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")] EnumerateDirectoryCallback callback,
        Ref userdata
    ) => DllImport.EnumerateStorageDirectory(storage, path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.EventEnabled([NativeTypeName("Uint32")] uint type) =>
        (MaybeBool<byte>)(byte)((ISdl)this).EventEnabledRaw(type);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> EventEnabled([NativeTypeName("Uint32")] uint type) =>
        DllImport.EventEnabled(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[112] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[112] = nativeContext.LoadFunction("SDL_EventEnabled", "SDL3")
            )
        )(type);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
        DllImport.EventEnabledRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FillSurfaceRect(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("Uint32")] uint color
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, uint, byte>)(
                _slots[113] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[113] = nativeContext.LoadFunction("SDL_FillSurfaceRect", "SDL3")
            )
        )(dst, rect, color);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FillSurfaceRect(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRect(dst, rect, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FillSurfaceRect(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("Uint32")] uint color
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_dst = dst)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).FillSurfaceRect(__dsl_dst, __dsl_rect, color);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FillSurfaceRect(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRect(dst, rect, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FillSurfaceRects(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, int, uint, byte>)(
                _slots[114] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[114] = nativeContext.LoadFunction("SDL_FillSurfaceRects", "SDL3")
            )
        )(dst, rects, count, color);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FillSurfaceRects(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRects(dst, rects, count, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FillSurfaceRects(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    )
    {
        fixed (Rect* __dsl_rects = rects)
        fixed (Surface* __dsl_dst = dst)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FillSurfaceRects(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRects(dst, rects, count, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FilterEvents(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<EventFilter, void*, void>)(
                _slots[115] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[115] = nativeContext.LoadFunction("SDL_FilterEvents", "SDL3")
            )
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FilterEvents(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) => DllImport.FilterEvents(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FilterEvents([NativeTypeName("SDL_EventFilter")] EventFilter filter, Ref userdata)
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).FilterEvents(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FilterEvents(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        Ref userdata
    ) => DllImport.FilterEvents(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FlashWindow(WindowHandle window, FlashOperation operation) =>
        (MaybeBool<byte>)(byte)((ISdl)this).FlashWindowRaw(window, operation);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FlashWindow(WindowHandle window, FlashOperation operation) =>
        DllImport.FlashWindow(window, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FlashWindowRaw(WindowHandle window, FlashOperation operation) =>
        (
            (delegate* unmanaged<WindowHandle, FlashOperation, byte>)(
                _slots[116] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[116] = nativeContext.LoadFunction("SDL_FlashWindow", "SDL3")
            )
        )(window, operation);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FlashWindowRaw(WindowHandle window, FlashOperation operation) =>
        DllImport.FlashWindowRaw(window, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FlipSurface(Surface* surface, FlipMode flip) =>
        (
            (delegate* unmanaged<Surface*, FlipMode, byte>)(
                _slots[117] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[117] = nativeContext.LoadFunction("SDL_FlipSurface", "SDL3")
            )
        )(surface, flip);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FlipSurface(Surface* surface, FlipMode flip) =>
        DllImport.FlipSurface(surface, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FlipSurface(Ref<Surface> surface, FlipMode flip)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).FlipSurface(__dsl_surface, flip);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FlipSurface(Ref<Surface> surface, FlipMode flip) =>
        DllImport.FlipSurface(surface, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FlushAudioStream(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).FlushAudioStreamRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FlushAudioStream(AudioStreamHandle stream) =>
        DllImport.FlushAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FlushAudioStreamRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[118] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[118] = nativeContext.LoadFunction("SDL_FlushAudioStream", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FlushAudioStreamRaw(AudioStreamHandle stream) =>
        DllImport.FlushAudioStreamRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FlushEvent([NativeTypeName("Uint32")] uint type) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[119] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[119] = nativeContext.LoadFunction("SDL_FlushEvent", "SDL3")
            )
        )(type);

    [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FlushEvent([NativeTypeName("Uint32")] uint type) =>
        DllImport.FlushEvent(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FlushEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        (
            (delegate* unmanaged<uint, uint, void>)(
                _slots[120] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[120] = nativeContext.LoadFunction("SDL_FlushEvents", "SDL3")
            )
        )(minType, maxType);

    [NativeFunction("SDL3", EntryPoint = "SDL_FlushEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FlushEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.FlushEvents(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FlushIO(IOStreamHandle context) =>
        (MaybeBool<byte>)(byte)((ISdl)this).FlushIORaw(context);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FlushIO(IOStreamHandle context) => DllImport.FlushIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FlushIORaw(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte>)(
                _slots[121] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[121] = nativeContext.LoadFunction("SDL_FlushIO", "SDL3")
            )
        )(context);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FlushIORaw(IOStreamHandle context) => DllImport.FlushIORaw(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.FlushRenderer(RendererHandle renderer) =>
        (MaybeBool<byte>)(byte)((ISdl)this).FlushRendererRaw(renderer);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> FlushRenderer(RendererHandle renderer) =>
        DllImport.FlushRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.FlushRendererRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, byte>)(
                _slots[122] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[122] = nativeContext.LoadFunction("SDL_FlushRenderer", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte FlushRendererRaw(RendererHandle renderer) =>
        DllImport.FlushRendererRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadConnected(GamepadHandle gamepad) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadConnectedRaw(gamepad);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadConnected(GamepadHandle gamepad) =>
        DllImport.GamepadConnected(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadConnectedRaw(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, byte>)(
                _slots[123] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[123] = nativeContext.LoadFunction("SDL_GamepadConnected", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadConnectedRaw(GamepadHandle gamepad) =>
        DllImport.GamepadConnectedRaw(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadEventsEnabled() =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadEventsEnabledRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadEventsEnabled() => DllImport.GamepadEventsEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadEventsEnabledRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[124] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[124] = nativeContext.LoadFunction("SDL_GamepadEventsEnabled", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadEventsEnabledRaw() => DllImport.GamepadEventsEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadHasAxis(GamepadHandle gamepad, GamepadAxis axis) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadHasAxisRaw(gamepad, axis);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadHasAxis(GamepadHandle gamepad, GamepadAxis axis) =>
        DllImport.GamepadHasAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadHasAxisRaw(GamepadHandle gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadAxis, byte>)(
                _slots[125] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[125] = nativeContext.LoadFunction("SDL_GamepadHasAxis", "SDL3")
            )
        )(gamepad, axis);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadHasAxisRaw(GamepadHandle gamepad, GamepadAxis axis) =>
        DllImport.GamepadHasAxisRaw(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadHasButton(GamepadHandle gamepad, GamepadButton button) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadHasButtonRaw(gamepad, button);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadHasButton(GamepadHandle gamepad, GamepadButton button) =>
        DllImport.GamepadHasButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadHasButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadButton, byte>)(
                _slots[126] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[126] = nativeContext.LoadFunction("SDL_GamepadHasButton", "SDL3")
            )
        )(gamepad, button);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadHasButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
        DllImport.GamepadHasButtonRaw(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadHasSensor(GamepadHandle gamepad, SensorType type) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadHasSensorRaw(gamepad, type);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadHasSensor(GamepadHandle gamepad, SensorType type) =>
        DllImport.GamepadHasSensor(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadHasSensorRaw(GamepadHandle gamepad, SensorType type) =>
        (
            (delegate* unmanaged<GamepadHandle, SensorType, byte>)(
                _slots[127] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[127] = nativeContext.LoadFunction("SDL_GamepadHasSensor", "SDL3")
            )
        )(gamepad, type);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadHasSensorRaw(GamepadHandle gamepad, SensorType type) =>
        DllImport.GamepadHasSensorRaw(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GamepadSensorEnabled(GamepadHandle gamepad, SensorType type) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GamepadSensorEnabledRaw(gamepad, type);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GamepadSensorEnabled(GamepadHandle gamepad, SensorType type) =>
        DllImport.GamepadSensorEnabled(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GamepadSensorEnabledRaw(GamepadHandle gamepad, SensorType type) =>
        (
            (delegate* unmanaged<GamepadHandle, SensorType, byte>)(
                _slots[128] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[128] = nativeContext.LoadFunction("SDL_GamepadSensorEnabled", "SDL3")
            )
        )(gamepad, type);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GamepadSensorEnabledRaw(GamepadHandle gamepad, SensorType type) =>
        DllImport.GamepadSensorEnabledRaw(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAppMetadataProperty([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*>)(
                _slots[129] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[129] = nativeContext.LoadFunction("SDL_GetAppMetadataProperty", "SDL3")
            )
        )(name);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAppMetadataProperty([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetAppMetadataProperty(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAppMetadataProperty([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (sbyte*)((ISdl)this).GetAppMetadataProperty(__dsl_name);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAppMetadataProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAppMetadataProperty(
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.GetAppMetadataProperty(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertionHandler ISdl.GetAssertionHandler(void** puserdata) =>
        (
            (delegate* unmanaged<void**, AssertionHandler>)(
                _slots[130] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[130] = nativeContext.LoadFunction("SDL_GetAssertionHandler", "SDL3")
            )
        )(puserdata);

    [return: NativeTypeName("SDL_AssertionHandler")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertionHandler GetAssertionHandler(void** puserdata) =>
        DllImport.GetAssertionHandler(puserdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertionHandler ISdl.GetAssertionHandler(Ref2D puserdata)
    {
        fixed (void** __dsl_puserdata = puserdata)
        {
            return (AssertionHandler)((ISdl)this).GetAssertionHandler(__dsl_puserdata);
        }
    }

    [return: NativeTypeName("SDL_AssertionHandler")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertionHandler GetAssertionHandler(Ref2D puserdata) =>
        DllImport.GetAssertionHandler(puserdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<AssertData> ISdl.GetAssertionReport() => (AssertData*)((ISdl)this).GetAssertionReportRaw();

    [return: NativeTypeName("const SDL_AssertData *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<AssertData> GetAssertionReport() => DllImport.GetAssertionReport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertData* ISdl.GetAssertionReportRaw() =>
        (
            (delegate* unmanaged<AssertData*>)(
                _slots[131] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[131] = nativeContext.LoadFunction("SDL_GetAssertionReport", "SDL3")
            )
        )();

    [return: NativeTypeName("const SDL_AssertData *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertData* GetAssertionReportRaw() => DllImport.GetAssertionReportRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAtomicInt(AtomicInt* a) =>
        (
            (delegate* unmanaged<AtomicInt*, int>)(
                _slots[132] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[132] = nativeContext.LoadFunction("SDL_GetAtomicInt", "SDL3")
            )
        )(a);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAtomicInt(AtomicInt* a) => DllImport.GetAtomicInt(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAtomicInt(Ref<AtomicInt> a)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).GetAtomicInt(__dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAtomicInt(Ref<AtomicInt> a) => DllImport.GetAtomicInt(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetAtomicPointer(void** a) =>
        (
            (delegate* unmanaged<void**, void*>)(
                _slots[133] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[133] = nativeContext.LoadFunction("SDL_GetAtomicPointer", "SDL3")
            )
        )(a);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetAtomicPointer(void** a) => DllImport.GetAtomicPointer(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetAtomicPointer(Ref2D a)
    {
        fixed (void** __dsl_a = a)
        {
            return (void*)((ISdl)this).GetAtomicPointer(__dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetAtomicPointer(Ref2D a) => DllImport.GetAtomicPointer(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAtomicU32(AtomicU32* a) =>
        (
            (delegate* unmanaged<AtomicU32*, uint>)(
                _slots[134] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[134] = nativeContext.LoadFunction("SDL_GetAtomicU32", "SDL3")
            )
        )(a);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAtomicU32(AtomicU32* a) => DllImport.GetAtomicU32(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAtomicU32(Ref<AtomicU32> a)
    {
        fixed (AtomicU32* __dsl_a = a)
        {
            return (uint)((ISdl)this).GetAtomicU32(__dsl_a);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAtomicU32(Ref<AtomicU32> a) => DllImport.GetAtomicU32(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int* ISdl.GetAudioDeviceChannelMap(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        int* count
    ) =>
        (
            (delegate* unmanaged<uint, int*, int*>)(
                _slots[135] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[135] = nativeContext.LoadFunction(
                        "SDL_GetAudioDeviceChannelMap",
                        "SDL3"
                    )
            )
        )(devid, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int* GetAudioDeviceChannelMap(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        int* count
    ) => DllImport.GetAudioDeviceChannelMap(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<int> ISdl.GetAudioDeviceChannelMap(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (int*)((ISdl)this).GetAudioDeviceChannelMap(devid, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<int> GetAudioDeviceChannelMap(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<int> count
    ) => DllImport.GetAudioDeviceChannelMap(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioSpec* spec,
        int* sample_frames
    ) =>
        (
            (delegate* unmanaged<uint, AudioSpec*, int*, byte>)(
                _slots[136] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[136] = nativeContext.LoadFunction("SDL_GetAudioDeviceFormat", "SDL3")
            )
        )(devid, spec, sample_frames);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioSpec* spec,
        int* sample_frames
    ) => DllImport.GetAudioDeviceFormat(devid, spec, sample_frames);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioSpec> spec,
        Ref<int> sample_frames
    )
    {
        fixed (int* __dsl_sample_frames = sample_frames)
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioSpec> spec,
        Ref<int> sample_frames
    ) => DllImport.GetAudioDeviceFormat(devid, spec, sample_frames);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetAudioDeviceGain([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (
            (delegate* unmanaged<uint, float>)(
                _slots[137] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[137] = nativeContext.LoadFunction("SDL_GetAudioDeviceGain", "SDL3")
            )
        )(devid);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetAudioDeviceGain([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.GetAudioDeviceGain(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (sbyte*)((ISdl)this).GetAudioDeviceNameRaw(devid);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.GetAudioDeviceName(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[138] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[138] = nativeContext.LoadFunction("SDL_GetAudioDeviceName", "SDL3")
            )
        )(devid);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.GetAudioDeviceNameRaw(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAudioDriver(int index) => (sbyte*)((ISdl)this).GetAudioDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAudioDriver(int index) => DllImport.GetAudioDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAudioDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)(
                _slots[139] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[139] = nativeContext.LoadFunction("SDL_GetAudioDriver", "SDL3")
            )
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAudioDriverRaw(int index) => DllImport.GetAudioDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAudioFormatName(AudioFormat format) =>
        (sbyte*)((ISdl)this).GetAudioFormatNameRaw(format);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAudioFormatName(AudioFormat format) =>
        DllImport.GetAudioFormatName(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAudioFormatNameRaw(AudioFormat format) =>
        (
            (delegate* unmanaged<AudioFormat, sbyte*>)(
                _slots[140] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[140] = nativeContext.LoadFunction("SDL_GetAudioFormatName", "SDL3")
            )
        )(format);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAudioFormatNameRaw(AudioFormat format) =>
        DllImport.GetAudioFormatNameRaw(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetAudioPlaybackDevices(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[141] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[141] = nativeContext.LoadFunction(
                        "SDL_GetAudioPlaybackDevices",
                        "SDL3"
                    )
            )
        )(count);

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetAudioPlaybackDevices(int* count) =>
        DllImport.GetAudioPlaybackDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetAudioPlaybackDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetAudioPlaybackDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioPlaybackDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetAudioPlaybackDevices(Ref<int> count) =>
        DllImport.GetAudioPlaybackDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetAudioRecordingDevices(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[142] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[142] = nativeContext.LoadFunction(
                        "SDL_GetAudioRecordingDevices",
                        "SDL3"
                    )
            )
        )(count);

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetAudioRecordingDevices(int* count) =>
        DllImport.GetAudioRecordingDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetAudioRecordingDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetAudioRecordingDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioRecordingDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetAudioRecordingDevices(Ref<int> count) =>
        DllImport.GetAudioRecordingDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamAvailable(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int>)(
                _slots[143] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[143] = nativeContext.LoadFunction(
                        "SDL_GetAudioStreamAvailable",
                        "SDL3"
                    )
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamAvailable(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamAvailable(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamData(AudioStreamHandle stream, void* buf, int len) =>
        (
            (delegate* unmanaged<AudioStreamHandle, void*, int, int>)(
                _slots[144] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[144] = nativeContext.LoadFunction("SDL_GetAudioStreamData", "SDL3")
            )
        )(stream, buf, len);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamData(AudioStreamHandle stream, void* buf, int len) =>
        DllImport.GetAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamData(AudioStreamHandle stream, Ref buf, int len)
    {
        fixed (void* __dsl_buf = buf)
        {
            return (int)((ISdl)this).GetAudioStreamData(stream, __dsl_buf, len);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamData(AudioStreamHandle stream, Ref buf, int len) =>
        DllImport.GetAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamDevice(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, uint>)(
                _slots[145] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[145] = nativeContext.LoadFunction("SDL_GetAudioStreamDevice", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamDevice(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamDevice(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetAudioStreamFormat(
        AudioStreamHandle stream,
        AudioSpec* src_spec,
        AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, AudioSpec*, AudioSpec*, byte>)(
                _slots[146] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[146] = nativeContext.LoadFunction("SDL_GetAudioStreamFormat", "SDL3")
            )
        )(stream, src_spec, dst_spec);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetAudioStreamFormat(
        AudioStreamHandle stream,
        AudioSpec* src_spec,
        AudioSpec* dst_spec
    ) => DllImport.GetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetAudioStreamFormat(
        AudioStreamHandle stream,
        Ref<AudioSpec> src_spec,
        Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetAudioStreamFormat(
        AudioStreamHandle stream,
        Ref<AudioSpec> src_spec,
        Ref<AudioSpec> dst_spec
    ) => DllImport.GetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetAudioStreamFrequencyRatio(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, float>)(
                _slots[147] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[147] = nativeContext.LoadFunction(
                        "SDL_GetAudioStreamFrequencyRatio",
                        "SDL3"
                    )
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetAudioStreamFrequencyRatio(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamFrequencyRatio(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetAudioStreamGain(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, float>)(
                _slots[148] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[148] = nativeContext.LoadFunction("SDL_GetAudioStreamGain", "SDL3")
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetAudioStreamGain(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamGain(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int* ISdl.GetAudioStreamInputChannelMap(AudioStreamHandle stream, int* count) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int*, int*>)(
                _slots[149] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[149] = nativeContext.LoadFunction(
                        "SDL_GetAudioStreamInputChannelMap",
                        "SDL3"
                    )
            )
        )(stream, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int* GetAudioStreamInputChannelMap(AudioStreamHandle stream, int* count) =>
        DllImport.GetAudioStreamInputChannelMap(stream, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<int> ISdl.GetAudioStreamInputChannelMap(AudioStreamHandle stream, Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (int*)((ISdl)this).GetAudioStreamInputChannelMap(stream, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<int> GetAudioStreamInputChannelMap(
        AudioStreamHandle stream,
        Ref<int> count
    ) => DllImport.GetAudioStreamInputChannelMap(stream, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int* ISdl.GetAudioStreamOutputChannelMap(AudioStreamHandle stream, int* count) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int*, int*>)(
                _slots[150] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[150] = nativeContext.LoadFunction(
                        "SDL_GetAudioStreamOutputChannelMap",
                        "SDL3"
                    )
            )
        )(stream, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int* GetAudioStreamOutputChannelMap(AudioStreamHandle stream, int* count) =>
        DllImport.GetAudioStreamOutputChannelMap(stream, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<int> ISdl.GetAudioStreamOutputChannelMap(AudioStreamHandle stream, Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (int*)((ISdl)this).GetAudioStreamOutputChannelMap(stream, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<int> GetAudioStreamOutputChannelMap(
        AudioStreamHandle stream,
        Ref<int> count
    ) => DllImport.GetAudioStreamOutputChannelMap(stream, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamProperties(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, uint>)(
                _slots[151] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[151] = nativeContext.LoadFunction(
                        "SDL_GetAudioStreamProperties",
                        "SDL3"
                    )
            )
        )(stream);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamProperties(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamProperties(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamQueued(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int>)(
                _slots[152] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[152] = nativeContext.LoadFunction("SDL_GetAudioStreamQueued", "SDL3")
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamQueued(AudioStreamHandle stream) =>
        DllImport.GetAudioStreamQueued(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetBasePath() => (sbyte*)((ISdl)this).GetBasePathRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetBasePath() => DllImport.GetBasePath();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetBasePathRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[153] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[153] = nativeContext.LoadFunction("SDL_GetBasePath", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetBasePathRaw() => DllImport.GetBasePathRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, byte, byte>)(
                _slots[154] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[154] = nativeContext.LoadFunction("SDL_GetBooleanProperty", "SDL3")
            )
        )(props, name, default_value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte default_value
    ) => DllImport.GetBooleanProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetBooleanProperty(props, __dsl_name, (byte)default_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> default_value
    ) => DllImport.GetBooleanProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCameraDriver(int index) => (sbyte*)((ISdl)this).GetCameraDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCameraDriver(int index) => DllImport.GetCameraDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCameraDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)(
                _slots[155] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[155] = nativeContext.LoadFunction("SDL_GetCameraDriver", "SDL3")
            )
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCameraDriverRaw(int index) => DllImport.GetCameraDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetCameraFormat(CameraHandle camera, CameraSpec* spec) =>
        (
            (delegate* unmanaged<CameraHandle, CameraSpec*, byte>)(
                _slots[156] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[156] = nativeContext.LoadFunction("SDL_GetCameraFormat", "SDL3")
            )
        )(camera, spec);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetCameraFormat(CameraHandle camera, CameraSpec* spec) =>
        DllImport.GetCameraFormat(camera, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetCameraFormat(CameraHandle camera, Ref<CameraSpec> spec)
    {
        fixed (CameraSpec* __dsl_spec = spec)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetCameraFormat(camera, __dsl_spec);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetCameraFormat(CameraHandle camera, Ref<CameraSpec> spec) =>
        DllImport.GetCameraFormat(camera, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraID(CameraHandle camera) =>
        (
            (delegate* unmanaged<CameraHandle, uint>)(
                _slots[157] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[157] = nativeContext.LoadFunction("SDL_GetCameraID", "SDL3")
            )
        )(camera);

    [return: NativeTypeName("SDL_CameraID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraID(CameraHandle camera) => DllImport.GetCameraID(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCameraName([NativeTypeName("SDL_CameraID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetCameraNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCameraName([NativeTypeName("SDL_CameraID")] uint instance_id) =>
        DllImport.GetCameraName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCameraNameRaw([NativeTypeName("SDL_CameraID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[158] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[158] = nativeContext.LoadFunction("SDL_GetCameraName", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCameraNameRaw([NativeTypeName("SDL_CameraID")] uint instance_id) =>
        DllImport.GetCameraNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCameraPermissionState(CameraHandle camera) =>
        (
            (delegate* unmanaged<CameraHandle, int>)(
                _slots[159] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[159] = nativeContext.LoadFunction(
                        "SDL_GetCameraPermissionState",
                        "SDL3"
                    )
            )
        )(camera);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCameraPermissionState(CameraHandle camera) =>
        DllImport.GetCameraPermissionState(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraPosition ISdl.GetCameraPosition([NativeTypeName("SDL_CameraID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, CameraPosition>)(
                _slots[160] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[160] = nativeContext.LoadFunction("SDL_GetCameraPosition", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraPosition GetCameraPosition(
        [NativeTypeName("SDL_CameraID")] uint instance_id
    ) => DllImport.GetCameraPosition(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraProperties(CameraHandle camera) =>
        (
            (delegate* unmanaged<CameraHandle, uint>)(
                _slots[161] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[161] = nativeContext.LoadFunction("SDL_GetCameraProperties", "SDL3")
            )
        )(camera);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraProperties(CameraHandle camera) =>
        DllImport.GetCameraProperties(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetCameras(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[162] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[162] = nativeContext.LoadFunction("SDL_GetCameras", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_CameraID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetCameras(int* count) => DllImport.GetCameras(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetCameras(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetCameras(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_CameraID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameras")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetCameras(Ref<int> count) => DllImport.GetCameras(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraSpec** ISdl.GetCameraSupportedFormats(
        [NativeTypeName("SDL_CameraID")] uint devid,
        int* count
    ) =>
        (
            (delegate* unmanaged<uint, int*, CameraSpec**>)(
                _slots[163] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[163] = nativeContext.LoadFunction(
                        "SDL_GetCameraSupportedFormats",
                        "SDL3"
                    )
            )
        )(devid, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraSpec** GetCameraSupportedFormats(
        [NativeTypeName("SDL_CameraID")] uint devid,
        int* count
    ) => DllImport.GetCameraSupportedFormats(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<CameraSpec> ISdl.GetCameraSupportedFormats(
        [NativeTypeName("SDL_CameraID")] uint devid,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (CameraSpec**)((ISdl)this).GetCameraSupportedFormats(devid, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraSupportedFormats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<CameraSpec> GetCameraSupportedFormats(
        [NativeTypeName("SDL_CameraID")] uint devid,
        Ref<int> count
    ) => DllImport.GetCameraSupportedFormats(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetClipboardData(
        [NativeTypeName("const char *")] sbyte* mime_type,
        [NativeTypeName("size_t *")] nuint* size
    ) =>
        (
            (delegate* unmanaged<sbyte*, nuint*, void*>)(
                _slots[164] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[164] = nativeContext.LoadFunction("SDL_GetClipboardData", "SDL3")
            )
        )(mime_type, size);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetClipboardData(
        [NativeTypeName("const char *")] sbyte* mime_type,
        [NativeTypeName("size_t *")] nuint* size
    ) => DllImport.GetClipboardData(mime_type, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type,
        [NativeTypeName("size_t *")] Ref<nuint> size
    )
    {
        fixed (nuint* __dsl_size = size)
        fixed (sbyte* __dsl_mime_type = mime_type)
        {
            return (void*)((ISdl)this).GetClipboardData(__dsl_mime_type, __dsl_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type,
        [NativeTypeName("size_t *")] Ref<nuint> size
    ) => DllImport.GetClipboardData(mime_type, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GetClipboardMimeTypes([NativeTypeName("size_t *")] nuint* num_mime_types) =>
        (
            (delegate* unmanaged<nuint*, sbyte**>)(
                _slots[165] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[165] = nativeContext.LoadFunction("SDL_GetClipboardMimeTypes", "SDL3")
            )
        )(num_mime_types);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GetClipboardMimeTypes(
        [NativeTypeName("size_t *")] nuint* num_mime_types
    ) => DllImport.GetClipboardMimeTypes(num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GetClipboardMimeTypes([NativeTypeName("size_t *")] Ref<nuint> num_mime_types)
    {
        fixed (nuint* __dsl_num_mime_types = num_mime_types)
        {
            return (sbyte**)((ISdl)this).GetClipboardMimeTypes(__dsl_num_mime_types);
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardMimeTypes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GetClipboardMimeTypes(
        [NativeTypeName("size_t *")] Ref<nuint> num_mime_types
    ) => DllImport.GetClipboardMimeTypes(num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetClipboardText() => (sbyte*)((ISdl)this).GetClipboardTextRaw();

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetClipboardText() => DllImport.GetClipboardText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetClipboardTextRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[166] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[166] = nativeContext.LoadFunction("SDL_GetClipboardText", "SDL3")
            )
        )();

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetClipboardTextRaw() => DllImport.GetClipboardTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("bool")] byte include_high_density_modes,
        DisplayMode* mode
    ) =>
        (
            (delegate* unmanaged<uint, int, int, float, byte, DisplayMode*, byte>)(
                _slots[167] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[167] = nativeContext.LoadFunction(
                        "SDL_GetClosestFullscreenDisplayMode",
                        "SDL3"
                    )
            )
        )(displayID, w, h, refresh_rate, include_high_density_modes, mode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("bool")] byte include_high_density_modes,
        DisplayMode* mode
    ) =>
        DllImport.GetClosestFullscreenDisplayMode(
            displayID,
            w,
            h,
            refresh_rate,
            include_high_density_modes,
            mode
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("bool")] MaybeBool<byte> include_high_density_modes,
        Ref<DisplayMode> mode
    )
    {
        fixed (DisplayMode* __dsl_mode = mode)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetClosestFullscreenDisplayMode(
                        displayID,
                        w,
                        h,
                        refresh_rate,
                        (byte)include_high_density_modes,
                        __dsl_mode
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("bool")] MaybeBool<byte> include_high_density_modes,
        Ref<DisplayMode> mode
    ) =>
        DllImport.GetClosestFullscreenDisplayMode(
            displayID,
            w,
            h,
            refresh_rate,
            include_high_density_modes,
            mode
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCPUCacheLineSize() =>
        (
            (delegate* unmanaged<int>)(
                _slots[168] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[168] = nativeContext.LoadFunction("SDL_GetCPUCacheLineSize", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCPUCacheLineSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCPUCacheLineSize() => DllImport.GetCPUCacheLineSize();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentAudioDriver() => (sbyte*)((ISdl)this).GetCurrentAudioDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentAudioDriver() => DllImport.GetCurrentAudioDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentAudioDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[169] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[169] = nativeContext.LoadFunction("SDL_GetCurrentAudioDriver", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentAudioDriverRaw() => DllImport.GetCurrentAudioDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentCameraDriver() => (sbyte*)((ISdl)this).GetCurrentCameraDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentCameraDriver() => DllImport.GetCurrentCameraDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentCameraDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[170] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[170] = nativeContext.LoadFunction("SDL_GetCurrentCameraDriver", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentCameraDriverRaw() => DllImport.GetCurrentCameraDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetCurrentDisplayMode([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (DisplayMode*)((ISdl)this).GetCurrentDisplayModeRaw(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetCurrentDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayMode(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetCurrentDisplayModeRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, DisplayMode*>)(
                _slots[171] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[171] = nativeContext.LoadFunction("SDL_GetCurrentDisplayMode", "SDL3")
            )
        )(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetCurrentDisplayModeRaw(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayModeRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayOrientation ISdl.GetCurrentDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) =>
        (
            (delegate* unmanaged<uint, DisplayOrientation>)(
                _slots[172] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[172] = nativeContext.LoadFunction(
                        "SDL_GetCurrentDisplayOrientation",
                        "SDL3"
                    )
            )
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayOrientation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayOrientation GetCurrentDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayOrientation(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetCurrentRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
        (
            (delegate* unmanaged<RendererHandle, int*, int*, byte>)(
                _slots[173] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[173] = nativeContext.LoadFunction(
                        "SDL_GetCurrentRenderOutputSize",
                        "SDL3"
                    )
            )
        )(renderer, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetCurrentRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
        DllImport.GetCurrentRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetCurrentRenderOutputSize(RendererHandle renderer, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetCurrentRenderOutputSize(renderer, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetCurrentRenderOutputSize(
        RendererHandle renderer,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetCurrentRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetCurrentThreadID() =>
        (
            (delegate* unmanaged<ulong>)(
                _slots[174] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[174] = nativeContext.LoadFunction("SDL_GetCurrentThreadID", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_ThreadID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentThreadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetCurrentThreadID() => DllImport.GetCurrentThreadID();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
        (
            (delegate* unmanaged<long*, byte>)(
                _slots[175] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[175] = nativeContext.LoadFunction("SDL_GetCurrentTime", "SDL3")
            )
        )(ticks);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
        DllImport.GetCurrentTime(ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
    {
        fixed (long* __dsl_ticks = ticks)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetCurrentTime(__dsl_ticks);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks) =>
        DllImport.GetCurrentTime(ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentVideoDriver() => (sbyte*)((ISdl)this).GetCurrentVideoDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentVideoDriver() => DllImport.GetCurrentVideoDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentVideoDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[176] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[176] = nativeContext.LoadFunction("SDL_GetCurrentVideoDriver", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentVideoDriverRaw() => DllImport.GetCurrentVideoDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.GetCursor() =>
        (
            (delegate* unmanaged<CursorHandle>)(
                _slots[177] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[177] = nativeContext.LoadFunction("SDL_GetCursor", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle GetCursor() => DllImport.GetCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetDateTimeLocalePreferences(DateFormat* dateFormat, TimeFormat* timeFormat) =>
        (
            (delegate* unmanaged<DateFormat*, TimeFormat*, byte>)(
                _slots[178] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[178] = nativeContext.LoadFunction(
                        "SDL_GetDateTimeLocalePreferences",
                        "SDL3"
                    )
            )
        )(dateFormat, timeFormat);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetDateTimeLocalePreferences(
        DateFormat* dateFormat,
        TimeFormat* timeFormat
    ) => DllImport.GetDateTimeLocalePreferences(dateFormat, timeFormat);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetDateTimeLocalePreferences(
        Ref<DateFormat> dateFormat,
        Ref<TimeFormat> timeFormat
    )
    {
        fixed (TimeFormat* __dsl_timeFormat = timeFormat)
        fixed (DateFormat* __dsl_dateFormat = dateFormat)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetDateTimeLocalePreferences(__dsl_dateFormat, __dsl_timeFormat);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDateTimeLocalePreferences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetDateTimeLocalePreferences(
        Ref<DateFormat> dateFormat,
        Ref<TimeFormat> timeFormat
    ) => DllImport.GetDateTimeLocalePreferences(dateFormat, timeFormat);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDayOfWeek(int year, int month, int day) =>
        (
            (delegate* unmanaged<int, int, int, int>)(
                _slots[179] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[179] = nativeContext.LoadFunction("SDL_GetDayOfWeek", "SDL3")
            )
        )(year, month, day);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfWeek")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDayOfWeek(int year, int month, int day) =>
        DllImport.GetDayOfWeek(year, month, day);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDayOfYear(int year, int month, int day) =>
        (
            (delegate* unmanaged<int, int, int, int>)(
                _slots[180] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[180] = nativeContext.LoadFunction("SDL_GetDayOfYear", "SDL3")
            )
        )(year, month, day);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDayOfYear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDayOfYear(int year, int month, int day) =>
        DllImport.GetDayOfYear(year, month, day);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDaysInMonth(int year, int month) =>
        (
            (delegate* unmanaged<int, int, int>)(
                _slots[181] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[181] = nativeContext.LoadFunction("SDL_GetDaysInMonth", "SDL3")
            )
        )(year, month);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDaysInMonth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDaysInMonth(int year, int month) => DllImport.GetDaysInMonth(year, month);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertionHandler ISdl.GetDefaultAssertionHandler() =>
        (
            (delegate* unmanaged<AssertionHandler>)(
                _slots[182] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[182] = nativeContext.LoadFunction(
                        "SDL_GetDefaultAssertionHandler",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("SDL_AssertionHandler")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertionHandler GetDefaultAssertionHandler() =>
        DllImport.GetDefaultAssertionHandler();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CursorHandle ISdl.GetDefaultCursor() =>
        (
            (delegate* unmanaged<CursorHandle>)(
                _slots[183] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[183] = nativeContext.LoadFunction("SDL_GetDefaultCursor", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CursorHandle GetDefaultCursor() => DllImport.GetDefaultCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    LogOutputFunction ISdl.GetDefaultLogOutputFunction() =>
        (
            (delegate* unmanaged<LogOutputFunction>)(
                _slots[184] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[184] = nativeContext.LoadFunction(
                        "SDL_GetDefaultLogOutputFunction",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("SDL_LogOutputFunction")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static LogOutputFunction GetDefaultLogOutputFunction() =>
        DllImport.GetDefaultLogOutputFunction();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetDesktopDisplayMode([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (DisplayMode*)((ISdl)this).GetDesktopDisplayModeRaw(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetDesktopDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetDesktopDisplayMode(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetDesktopDisplayModeRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, DisplayMode*>)(
                _slots[185] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[185] = nativeContext.LoadFunction("SDL_GetDesktopDisplayMode", "SDL3")
            )
        )(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetDesktopDisplayModeRaw(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetDesktopDisplayModeRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetDisplayBounds([NativeTypeName("SDL_DisplayID")] uint displayID, Rect* rect) =>
        (
            (delegate* unmanaged<uint, Rect*, byte>)(
                _slots[186] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[186] = nativeContext.LoadFunction("SDL_GetDisplayBounds", "SDL3")
            )
        )(displayID, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetDisplayBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Rect* rect
    ) => DllImport.GetDisplayBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetDisplayBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetDisplayBounds(displayID, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetDisplayBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    ) => DllImport.GetDisplayBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, float>)(
                _slots[187] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[187] = nativeContext.LoadFunction("SDL_GetDisplayContentScale", "SDL3")
            )
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayContentScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayContentScale(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
        (
            (delegate* unmanaged<Point*, uint>)(
                _slots[188] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[188] = nativeContext.LoadFunction("SDL_GetDisplayForPoint", "SDL3")
            )
        )(point);

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
        DllImport.GetDisplayForPoint(point);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point)
    {
        fixed (Point* __dsl_point = point)
        {
            return (uint)((ISdl)this).GetDisplayForPoint(__dsl_point);
        }
    }

    [return: NativeTypeName("SDL_DisplayID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point) =>
        DllImport.GetDisplayForPoint(point);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        (
            (delegate* unmanaged<Rect*, uint>)(
                _slots[189] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[189] = nativeContext.LoadFunction("SDL_GetDisplayForRect", "SDL3")
            )
        )(rect);

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        DllImport.GetDisplayForRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (uint)((ISdl)this).GetDisplayForRect(__dsl_rect);
        }
    }

    [return: NativeTypeName("SDL_DisplayID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
        DllImport.GetDisplayForRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForWindow(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, uint>)(
                _slots[190] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[190] = nativeContext.LoadFunction("SDL_GetDisplayForWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForWindow(WindowHandle window) =>
        DllImport.GetDisplayForWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (sbyte*)((ISdl)this).GetDisplayNameRaw(displayID);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayName(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[191] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[191] = nativeContext.LoadFunction("SDL_GetDisplayName", "SDL3")
            )
        )(displayID);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayNameRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, uint>)(
                _slots[192] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[192] = nativeContext.LoadFunction("SDL_GetDisplayProperties", "SDL3")
            )
        )(displayID);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayProperties(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetDisplays(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[193] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[193] = nativeContext.LoadFunction("SDL_GetDisplays", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_DisplayID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetDisplays(int* count) => DllImport.GetDisplays(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetDisplays(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetDisplays(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_DisplayID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetDisplays(Ref<int> count) => DllImport.GetDisplays(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Rect* rect
    ) =>
        (
            (delegate* unmanaged<uint, Rect*, byte>)(
                _slots[194] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[194] = nativeContext.LoadFunction("SDL_GetDisplayUsableBounds", "SDL3")
            )
        )(displayID, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Rect* rect
    ) => DllImport.GetDisplayUsableBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetDisplayUsableBounds(displayID, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    ) => DllImport.GetDisplayUsableBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetError() => (sbyte*)((ISdl)this).GetErrorRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetError() => DllImport.GetError();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetErrorRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[195] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[195] = nativeContext.LoadFunction("SDL_GetError", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetErrorRaw() => DllImport.GetErrorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] EventFilter* filter,
        void** userdata
    ) =>
        (
            (delegate* unmanaged<EventFilter*, void**, byte>)(
                _slots[196] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[196] = nativeContext.LoadFunction("SDL_GetEventFilter", "SDL3")
            )
        )(filter, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] EventFilter* filter,
        void** userdata
    ) => DllImport.GetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] Ref<EventFilter> filter,
        Ref2D userdata
    )
    {
        fixed (void** __dsl_userdata = userdata)
        fixed (EventFilter* __dsl_filter = filter)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetEventFilter(__dsl_filter, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] Ref<EventFilter> filter,
        Ref2D userdata
    ) => DllImport.GetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, float, float>)(
                _slots[197] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[197] = nativeContext.LoadFunction("SDL_GetFloatProperty", "SDL3")
            )
        )(props, name, default_value);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float default_value
    ) => DllImport.GetFloatProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (float)((ISdl)this).GetFloatProperty(props, __dsl_name, default_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float default_value
    ) => DllImport.GetFloatProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode** ISdl.GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int* count
    ) =>
        (
            (delegate* unmanaged<uint, int*, DisplayMode**>)(
                _slots[198] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[198] = nativeContext.LoadFunction(
                        "SDL_GetFullscreenDisplayModes",
                        "SDL3"
                    )
            )
        )(displayID, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode** GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int* count
    ) => DllImport.GetFullscreenDisplayModes(displayID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<DisplayMode> ISdl.GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (DisplayMode**)((ISdl)this).GetFullscreenDisplayModes(displayID, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<int> count
    ) => DllImport.GetFullscreenDisplayModes(displayID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadAppleSFSymbolsNameForAxis(GamepadHandle gamepad, GamepadAxis axis) =>
        (sbyte*)((ISdl)this).GetGamepadAppleSFSymbolsNameForAxisRaw(gamepad, axis);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
        GamepadHandle gamepad,
        GamepadAxis axis
    ) => DllImport.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadAppleSFSymbolsNameForAxisRaw(GamepadHandle gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadAxis, sbyte*>)(
                _slots[199] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[199] = nativeContext.LoadFunction(
                        "SDL_GetGamepadAppleSFSymbolsNameForAxis",
                        "SDL3"
                    )
            )
        )(gamepad, axis);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadAppleSFSymbolsNameForAxisRaw(
        GamepadHandle gamepad,
        GamepadAxis axis
    ) => DllImport.GetGamepadAppleSFSymbolsNameForAxisRaw(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadAppleSFSymbolsNameForButton(
        GamepadHandle gamepad,
        GamepadButton button
    ) => (sbyte*)((ISdl)this).GetGamepadAppleSFSymbolsNameForButtonRaw(gamepad, button);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
        GamepadHandle gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadAppleSFSymbolsNameForButtonRaw(
        GamepadHandle gamepad,
        GamepadButton button
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadButton, sbyte*>)(
                _slots[200] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[200] = nativeContext.LoadFunction(
                        "SDL_GetGamepadAppleSFSymbolsNameForButton",
                        "SDL3"
                    )
            )
        )(gamepad, button);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadAppleSFSymbolsNameForButtonRaw(
        GamepadHandle gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadAppleSFSymbolsNameForButtonRaw(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetGamepadAxis(GamepadHandle gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadAxis, short>)(
                _slots[201] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[201] = nativeContext.LoadFunction("SDL_GetGamepadAxis", "SDL3")
            )
        )(gamepad, axis);

    [return: NativeTypeName("Sint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetGamepadAxis(GamepadHandle gamepad, GamepadAxis axis) =>
        DllImport.GetGamepadAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadAxis ISdl.GetGamepadAxisFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadAxis>)(
                _slots[202] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[202] = nativeContext.LoadFunction(
                        "SDL_GetGamepadAxisFromString",
                        "SDL3"
                    )
            )
        )(str);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadAxis GetGamepadAxisFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadAxisFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadAxis ISdl.GetGamepadAxisFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadAxis)((ISdl)this).GetGamepadAxisFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadAxis GetGamepadAxisFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadAxisFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadBinding** ISdl.GetGamepadBindings(GamepadHandle gamepad, int* count) =>
        (
            (delegate* unmanaged<GamepadHandle, int*, GamepadBinding**>)(
                _slots[203] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[203] = nativeContext.LoadFunction("SDL_GetGamepadBindings", "SDL3")
            )
        )(gamepad, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadBinding** GetGamepadBindings(GamepadHandle gamepad, int* count) =>
        DllImport.GetGamepadBindings(gamepad, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<GamepadBinding> ISdl.GetGamepadBindings(GamepadHandle gamepad, Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (GamepadBinding**)((ISdl)this).GetGamepadBindings(gamepad, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<GamepadBinding> GetGamepadBindings(GamepadHandle gamepad, Ref<int> count) =>
        DllImport.GetGamepadBindings(gamepad, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetGamepadButton(GamepadHandle gamepad, GamepadButton button) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetGamepadButtonRaw(gamepad, button);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetGamepadButton(GamepadHandle gamepad, GamepadButton button) =>
        DllImport.GetGamepadButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButton ISdl.GetGamepadButtonFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadButton>)(
                _slots[205] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[205] = nativeContext.LoadFunction(
                        "SDL_GetGamepadButtonFromString",
                        "SDL3"
                    )
            )
        )(str);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButton GetGamepadButtonFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadButtonFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButton ISdl.GetGamepadButtonFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadButton)((ISdl)this).GetGamepadButtonFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButton GetGamepadButtonFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadButtonFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButtonLabel ISdl.GetGamepadButtonLabel(GamepadHandle gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadButton, GamepadButtonLabel>)(
                _slots[206] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[206] = nativeContext.LoadFunction("SDL_GetGamepadButtonLabel", "SDL3")
            )
        )(gamepad, button);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButtonLabel GetGamepadButtonLabel(
        GamepadHandle gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadButtonLabel(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButtonLabel ISdl.GetGamepadButtonLabelForType(GamepadType type, GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadType, GamepadButton, GamepadButtonLabel>)(
                _slots[207] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[207] = nativeContext.LoadFunction(
                        "SDL_GetGamepadButtonLabelForType",
                        "SDL3"
                    )
            )
        )(type, button);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabelForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButtonLabel GetGamepadButtonLabelForType(
        GamepadType type,
        GamepadButton button
    ) => DllImport.GetGamepadButtonLabelForType(type, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetGamepadButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadButton, byte>)(
                _slots[204] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[204] = nativeContext.LoadFunction("SDL_GetGamepadButton", "SDL3")
            )
        )(gamepad, button);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetGamepadButtonRaw(GamepadHandle gamepad, GamepadButton button) =>
        DllImport.GetGamepadButtonRaw(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetGamepadConnectionState(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, JoystickConnectionState>)(
                _slots[208] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[208] = nativeContext.LoadFunction(
                        "SDL_GetGamepadConnectionState",
                        "SDL3"
                    )
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetGamepadConnectionState(GamepadHandle gamepad) =>
        DllImport.GetGamepadConnectionState(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadFirmwareVersion(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort>)(
                _slots[209] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[209] = nativeContext.LoadFunction(
                        "SDL_GetGamepadFirmwareVersion",
                        "SDL3"
                    )
            )
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadFirmwareVersion(GamepadHandle gamepad) =>
        DllImport.GetGamepadFirmwareVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadHandle ISdl.GetGamepadFromID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, GamepadHandle>)(
                _slots[210] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[210] = nativeContext.LoadFunction("SDL_GetGamepadFromID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadHandle GetGamepadFromID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadFromID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadHandle ISdl.GetGamepadFromPlayerIndex(int player_index) =>
        (
            (delegate* unmanaged<int, GamepadHandle>)(
                _slots[211] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[211] = nativeContext.LoadFunction(
                        "SDL_GetGamepadFromPlayerIndex",
                        "SDL3"
                    )
            )
        )(player_index);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadHandle GetGamepadFromPlayerIndex(int player_index) =>
        DllImport.GetGamepadFromPlayerIndex(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetGamepadGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, Guid>)(
                _slots[212] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[212] = nativeContext.LoadFunction("SDL_GetGamepadGUIDForID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadGUIDForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetGamepadGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.GetGamepadGuidForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadID(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, uint>)(
                _slots[213] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[213] = nativeContext.LoadFunction("SDL_GetGamepadID", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadID(GamepadHandle gamepad) => DllImport.GetGamepadID(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickHandle ISdl.GetGamepadJoystick(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, JoystickHandle>)(
                _slots[214] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[214] = nativeContext.LoadFunction("SDL_GetGamepadJoystick", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickHandle GetGamepadJoystick(GamepadHandle gamepad) =>
        DllImport.GetGamepadJoystick(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadMapping(GamepadHandle gamepad) =>
        (sbyte*)((ISdl)this).GetGamepadMappingRaw(gamepad);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadMapping(GamepadHandle gamepad) =>
        DllImport.GetGamepadMapping(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadMappingForGuid(Guid guid) =>
        (sbyte*)((ISdl)this).GetGamepadMappingForGuidRaw(guid);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadMappingForGuid(Guid guid) =>
        DllImport.GetGamepadMappingForGuid(guid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadMappingForGuidRaw(Guid guid) =>
        (
            (delegate* unmanaged<Guid, sbyte*>)(
                _slots[216] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[216] = nativeContext.LoadFunction(
                        "SDL_GetGamepadMappingForGUID",
                        "SDL3"
                    )
            )
        )(guid);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadMappingForGuidRaw(Guid guid) =>
        DllImport.GetGamepadMappingForGuidRaw(guid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadMappingForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetGamepadMappingForIDRaw(instance_id);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadMappingForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadMappingForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadMappingForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[217] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[217] = nativeContext.LoadFunction("SDL_GetGamepadMappingForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadMappingForIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadMappingForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadMappingRaw(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, sbyte*>)(
                _slots[215] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[215] = nativeContext.LoadFunction("SDL_GetGamepadMapping", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadMappingRaw(GamepadHandle gamepad) =>
        DllImport.GetGamepadMappingRaw(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GetGamepadMappings(int* count) =>
        (
            (delegate* unmanaged<int*, sbyte**>)(
                _slots[218] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[218] = nativeContext.LoadFunction("SDL_GetGamepadMappings", "SDL3")
            )
        )(count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GetGamepadMappings(int* count) => DllImport.GetGamepadMappings(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GetGamepadMappings(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (sbyte**)((ISdl)this).GetGamepadMappings(__dsl_count);
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count) =>
        DllImport.GetGamepadMappings(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadName(GamepadHandle gamepad) =>
        (sbyte*)((ISdl)this).GetGamepadNameRaw(gamepad);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadName(GamepadHandle gamepad) =>
        DllImport.GetGamepadName(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadNameForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetGamepadNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadNameForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadNameForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[220] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[220] = nativeContext.LoadFunction("SDL_GetGamepadNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadNameForIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadNameRaw(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, sbyte*>)(
                _slots[219] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[219] = nativeContext.LoadFunction("SDL_GetGamepadName", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadNameRaw(GamepadHandle gamepad) =>
        DllImport.GetGamepadNameRaw(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadPath(GamepadHandle gamepad) =>
        (sbyte*)((ISdl)this).GetGamepadPathRaw(gamepad);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadPath(GamepadHandle gamepad) =>
        DllImport.GetGamepadPath(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadPathForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetGamepadPathForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadPathForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadPathForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadPathForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[222] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[222] = nativeContext.LoadFunction("SDL_GetGamepadPathForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPathForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadPathForIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadPathForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadPathRaw(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, sbyte*>)(
                _slots[221] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[221] = nativeContext.LoadFunction("SDL_GetGamepadPath", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadPathRaw(GamepadHandle gamepad) =>
        DllImport.GetGamepadPathRaw(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadPlayerIndex(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, int>)(
                _slots[223] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[223] = nativeContext.LoadFunction("SDL_GetGamepadPlayerIndex", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadPlayerIndex(GamepadHandle gamepad) =>
        DllImport.GetGamepadPlayerIndex(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadPlayerIndexForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)(
                _slots[224] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[224] = nativeContext.LoadFunction(
                        "SDL_GetGamepadPlayerIndexForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadPlayerIndexForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadPlayerIndexForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetGamepadPowerInfo(GamepadHandle gamepad, int* percent) =>
        (
            (delegate* unmanaged<GamepadHandle, int*, PowerState>)(
                _slots[225] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[225] = nativeContext.LoadFunction("SDL_GetGamepadPowerInfo", "SDL3")
            )
        )(gamepad, percent);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetGamepadPowerInfo(GamepadHandle gamepad, int* percent) =>
        DllImport.GetGamepadPowerInfo(gamepad, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetGamepadPowerInfo(GamepadHandle gamepad, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        {
            return (PowerState)((ISdl)this).GetGamepadPowerInfo(gamepad, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetGamepadPowerInfo(GamepadHandle gamepad, Ref<int> percent) =>
        DllImport.GetGamepadPowerInfo(gamepad, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProduct(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort>)(
                _slots[226] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[226] = nativeContext.LoadFunction("SDL_GetGamepadProduct", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProduct(GamepadHandle gamepad) =>
        DllImport.GetGamepadProduct(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProductForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[227] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[227] = nativeContext.LoadFunction("SDL_GetGamepadProductForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProductForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadProductForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProductVersion(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort>)(
                _slots[228] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[228] = nativeContext.LoadFunction(
                        "SDL_GetGamepadProductVersion",
                        "SDL3"
                    )
            )
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProductVersion(GamepadHandle gamepad) =>
        DllImport.GetGamepadProductVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProductVersionForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[229] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[229] = nativeContext.LoadFunction(
                        "SDL_GetGamepadProductVersionForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersionForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProductVersionForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadProductVersionForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadProperties(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, uint>)(
                _slots[230] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[230] = nativeContext.LoadFunction("SDL_GetGamepadProperties", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadProperties(GamepadHandle gamepad) =>
        DllImport.GetGamepadProperties(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetGamepads(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[231] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[231] = nativeContext.LoadFunction("SDL_GetGamepads", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_JoystickID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetGamepads(int* count) => DllImport.GetGamepads(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetGamepads(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetGamepads(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_JoystickID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetGamepads(Ref<int> count) => DllImport.GetGamepads(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetGamepadSensorData(
        GamepadHandle gamepad,
        SensorType type,
        float* data,
        int num_values
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, SensorType, float*, int, byte>)(
                _slots[232] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[232] = nativeContext.LoadFunction("SDL_GetGamepadSensorData", "SDL3")
            )
        )(gamepad, type, data, num_values);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetGamepadSensorData(
        GamepadHandle gamepad,
        SensorType type,
        float* data,
        int num_values
    ) => DllImport.GetGamepadSensorData(gamepad, type, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetGamepadSensorData(
        GamepadHandle gamepad,
        SensorType type,
        Ref<float> data,
        int num_values
    )
    {
        fixed (float* __dsl_data = data)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetGamepadSensorData(gamepad, type, __dsl_data, num_values);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetGamepadSensorData(
        GamepadHandle gamepad,
        SensorType type,
        Ref<float> data,
        int num_values
    ) => DllImport.GetGamepadSensorData(gamepad, type, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetGamepadSensorDataRate(GamepadHandle gamepad, SensorType type) =>
        (
            (delegate* unmanaged<GamepadHandle, SensorType, float>)(
                _slots[233] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[233] = nativeContext.LoadFunction(
                        "SDL_GetGamepadSensorDataRate",
                        "SDL3"
                    )
            )
        )(gamepad, type);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetGamepadSensorDataRate(GamepadHandle gamepad, SensorType type) =>
        DllImport.GetGamepadSensorDataRate(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadSerial(GamepadHandle gamepad) =>
        (sbyte*)((ISdl)this).GetGamepadSerialRaw(gamepad);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadSerial(GamepadHandle gamepad) =>
        DllImport.GetGamepadSerial(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadSerialRaw(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, sbyte*>)(
                _slots[234] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[234] = nativeContext.LoadFunction("SDL_GetGamepadSerial", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadSerialRaw(GamepadHandle gamepad) =>
        DllImport.GetGamepadSerialRaw(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetGamepadSteamHandle(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, ulong>)(
                _slots[235] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[235] = nativeContext.LoadFunction("SDL_GetGamepadSteamHandle", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetGamepadSteamHandle(GamepadHandle gamepad) =>
        DllImport.GetGamepadSteamHandle(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForAxis(GamepadAxis axis) =>
        (sbyte*)((ISdl)this).GetGamepadStringForAxisRaw(axis);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
        DllImport.GetGamepadStringForAxis(axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForAxisRaw(GamepadAxis axis) =>
        (
            (delegate* unmanaged<GamepadAxis, sbyte*>)(
                _slots[236] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[236] = nativeContext.LoadFunction(
                        "SDL_GetGamepadStringForAxis",
                        "SDL3"
                    )
            )
        )(axis);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
        DllImport.GetGamepadStringForAxisRaw(axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForButton(GamepadButton button) =>
        (sbyte*)((ISdl)this).GetGamepadStringForButtonRaw(button);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
        DllImport.GetGamepadStringForButton(button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForButtonRaw(GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadButton, sbyte*>)(
                _slots[237] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[237] = nativeContext.LoadFunction(
                        "SDL_GetGamepadStringForButton",
                        "SDL3"
                    )
            )
        )(button);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
        DllImport.GetGamepadStringForButtonRaw(button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForType(GamepadType type) =>
        (sbyte*)((ISdl)this).GetGamepadStringForTypeRaw(type);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
        DllImport.GetGamepadStringForType(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForTypeRaw(GamepadType type) =>
        (
            (delegate* unmanaged<GamepadType, sbyte*>)(
                _slots[238] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[238] = nativeContext.LoadFunction(
                        "SDL_GetGamepadStringForType",
                        "SDL3"
                    )
            )
        )(type);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
        DllImport.GetGamepadStringForTypeRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetGamepadTouchpadFinger(
        GamepadHandle gamepad,
        int touchpad,
        int finger,
        bool* down,
        float* x,
        float* y,
        float* pressure
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, int, int, bool*, float*, float*, float*, byte>)(
                _slots[239] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[239] = nativeContext.LoadFunction(
                        "SDL_GetGamepadTouchpadFinger",
                        "SDL3"
                    )
            )
        )(gamepad, touchpad, finger, down, x, y, pressure);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetGamepadTouchpadFinger(
        GamepadHandle gamepad,
        int touchpad,
        int finger,
        bool* down,
        float* x,
        float* y,
        float* pressure
    ) => DllImport.GetGamepadTouchpadFinger(gamepad, touchpad, finger, down, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetGamepadTouchpadFinger(
        GamepadHandle gamepad,
        int touchpad,
        int finger,
        Ref<bool> down,
        Ref<float> x,
        Ref<float> y,
        Ref<float> pressure
    )
    {
        fixed (float* __dsl_pressure = pressure)
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        fixed (bool* __dsl_down = down)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetGamepadTouchpadFinger(
                        gamepad,
                        touchpad,
                        finger,
                        __dsl_down,
                        __dsl_x,
                        __dsl_y,
                        __dsl_pressure
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetGamepadTouchpadFinger(
        GamepadHandle gamepad,
        int touchpad,
        int finger,
        Ref<bool> down,
        Ref<float> x,
        Ref<float> y,
        Ref<float> pressure
    ) => DllImport.GetGamepadTouchpadFinger(gamepad, touchpad, finger, down, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadType(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadType>)(
                _slots[240] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[240] = nativeContext.LoadFunction("SDL_GetGamepadType", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadType(GamepadHandle gamepad) =>
        DllImport.GetGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadTypeForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, GamepadType>)(
                _slots[241] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[241] = nativeContext.LoadFunction("SDL_GetGamepadTypeForID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadTypeForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadTypeForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadTypeFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadType>)(
                _slots[242] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[242] = nativeContext.LoadFunction(
                        "SDL_GetGamepadTypeFromString",
                        "SDL3"
                    )
            )
        )(str);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadTypeFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadTypeFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadTypeFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadType)((ISdl)this).GetGamepadTypeFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadTypeFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadTypeFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadVendor(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort>)(
                _slots[243] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[243] = nativeContext.LoadFunction("SDL_GetGamepadVendor", "SDL3")
            )
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadVendor(GamepadHandle gamepad) =>
        DllImport.GetGamepadVendor(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadVendorForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[244] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[244] = nativeContext.LoadFunction("SDL_GetGamepadVendorForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendorForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadVendorForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadVendorForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)(
                _slots[245] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[245] = nativeContext.LoadFunction("SDL_GetGlobalMouseState", "SDL3")
            )
        )(x, y);

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalMouseState(float* x, float* y) =>
        DllImport.GetGlobalMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetGlobalMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y) =>
        DllImport.GetGlobalMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalProperties() =>
        (
            (delegate* unmanaged<uint>)(
                _slots[246] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[246] = nativeContext.LoadFunction("SDL_GetGlobalProperties", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalProperties() => DllImport.GetGlobalProperties();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetGrabbedWindow() =>
        (
            (delegate* unmanaged<WindowHandle>)(
                _slots[247] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[247] = nativeContext.LoadFunction("SDL_GetGrabbedWindow", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetGrabbedWindow() => DllImport.GetGrabbedWindow();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetHapticEffectStatus(HapticHandle haptic, int effect) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetHapticEffectStatusRaw(haptic, effect);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetHapticEffectStatus(HapticHandle haptic, int effect) =>
        DllImport.GetHapticEffectStatus(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetHapticEffectStatusRaw(HapticHandle haptic, int effect) =>
        (
            (delegate* unmanaged<HapticHandle, int, byte>)(
                _slots[248] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[248] = nativeContext.LoadFunction("SDL_GetHapticEffectStatus", "SDL3")
            )
        )(haptic, effect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetHapticEffectStatusRaw(HapticHandle haptic, int effect) =>
        DllImport.GetHapticEffectStatusRaw(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticFeatures(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, uint>)(
                _slots[249] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[249] = nativeContext.LoadFunction("SDL_GetHapticFeatures", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticFeatures(HapticHandle haptic) =>
        DllImport.GetHapticFeatures(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HapticHandle ISdl.GetHapticFromID([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, HapticHandle>)(
                _slots[250] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[250] = nativeContext.LoadFunction("SDL_GetHapticFromID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HapticHandle GetHapticFromID([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        DllImport.GetHapticFromID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticID(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, uint>)(
                _slots[251] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[251] = nativeContext.LoadFunction("SDL_GetHapticID", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("SDL_HapticID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticID(HapticHandle haptic) => DllImport.GetHapticID(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHapticName(HapticHandle haptic) =>
        (sbyte*)((ISdl)this).GetHapticNameRaw(haptic);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHapticName(HapticHandle haptic) => DllImport.GetHapticName(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHapticNameForID([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetHapticNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHapticNameForID(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => DllImport.GetHapticNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHapticNameForIDRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[253] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[253] = nativeContext.LoadFunction("SDL_GetHapticNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHapticNameForIDRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        DllImport.GetHapticNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHapticNameRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, sbyte*>)(
                _slots[252] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[252] = nativeContext.LoadFunction("SDL_GetHapticName", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHapticNameRaw(HapticHandle haptic) =>
        DllImport.GetHapticNameRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetHaptics(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[254] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[254] = nativeContext.LoadFunction("SDL_GetHaptics", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_HapticID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetHaptics(int* count) => DllImport.GetHaptics(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetHaptics(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetHaptics(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_HapticID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetHaptics(Ref<int> count) => DllImport.GetHaptics(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHint([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*>)(
                _slots[255] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[255] = nativeContext.LoadFunction("SDL_GetHint", "SDL3")
            )
        )(name);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (sbyte*)((ISdl)this).GetHint(__dsl_name);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetHintBoolean(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte default_value
    ) =>
        (
            (delegate* unmanaged<sbyte*, byte, byte>)(
                _slots[256] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[256] = nativeContext.LoadFunction("SDL_GetHintBoolean", "SDL3")
            )
        )(name, default_value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetHintBoolean(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte default_value
    ) => DllImport.GetHintBoolean(name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetHintBoolean(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetHintBoolean(__dsl_name, (byte)default_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetHintBoolean(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> default_value
    ) => DllImport.GetHintBoolean(name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetIOProperties(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, uint>)(
                _slots[257] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[257] = nativeContext.LoadFunction("SDL_GetIOProperties", "SDL3")
            )
        )(context);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetIOProperties(IOStreamHandle context) =>
        DllImport.GetIOProperties(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetIOSize(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, long>)(
                _slots[258] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[258] = nativeContext.LoadFunction("SDL_GetIOSize", "SDL3")
            )
        )(context);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetIOSize(IOStreamHandle context) => DllImport.GetIOSize(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStatus ISdl.GetIOStatus(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, IOStatus>)(
                _slots[259] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[259] = nativeContext.LoadFunction("SDL_GetIOStatus", "SDL3")
            )
        )(context);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStatus GetIOStatus(IOStreamHandle context) => DllImport.GetIOStatus(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetJoystickAxis(JoystickHandle joystick, int axis) =>
        (
            (delegate* unmanaged<JoystickHandle, int, short>)(
                _slots[260] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[260] = nativeContext.LoadFunction("SDL_GetJoystickAxis", "SDL3")
            )
        )(joystick, axis);

    [return: NativeTypeName("Sint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetJoystickAxis(JoystickHandle joystick, int axis) =>
        DllImport.GetJoystickAxis(joystick, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickAxisInitialState(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16 *")] short* state
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, short*, byte>)(
                _slots[261] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[261] = nativeContext.LoadFunction(
                        "SDL_GetJoystickAxisInitialState",
                        "SDL3"
                    )
            )
        )(joystick, axis, state);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickAxisInitialState(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16 *")] short* state
    ) => DllImport.GetJoystickAxisInitialState(joystick, axis, state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetJoystickAxisInitialState(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16 *")] Ref<short> state
    )
    {
        fixed (short* __dsl_state = state)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetJoystickAxisInitialState(joystick, axis, __dsl_state);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetJoystickAxisInitialState(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16 *")] Ref<short> state
    ) => DllImport.GetJoystickAxisInitialState(joystick, axis, state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickBall(JoystickHandle joystick, int ball, int* dx, int* dy) =>
        (
            (delegate* unmanaged<JoystickHandle, int, int*, int*, byte>)(
                _slots[262] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[262] = nativeContext.LoadFunction("SDL_GetJoystickBall", "SDL3")
            )
        )(joystick, ball, dx, dy);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickBall(JoystickHandle joystick, int ball, int* dx, int* dy) =>
        DllImport.GetJoystickBall(joystick, ball, dx, dy);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetJoystickBall(
        JoystickHandle joystick,
        int ball,
        Ref<int> dx,
        Ref<int> dy
    )
    {
        fixed (int* __dsl_dy = dy)
        fixed (int* __dsl_dx = dx)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetJoystickBall(joystick, ball, __dsl_dx, __dsl_dy);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetJoystickBall(
        JoystickHandle joystick,
        int ball,
        Ref<int> dx,
        Ref<int> dy
    ) => DllImport.GetJoystickBall(joystick, ball, dx, dy);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetJoystickButton(JoystickHandle joystick, int button) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetJoystickButtonRaw(joystick, button);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetJoystickButton(JoystickHandle joystick, int button) =>
        DllImport.GetJoystickButton(joystick, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickButtonRaw(JoystickHandle joystick, int button) =>
        (
            (delegate* unmanaged<JoystickHandle, int, byte>)(
                _slots[263] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[263] = nativeContext.LoadFunction("SDL_GetJoystickButton", "SDL3")
            )
        )(joystick, button);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickButtonRaw(JoystickHandle joystick, int button) =>
        DllImport.GetJoystickButtonRaw(joystick, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetJoystickConnectionState(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, JoystickConnectionState>)(
                _slots[264] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[264] = nativeContext.LoadFunction(
                        "SDL_GetJoystickConnectionState",
                        "SDL3"
                    )
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetJoystickConnectionState(JoystickHandle joystick) =>
        DllImport.GetJoystickConnectionState(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickFirmwareVersion(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort>)(
                _slots[265] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[265] = nativeContext.LoadFunction(
                        "SDL_GetJoystickFirmwareVersion",
                        "SDL3"
                    )
            )
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickFirmwareVersion(JoystickHandle joystick) =>
        DllImport.GetJoystickFirmwareVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickHandle ISdl.GetJoystickFromID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, JoystickHandle>)(
                _slots[266] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[266] = nativeContext.LoadFunction("SDL_GetJoystickFromID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickHandle GetJoystickFromID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickFromID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickHandle ISdl.GetJoystickFromPlayerIndex(int player_index) =>
        (
            (delegate* unmanaged<int, JoystickHandle>)(
                _slots[267] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[267] = nativeContext.LoadFunction(
                        "SDL_GetJoystickFromPlayerIndex",
                        "SDL3"
                    )
            )
        )(player_index);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickHandle GetJoystickFromPlayerIndex(int player_index) =>
        DllImport.GetJoystickFromPlayerIndex(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuid(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, Guid>)(
                _slots[268] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[268] = nativeContext.LoadFunction("SDL_GetJoystickGUID", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuid(JoystickHandle joystick) =>
        DllImport.GetJoystickGuid(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, Guid>)(
                _slots[269] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[269] = nativeContext.LoadFunction("SDL_GetJoystickGUIDForID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuidForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.GetJoystickGuidForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetJoystickGuidInfo(
        Guid guid,
        [NativeTypeName("Uint16 *")] ushort* vendor,
        [NativeTypeName("Uint16 *")] ushort* product,
        [NativeTypeName("Uint16 *")] ushort* version,
        [NativeTypeName("Uint16 *")] ushort* crc16
    ) =>
        (
            (delegate* unmanaged<Guid, ushort*, ushort*, ushort*, ushort*, void>)(
                _slots[270] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[270] = nativeContext.LoadFunction("SDL_GetJoystickGUIDInfo", "SDL3")
            )
        )(guid, vendor, product, version, crc16);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetJoystickGuidInfo(
        Guid guid,
        [NativeTypeName("Uint16 *")] ushort* vendor,
        [NativeTypeName("Uint16 *")] ushort* product,
        [NativeTypeName("Uint16 *")] ushort* version,
        [NativeTypeName("Uint16 *")] ushort* crc16
    ) => DllImport.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetJoystickGuidInfo(
        Guid guid,
        [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
        [NativeTypeName("Uint16 *")] Ref<ushort> product,
        [NativeTypeName("Uint16 *")] Ref<ushort> version,
        [NativeTypeName("Uint16 *")] Ref<ushort> crc16
    )
    {
        fixed (ushort* __dsl_crc16 = crc16)
        fixed (ushort* __dsl_version = version)
        fixed (ushort* __dsl_product = product)
        fixed (ushort* __dsl_vendor = vendor)
        {
            ((ISdl)this).GetJoystickGuidInfo(
                guid,
                __dsl_vendor,
                __dsl_product,
                __dsl_version,
                __dsl_crc16
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetJoystickGuidInfo(
        Guid guid,
        [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
        [NativeTypeName("Uint16 *")] Ref<ushort> product,
        [NativeTypeName("Uint16 *")] Ref<ushort> version,
        [NativeTypeName("Uint16 *")] Ref<ushort> crc16
    ) => DllImport.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickHat(JoystickHandle joystick, int hat) =>
        (
            (delegate* unmanaged<JoystickHandle, int, byte>)(
                _slots[271] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[271] = nativeContext.LoadFunction("SDL_GetJoystickHat", "SDL3")
            )
        )(joystick, hat);

    [return: NativeTypeName("Uint8")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickHat(JoystickHandle joystick, int hat) =>
        DllImport.GetJoystickHat(joystick, hat);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickID(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, uint>)(
                _slots[272] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[272] = nativeContext.LoadFunction("SDL_GetJoystickID", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickID(JoystickHandle joystick) => DllImport.GetJoystickID(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickName(JoystickHandle joystick) =>
        (sbyte*)((ISdl)this).GetJoystickNameRaw(joystick);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickName(JoystickHandle joystick) =>
        DllImport.GetJoystickName(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickNameForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetJoystickNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickNameForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickNameForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[274] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[274] = nativeContext.LoadFunction("SDL_GetJoystickNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickNameForIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickNameRaw(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, sbyte*>)(
                _slots[273] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[273] = nativeContext.LoadFunction("SDL_GetJoystickName", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickNameRaw(JoystickHandle joystick) =>
        DllImport.GetJoystickNameRaw(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickPath(JoystickHandle joystick) =>
        (sbyte*)((ISdl)this).GetJoystickPathRaw(joystick);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickPath(JoystickHandle joystick) =>
        DllImport.GetJoystickPath(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickPathForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetJoystickPathForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickPathForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickPathForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickPathForIDRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[276] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[276] = nativeContext.LoadFunction("SDL_GetJoystickPathForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPathForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickPathForIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickPathForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickPathRaw(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, sbyte*>)(
                _slots[275] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[275] = nativeContext.LoadFunction("SDL_GetJoystickPath", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickPathRaw(JoystickHandle joystick) =>
        DllImport.GetJoystickPathRaw(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickPlayerIndex(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, int>)(
                _slots[277] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[277] = nativeContext.LoadFunction("SDL_GetJoystickPlayerIndex", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickPlayerIndex(JoystickHandle joystick) =>
        DllImport.GetJoystickPlayerIndex(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickPlayerIndexForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)(
                _slots[278] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[278] = nativeContext.LoadFunction(
                        "SDL_GetJoystickPlayerIndexForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickPlayerIndexForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickPlayerIndexForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetJoystickPowerInfo(JoystickHandle joystick, int* percent) =>
        (
            (delegate* unmanaged<JoystickHandle, int*, PowerState>)(
                _slots[279] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[279] = nativeContext.LoadFunction("SDL_GetJoystickPowerInfo", "SDL3")
            )
        )(joystick, percent);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetJoystickPowerInfo(JoystickHandle joystick, int* percent) =>
        DllImport.GetJoystickPowerInfo(joystick, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetJoystickPowerInfo(JoystickHandle joystick, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        {
            return (PowerState)((ISdl)this).GetJoystickPowerInfo(joystick, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetJoystickPowerInfo(JoystickHandle joystick, Ref<int> percent) =>
        DllImport.GetJoystickPowerInfo(joystick, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProduct(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort>)(
                _slots[280] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[280] = nativeContext.LoadFunction("SDL_GetJoystickProduct", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProduct(JoystickHandle joystick) =>
        DllImport.GetJoystickProduct(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProductForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[281] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[281] = nativeContext.LoadFunction(
                        "SDL_GetJoystickProductForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProductForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickProductForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProductVersion(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort>)(
                _slots[282] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[282] = nativeContext.LoadFunction(
                        "SDL_GetJoystickProductVersion",
                        "SDL3"
                    )
            )
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProductVersion(JoystickHandle joystick) =>
        DllImport.GetJoystickProductVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProductVersionForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[283] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[283] = nativeContext.LoadFunction(
                        "SDL_GetJoystickProductVersionForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersionForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProductVersionForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickProductVersionForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickProperties(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, uint>)(
                _slots[284] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[284] = nativeContext.LoadFunction("SDL_GetJoystickProperties", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickProperties(JoystickHandle joystick) =>
        DllImport.GetJoystickProperties(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetJoysticks(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[285] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[285] = nativeContext.LoadFunction("SDL_GetJoysticks", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_JoystickID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetJoysticks(int* count) => DllImport.GetJoysticks(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetJoysticks(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetJoysticks(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_JoystickID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetJoysticks(Ref<int> count) => DllImport.GetJoysticks(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickSerial(JoystickHandle joystick) =>
        (sbyte*)((ISdl)this).GetJoystickSerialRaw(joystick);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickSerial(JoystickHandle joystick) =>
        DllImport.GetJoystickSerial(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickSerialRaw(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, sbyte*>)(
                _slots[286] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[286] = nativeContext.LoadFunction("SDL_GetJoystickSerial", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickSerialRaw(JoystickHandle joystick) =>
        DllImport.GetJoystickSerialRaw(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickType ISdl.GetJoystickType(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, JoystickType>)(
                _slots[287] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[287] = nativeContext.LoadFunction("SDL_GetJoystickType", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickType GetJoystickType(JoystickHandle joystick) =>
        DllImport.GetJoystickType(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickType ISdl.GetJoystickTypeForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, JoystickType>)(
                _slots[288] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[288] = nativeContext.LoadFunction("SDL_GetJoystickTypeForID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickTypeForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickType GetJoystickTypeForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickTypeForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickVendor(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort>)(
                _slots[289] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[289] = nativeContext.LoadFunction("SDL_GetJoystickVendor", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickVendor(JoystickHandle joystick) =>
        DllImport.GetJoystickVendor(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickVendorForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)(
                _slots[290] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[290] = nativeContext.LoadFunction("SDL_GetJoystickVendorForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendorForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickVendorForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickVendorForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetKeyboardFocus() =>
        (
            (delegate* unmanaged<WindowHandle>)(
                _slots[291] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[291] = nativeContext.LoadFunction("SDL_GetKeyboardFocus", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetKeyboardFocus() => DllImport.GetKeyboardFocus();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetKeyboardNameForID([NativeTypeName("SDL_KeyboardID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetKeyboardNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetKeyboardNameForID(
        [NativeTypeName("SDL_KeyboardID")] uint instance_id
    ) => DllImport.GetKeyboardNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetKeyboardNameForIDRaw([NativeTypeName("SDL_KeyboardID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[292] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[292] = nativeContext.LoadFunction("SDL_GetKeyboardNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetKeyboardNameForIDRaw(
        [NativeTypeName("SDL_KeyboardID")] uint instance_id
    ) => DllImport.GetKeyboardNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetKeyboards(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[293] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[293] = nativeContext.LoadFunction("SDL_GetKeyboards", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_KeyboardID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetKeyboards(int* count) => DllImport.GetKeyboards(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetKeyboards(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetKeyboards(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_KeyboardID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetKeyboards(Ref<int> count) => DllImport.GetKeyboards(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    bool* ISdl.GetKeyboardState(int* numkeys) =>
        (
            (delegate* unmanaged<int*, bool*>)(
                _slots[294] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[294] = nativeContext.LoadFunction("SDL_GetKeyboardState", "SDL3")
            )
        )(numkeys);

    [return: NativeTypeName("const bool *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static bool* GetKeyboardState(int* numkeys) => DllImport.GetKeyboardState(numkeys);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<bool> ISdl.GetKeyboardState(Ref<int> numkeys)
    {
        fixed (int* __dsl_numkeys = numkeys)
        {
            return (bool*)((ISdl)this).GetKeyboardState(__dsl_numkeys);
        }
    }

    [return: NativeTypeName("const bool *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<bool> GetKeyboardState(Ref<int> numkeys) =>
        DllImport.GetKeyboardState(numkeys);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, uint>)(
                _slots[295] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[295] = nativeContext.LoadFunction("SDL_GetKeyFromName", "SDL3")
            )
        )(name);

    [return: NativeTypeName("SDL_Keycode")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetKeyFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (uint)((ISdl)this).GetKeyFromName(__dsl_name);
        }
    }

    [return: NativeTypeName("SDL_Keycode")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetKeyFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetKeyFromScancode(
        Scancode scancode,
        [NativeTypeName("SDL_Keymod")] ushort modstate,
        [NativeTypeName("bool")] byte key_event
    ) =>
        (
            (delegate* unmanaged<Scancode, ushort, byte, uint>)(
                _slots[296] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[296] = nativeContext.LoadFunction("SDL_GetKeyFromScancode", "SDL3")
            )
        )(scancode, modstate, key_event);

    [return: NativeTypeName("SDL_Keycode")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetKeyFromScancode(
        Scancode scancode,
        [NativeTypeName("SDL_Keymod")] ushort modstate,
        [NativeTypeName("bool")] byte key_event
    ) => DllImport.GetKeyFromScancode(scancode, modstate, key_event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetKeyFromScancode(
        Scancode scancode,
        [NativeTypeName("SDL_Keymod")] ushort modstate,
        [NativeTypeName("bool")] MaybeBool<byte> key_event
    ) => (uint)((ISdl)this).GetKeyFromScancode(scancode, modstate, (byte)key_event);

    [return: NativeTypeName("SDL_Keycode")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromScancode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetKeyFromScancode(
        Scancode scancode,
        [NativeTypeName("SDL_Keymod")] ushort modstate,
        [NativeTypeName("bool")] MaybeBool<byte> key_event
    ) => DllImport.GetKeyFromScancode(scancode, modstate, key_event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetKeyName([NativeTypeName("SDL_Keycode")] uint key) =>
        (sbyte*)((ISdl)this).GetKeyNameRaw(key);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] uint key) =>
        DllImport.GetKeyName(key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetKeyNameRaw([NativeTypeName("SDL_Keycode")] uint key) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[297] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[297] = nativeContext.LoadFunction("SDL_GetKeyName", "SDL3")
            )
        )(key);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] uint key) =>
        DllImport.GetKeyNameRaw(key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")] LogOutputFunction* callback,
        void** userdata
    ) =>
        (
            (delegate* unmanaged<LogOutputFunction*, void**, void>)(
                _slots[298] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[298] = nativeContext.LoadFunction("SDL_GetLogOutputFunction", "SDL3")
            )
        )(callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")] LogOutputFunction* callback,
        void** userdata
    ) => DllImport.GetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")] Ref<LogOutputFunction> callback,
        Ref2D userdata
    )
    {
        fixed (void** __dsl_userdata = userdata)
        fixed (LogOutputFunction* __dsl_callback = callback)
        {
            ((ISdl)this).GetLogOutputFunction(__dsl_callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")] Ref<LogOutputFunction> callback,
        Ref2D userdata
    ) => DllImport.GetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    LogPriority ISdl.GetLogPriority(int category) =>
        (
            (delegate* unmanaged<int, LogPriority>)(
                _slots[299] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[299] = nativeContext.LoadFunction("SDL_GetLogPriority", "SDL3")
            )
        )(category);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetLogPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static LogPriority GetLogPriority(int category) => DllImport.GetLogPriority(category);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetMasksForPixelFormat(
        PixelFormat format,
        int* bpp,
        [NativeTypeName("Uint32 *")] uint* Rmask,
        [NativeTypeName("Uint32 *")] uint* Gmask,
        [NativeTypeName("Uint32 *")] uint* Bmask,
        [NativeTypeName("Uint32 *")] uint* Amask
    ) =>
        (
            (delegate* unmanaged<PixelFormat, int*, uint*, uint*, uint*, uint*, byte>)(
                _slots[300] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[300] = nativeContext.LoadFunction("SDL_GetMasksForPixelFormat", "SDL3")
            )
        )(format, bpp, Rmask, Gmask, Bmask, Amask);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetMasksForPixelFormat(
        PixelFormat format,
        int* bpp,
        [NativeTypeName("Uint32 *")] uint* Rmask,
        [NativeTypeName("Uint32 *")] uint* Gmask,
        [NativeTypeName("Uint32 *")] uint* Bmask,
        [NativeTypeName("Uint32 *")] uint* Amask
    ) => DllImport.GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetMasksForPixelFormat(
        PixelFormat format,
        Ref<int> bpp,
        [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Amask
    )
    {
        fixed (uint* __dsl_Amask = Amask)
        fixed (uint* __dsl_Bmask = Bmask)
        fixed (uint* __dsl_Gmask = Gmask)
        fixed (uint* __dsl_Rmask = Rmask)
        fixed (int* __dsl_bpp = bpp)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetMasksForPixelFormat(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetMasksForPixelFormat(
        PixelFormat format,
        Ref<int> bpp,
        [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Amask
    ) => DllImport.GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffects(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, int>)(
                _slots[301] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[301] = nativeContext.LoadFunction("SDL_GetMaxHapticEffects", "SDL3")
            )
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffects(HapticHandle haptic) =>
        DllImport.GetMaxHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffectsPlaying(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, int>)(
                _slots[302] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[302] = nativeContext.LoadFunction(
                        "SDL_GetMaxHapticEffectsPlaying",
                        "SDL3"
                    )
            )
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffectsPlaying(HapticHandle haptic) =>
        DllImport.GetMaxHapticEffectsPlaying(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetMice(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[303] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[303] = nativeContext.LoadFunction("SDL_GetMice", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_MouseID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetMice(int* count) => DllImport.GetMice(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetMice(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetMice(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_MouseID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetMice(Ref<int> count) => DllImport.GetMice(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetModState() =>
        (
            (delegate* unmanaged<ushort>)(
                _slots[304] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[304] = nativeContext.LoadFunction("SDL_GetModState", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_Keymod")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetModState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetModState() => DllImport.GetModState();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetMouseFocus() =>
        (
            (delegate* unmanaged<WindowHandle>)(
                _slots[305] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[305] = nativeContext.LoadFunction("SDL_GetMouseFocus", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetMouseFocus() => DllImport.GetMouseFocus();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetMouseNameForID([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetMouseNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetMouseNameForID([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        DllImport.GetMouseNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetMouseNameForIDRaw([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[306] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[306] = nativeContext.LoadFunction("SDL_GetMouseNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetMouseNameForIDRaw([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        DllImport.GetMouseNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)(
                _slots[307] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[307] = nativeContext.LoadFunction("SDL_GetMouseState", "SDL3")
            )
        )(x, y);

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetMouseState(float* x, float* y) => DllImport.GetMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetMouseState(Ref<float> x, Ref<float> y) => DllImport.GetMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayOrientation ISdl.GetNaturalDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) =>
        (
            (delegate* unmanaged<uint, DisplayOrientation>)(
                _slots[308] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[308] = nativeContext.LoadFunction(
                        "SDL_GetNaturalDisplayOrientation",
                        "SDL3"
                    )
            )
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNaturalDisplayOrientation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayOrientation GetNaturalDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetNaturalDisplayOrientation(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumAudioDrivers() =>
        (
            (delegate* unmanaged<int>)(
                _slots[309] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[309] = nativeContext.LoadFunction("SDL_GetNumAudioDrivers", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumAudioDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumAudioDrivers() => DllImport.GetNumAudioDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, long, long>)(
                _slots[310] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[310] = nativeContext.LoadFunction("SDL_GetNumberProperty", "SDL3")
            )
        )(props, name, default_value);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long default_value
    ) => DllImport.GetNumberProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (long)((ISdl)this).GetNumberProperty(props, __dsl_name, default_value);
        }
    }

    [return: NativeTypeName("Sint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long default_value
    ) => DllImport.GetNumberProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumCameraDrivers() =>
        (
            (delegate* unmanaged<int>)(
                _slots[311] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[311] = nativeContext.LoadFunction("SDL_GetNumCameraDrivers", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumCameraDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumCameraDrivers() => DllImport.GetNumCameraDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpadFingers(GamepadHandle gamepad, int touchpad) =>
        (
            (delegate* unmanaged<GamepadHandle, int, int>)(
                _slots[312] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[312] = nativeContext.LoadFunction(
                        "SDL_GetNumGamepadTouchpadFingers",
                        "SDL3"
                    )
            )
        )(gamepad, touchpad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpadFingers(GamepadHandle gamepad, int touchpad) =>
        DllImport.GetNumGamepadTouchpadFingers(gamepad, touchpad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpads(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, int>)(
                _slots[313] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[313] = nativeContext.LoadFunction("SDL_GetNumGamepadTouchpads", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpads(GamepadHandle gamepad) =>
        DllImport.GetNumGamepadTouchpads(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumHapticAxes(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, int>)(
                _slots[314] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[314] = nativeContext.LoadFunction("SDL_GetNumHapticAxes", "SDL3")
            )
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumHapticAxes(HapticHandle haptic) => DllImport.GetNumHapticAxes(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickAxes(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, int>)(
                _slots[315] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[315] = nativeContext.LoadFunction("SDL_GetNumJoystickAxes", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickAxes(JoystickHandle joystick) =>
        DllImport.GetNumJoystickAxes(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickBalls(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, int>)(
                _slots[316] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[316] = nativeContext.LoadFunction("SDL_GetNumJoystickBalls", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickBalls(JoystickHandle joystick) =>
        DllImport.GetNumJoystickBalls(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickButtons(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, int>)(
                _slots[317] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[317] = nativeContext.LoadFunction("SDL_GetNumJoystickButtons", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickButtons(JoystickHandle joystick) =>
        DllImport.GetNumJoystickButtons(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickHats(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, int>)(
                _slots[318] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[318] = nativeContext.LoadFunction("SDL_GetNumJoystickHats", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickHats(JoystickHandle joystick) =>
        DllImport.GetNumJoystickHats(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumLogicalCPUCores() =>
        (
            (delegate* unmanaged<int>)(
                _slots[319] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[319] = nativeContext.LoadFunction("SDL_GetNumLogicalCPUCores", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumLogicalCPUCores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumLogicalCPUCores() => DllImport.GetNumLogicalCPUCores();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumRenderDrivers() =>
        (
            (delegate* unmanaged<int>)(
                _slots[320] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[320] = nativeContext.LoadFunction("SDL_GetNumRenderDrivers", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumRenderDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumRenderDrivers() => DllImport.GetNumRenderDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumVideoDrivers() =>
        (
            (delegate* unmanaged<int>)(
                _slots[321] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[321] = nativeContext.LoadFunction("SDL_GetNumVideoDrivers", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumVideoDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumVideoDrivers() => DllImport.GetNumVideoDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
        (
            (delegate* unmanaged<sbyte*, PathInfo*, byte>)(
                _slots[322] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[322] = nativeContext.LoadFunction("SDL_GetPathInfo", "SDL3")
            )
        )(path, info);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
        DllImport.GetPathInfo(path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetPathInfo(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    )
    {
        fixed (PathInfo* __dsl_info = info)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetPathInfo(__dsl_path, __dsl_info);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetPathInfo(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    ) => DllImport.GetPathInfo(path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetPerformanceCounter() =>
        (
            (delegate* unmanaged<ulong>)(
                _slots[323] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[323] = nativeContext.LoadFunction("SDL_GetPerformanceCounter", "SDL3")
            )
        )();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceCounter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPerformanceCounter() => DllImport.GetPerformanceCounter();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetPerformanceFrequency() =>
        (
            (delegate* unmanaged<ulong>)(
                _slots[324] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[324] = nativeContext.LoadFunction(
                        "SDL_GetPerformanceFrequency",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPerformanceFrequency")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPerformanceFrequency() => DllImport.GetPerformanceFrequency();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<PixelFormatDetails> ISdl.GetPixelFormatDetails(PixelFormat format) =>
        (PixelFormatDetails*)((ISdl)this).GetPixelFormatDetailsRaw(format);

    [return: NativeTypeName("const SDL_PixelFormatDetails *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<PixelFormatDetails> GetPixelFormatDetails(PixelFormat format) =>
        DllImport.GetPixelFormatDetails(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PixelFormatDetails* ISdl.GetPixelFormatDetailsRaw(PixelFormat format) =>
        (
            (delegate* unmanaged<PixelFormat, PixelFormatDetails*>)(
                _slots[325] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[325] = nativeContext.LoadFunction("SDL_GetPixelFormatDetails", "SDL3")
            )
        )(format);

    [return: NativeTypeName("const SDL_PixelFormatDetails *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatDetails")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PixelFormatDetails* GetPixelFormatDetailsRaw(PixelFormat format) =>
        DllImport.GetPixelFormatDetailsRaw(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PixelFormat ISdl.GetPixelFormatForMasks(
        int bpp,
        [NativeTypeName("Uint32")] uint Rmask,
        [NativeTypeName("Uint32")] uint Gmask,
        [NativeTypeName("Uint32")] uint Bmask,
        [NativeTypeName("Uint32")] uint Amask
    ) =>
        (
            (delegate* unmanaged<int, uint, uint, uint, uint, PixelFormat>)(
                _slots[326] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[326] = nativeContext.LoadFunction("SDL_GetPixelFormatForMasks", "SDL3")
            )
        )(bpp, Rmask, Gmask, Bmask, Amask);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatForMasks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PixelFormat GetPixelFormatForMasks(
        int bpp,
        [NativeTypeName("Uint32")] uint Rmask,
        [NativeTypeName("Uint32")] uint Gmask,
        [NativeTypeName("Uint32")] uint Bmask,
        [NativeTypeName("Uint32")] uint Amask
    ) => DllImport.GetPixelFormatForMasks(bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPixelFormatName(PixelFormat format) =>
        (sbyte*)((ISdl)this).GetPixelFormatNameRaw(format);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPixelFormatName(PixelFormat format) =>
        DllImport.GetPixelFormatName(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPixelFormatNameRaw(PixelFormat format) =>
        (
            (delegate* unmanaged<PixelFormat, sbyte*>)(
                _slots[327] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[327] = nativeContext.LoadFunction("SDL_GetPixelFormatName", "SDL3")
            )
        )(format);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPixelFormatNameRaw(PixelFormat format) =>
        DllImport.GetPixelFormatNameRaw(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPlatform() => (sbyte*)((ISdl)this).GetPlatformRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPlatform() => DllImport.GetPlatform();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPlatformRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[328] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[328] = nativeContext.LoadFunction("SDL_GetPlatform", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPlatformRaw() => DllImport.GetPlatformRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, void*, void*>)(
                _slots[329] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[329] = nativeContext.LoadFunction("SDL_GetPointerProperty", "SDL3")
            )
        )(props, name, default_value);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* default_value
    ) => DllImport.GetPointerProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref default_value
    )
    {
        fixed (void* __dsl_default_value = default_value)
        fixed (sbyte* __dsl_name = name)
        {
            return (void*)((ISdl)this).GetPointerProperty(props, __dsl_name, __dsl_default_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPointerProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref default_value
    ) => DllImport.GetPointerProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetPowerInfo(int* seconds, int* percent) =>
        (
            (delegate* unmanaged<int*, int*, PowerState>)(
                _slots[330] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[330] = nativeContext.LoadFunction("SDL_GetPowerInfo", "SDL3")
            )
        )(seconds, percent);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetPowerInfo(int* seconds, int* percent) =>
        DllImport.GetPowerInfo(seconds, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetPowerInfo(Ref<int> seconds, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        fixed (int* __dsl_seconds = seconds)
        {
            return (PowerState)((ISdl)this).GetPowerInfo(__dsl_seconds, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent) =>
        DllImport.GetPowerInfo(seconds, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Locale** ISdl.GetPreferredLocales(int* count) =>
        (
            (delegate* unmanaged<int*, Locale**>)(
                _slots[331] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[331] = nativeContext.LoadFunction("SDL_GetPreferredLocales", "SDL3")
            )
        )(count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Locale** GetPreferredLocales(int* count) => DllImport.GetPreferredLocales(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<Locale> ISdl.GetPreferredLocales(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (Locale**)((ISdl)this).GetPreferredLocales(__dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<Locale> GetPreferredLocales(Ref<int> count) =>
        DllImport.GetPreferredLocales(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPrefPath(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, sbyte*>)(
                _slots[332] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[332] = nativeContext.LoadFunction("SDL_GetPrefPath", "SDL3")
            )
        )(org, app);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPrefPath(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app
    ) => DllImport.GetPrefPath(org, app);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPrefPath(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app
    )
    {
        fixed (sbyte* __dsl_app = app)
        fixed (sbyte* __dsl_org = org)
        {
            return (sbyte*)((ISdl)this).GetPrefPath(__dsl_org, __dsl_app);
        }
    }

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPrefPath(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app
    ) => DllImport.GetPrefPath(org, app);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPrimaryDisplay() =>
        (
            (delegate* unmanaged<uint>)(
                _slots[333] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[333] = nativeContext.LoadFunction("SDL_GetPrimaryDisplay", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimaryDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPrimaryDisplay() => DllImport.GetPrimaryDisplay();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPrimarySelectionText() => (sbyte*)((ISdl)this).GetPrimarySelectionTextRaw();

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPrimarySelectionText() => DllImport.GetPrimarySelectionText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPrimarySelectionTextRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[334] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[334] = nativeContext.LoadFunction(
                        "SDL_GetPrimarySelectionText",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPrimarySelectionTextRaw() => DllImport.GetPrimarySelectionTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PropertyType ISdl.GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, PropertyType>)(
                _slots[335] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[335] = nativeContext.LoadFunction("SDL_GetPropertyType", "SDL3")
            )
        )(props, name);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PropertyType GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.GetPropertyType(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PropertyType ISdl.GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (PropertyType)((ISdl)this).GetPropertyType(props, __dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PropertyType GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.GetPropertyType(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetRealGamepadType(GamepadHandle gamepad) =>
        (
            (delegate* unmanaged<GamepadHandle, GamepadType>)(
                _slots[336] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[336] = nativeContext.LoadFunction("SDL_GetRealGamepadType", "SDL3")
            )
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetRealGamepadType(GamepadHandle gamepad) =>
        DllImport.GetRealGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetRealGamepadTypeForID([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, GamepadType>)(
                _slots[337] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[337] = nativeContext.LoadFunction(
                        "SDL_GetRealGamepadTypeForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadTypeForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetRealGamepadTypeForID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetRealGamepadTypeForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int* X1,
        int* Y1,
        int* X2,
        int* Y2
    ) =>
        (
            (delegate* unmanaged<Rect*, int*, int*, int*, int*, byte>)(
                _slots[338] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[338] = nativeContext.LoadFunction(
                        "SDL_GetRectAndLineIntersection",
                        "SDL3"
                    )
            )
        )(rect, X1, Y1, X2, Y2);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int* X1,
        int* Y1,
        int* X2,
        int* Y2
    ) => DllImport.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref<int> X1,
        Ref<int> Y1,
        Ref<int> X2,
        Ref<int> Y2
    )
    {
        fixed (int* __dsl_Y2 = Y2)
        fixed (int* __dsl_X2 = X2)
        fixed (int* __dsl_Y1 = Y1)
        fixed (int* __dsl_X1 = X1)
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref<int> X1,
        Ref<int> Y1,
        Ref<int> X2,
        Ref<int> Y2
    ) => DllImport.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* rect,
        float* X1,
        float* Y1,
        float* X2,
        float* Y2
    ) =>
        (
            (delegate* unmanaged<FRect*, float*, float*, float*, float*, byte>)(
                _slots[339] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[339] = nativeContext.LoadFunction(
                        "SDL_GetRectAndLineIntersectionFloat",
                        "SDL3"
                    )
            )
        )(rect, X1, Y1, X2, Y2);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* rect,
        float* X1,
        float* Y1,
        float* X2,
        float* Y2
    ) => DllImport.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
        Ref<float> X1,
        Ref<float> Y1,
        Ref<float> X2,
        Ref<float> Y2
    )
    {
        fixed (float* __dsl_Y2 = Y2)
        fixed (float* __dsl_X2 = X2)
        fixed (float* __dsl_Y1 = Y1)
        fixed (float* __dsl_X1 = X1)
        fixed (FRect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
        Ref<float> X1,
        Ref<float> Y1,
        Ref<float> X2,
        Ref<float> Y2
    ) => DllImport.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Point* points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Rect* clip,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Point*, int, Rect*, Rect*, byte>)(
                _slots[340] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[340] = nativeContext.LoadFunction("SDL_GetRectEnclosingPoints", "SDL3")
            )
        )(points, count, clip, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Point* points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Rect* clip,
        Rect* result
    ) => DllImport.GetRectEnclosingPoints(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Ref<Point> points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_clip = clip)
        fixed (Point* __dsl_points = points)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRectEnclosingPoints(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Ref<Point> points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
        Ref<Rect> result
    ) => DllImport.GetRectEnclosingPoints(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count,
        [NativeTypeName("const SDL_FRect *")] FRect* clip,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FPoint*, int, FRect*, FRect*, byte>)(
                _slots[341] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[341] = nativeContext.LoadFunction(
                        "SDL_GetRectEnclosingPointsFloat",
                        "SDL3"
                    )
            )
        )(points, count, clip, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count,
        [NativeTypeName("const SDL_FRect *")] FRect* clip,
        FRect* result
    ) => DllImport.GetRectEnclosingPointsFloat(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_clip = clip)
        fixed (FPoint* __dsl_points = points)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRectEnclosingPointsFloat(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
        Ref<FRect> result
    ) => DllImport.GetRectEnclosingPointsFloat(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, Rect*, byte>)(
                _slots[342] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[342] = nativeContext.LoadFunction("SDL_GetRectIntersection", "SDL3")
            )
        )(A, B, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) => DllImport.GetRectIntersection(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    ) => DllImport.GetRectIntersection(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, FRect*, byte>)(
                _slots[343] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[343] = nativeContext.LoadFunction(
                        "SDL_GetRectIntersectionFloat",
                        "SDL3"
                    )
            )
        )(A, B, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) => DllImport.GetRectIntersectionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    ) => DllImport.GetRectIntersectionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, Rect*, byte>)(
                _slots[344] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[344] = nativeContext.LoadFunction("SDL_GetRectUnion", "SDL3")
            )
        )(A, B, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) => DllImport.GetRectUnion(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    ) => DllImport.GetRectUnion(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, FRect*, byte>)(
                _slots[345] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[345] = nativeContext.LoadFunction("SDL_GetRectUnionFloat", "SDL3")
            )
        )(A, B, result);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) => DllImport.GetRectUnionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    ) => DllImport.GetRectUnionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRelativeMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)(
                _slots[346] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[346] = nativeContext.LoadFunction("SDL_GetRelativeMouseState", "SDL3")
            )
        )(x, y);

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRelativeMouseState(float* x, float* y) =>
        DllImport.GetRelativeMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRelativeMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetRelativeMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("SDL_MouseButtonFlags")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y) =>
        DllImport.GetRelativeMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderClipRect(RendererHandle renderer, Rect* rect) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, byte>)(
                _slots[347] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[347] = nativeContext.LoadFunction("SDL_GetRenderClipRect", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderClipRect(RendererHandle renderer, Rect* rect) =>
        DllImport.GetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderClipRect(RendererHandle renderer, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRenderClipRect(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderClipRect(RendererHandle renderer, Ref<Rect> rect) =>
        DllImport.GetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderColorScale(RendererHandle renderer, float* scale) =>
        (
            (delegate* unmanaged<RendererHandle, float*, byte>)(
                _slots[348] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[348] = nativeContext.LoadFunction("SDL_GetRenderColorScale", "SDL3")
            )
        )(renderer, scale);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderColorScale(RendererHandle renderer, float* scale) =>
        DllImport.GetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderColorScale(RendererHandle renderer, Ref<float> scale)
    {
        fixed (float* __dsl_scale = scale)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRenderColorScale(renderer, __dsl_scale);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderColorScale(RendererHandle renderer, Ref<float> scale) =>
        DllImport.GetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) =>
        (
            (delegate* unmanaged<RendererHandle, BlendMode*, byte>)(
                _slots[349] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[349] = nativeContext.LoadFunction("SDL_GetRenderDrawBlendMode", "SDL3")
            )
        )(renderer, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) => DllImport.GetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    )
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRenderDrawBlendMode(renderer, __dsl_blendMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    ) => DllImport.GetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<RendererHandle, byte*, byte*, byte*, byte*, byte>)(
                _slots[350] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[350] = nativeContext.LoadFunction("SDL_GetRenderDrawColor", "SDL3")
            )
        )(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.GetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRenderDrawColor(renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.GetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderDrawColorFloat(
        RendererHandle renderer,
        float* r,
        float* g,
        float* b,
        float* a
    ) =>
        (
            (delegate* unmanaged<RendererHandle, float*, float*, float*, float*, byte>)(
                _slots[351] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[351] = nativeContext.LoadFunction(
                        "SDL_GetRenderDrawColorFloat",
                        "SDL3"
                    )
            )
        )(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderDrawColorFloat(
        RendererHandle renderer,
        float* r,
        float* g,
        float* b,
        float* a
    ) => DllImport.GetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderDrawColorFloat(
        RendererHandle renderer,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    )
    {
        fixed (float* __dsl_a = a)
        fixed (float* __dsl_b = b)
        fixed (float* __dsl_g = g)
        fixed (float* __dsl_r = r)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRenderDrawColorFloat(
                        renderer,
                        __dsl_r,
                        __dsl_g,
                        __dsl_b,
                        __dsl_a
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderDrawColorFloat(
        RendererHandle renderer,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    ) => DllImport.GetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetRenderDriver(int index) => (sbyte*)((ISdl)this).GetRenderDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetRenderDriver(int index) => DllImport.GetRenderDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetRenderDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)(
                _slots[352] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[352] = nativeContext.LoadFunction("SDL_GetRenderDriver", "SDL3")
            )
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetRenderDriverRaw(int index) => DllImport.GetRenderDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.GetRenderer(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, RendererHandle>)(
                _slots[353] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[353] = nativeContext.LoadFunction("SDL_GetRenderer", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle GetRenderer(WindowHandle window) => DllImport.GetRenderer(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.GetRendererFromTexture(Texture* texture) =>
        (
            (delegate* unmanaged<Texture*, RendererHandle>)(
                _slots[354] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[354] = nativeContext.LoadFunction("SDL_GetRendererFromTexture", "SDL3")
            )
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle GetRendererFromTexture(Texture* texture) =>
        DllImport.GetRendererFromTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    RendererHandle ISdl.GetRendererFromTexture(Ref<Texture> texture)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (RendererHandle)((ISdl)this).GetRendererFromTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static RendererHandle GetRendererFromTexture(Ref<Texture> texture) =>
        DllImport.GetRendererFromTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetRendererName(RendererHandle renderer) =>
        (sbyte*)((ISdl)this).GetRendererNameRaw(renderer);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetRendererName(RendererHandle renderer) =>
        DllImport.GetRendererName(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetRendererNameRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, sbyte*>)(
                _slots[355] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[355] = nativeContext.LoadFunction("SDL_GetRendererName", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetRendererNameRaw(RendererHandle renderer) =>
        DllImport.GetRendererNameRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRendererProperties(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, uint>)(
                _slots[356] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[356] = nativeContext.LoadFunction("SDL_GetRendererProperties", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRendererProperties(RendererHandle renderer) =>
        DllImport.GetRendererProperties(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderLogicalPresentation(
        RendererHandle renderer,
        int* w,
        int* h,
        RendererLogicalPresentation* mode
    ) =>
        (
            (delegate* unmanaged<RendererHandle, int*, int*, RendererLogicalPresentation*, byte>)(
                _slots[357] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[357] = nativeContext.LoadFunction(
                        "SDL_GetRenderLogicalPresentation",
                        "SDL3"
                    )
            )
        )(renderer, w, h, mode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderLogicalPresentation(
        RendererHandle renderer,
        int* w,
        int* h,
        RendererLogicalPresentation* mode
    ) => DllImport.GetRenderLogicalPresentation(renderer, w, h, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderLogicalPresentation(
        RendererHandle renderer,
        Ref<int> w,
        Ref<int> h,
        Ref<RendererLogicalPresentation> mode
    )
    {
        fixed (RendererLogicalPresentation* __dsl_mode = mode)
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetRenderLogicalPresentation(
                        renderer,
                        __dsl_w,
                        __dsl_h,
                        __dsl_mode
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderLogicalPresentation(
        RendererHandle renderer,
        Ref<int> w,
        Ref<int> h,
        Ref<RendererLogicalPresentation> mode
    ) => DllImport.GetRenderLogicalPresentation(renderer, w, h, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderLogicalPresentationRect(RendererHandle renderer, FRect* rect) =>
        (
            (delegate* unmanaged<RendererHandle, FRect*, byte>)(
                _slots[358] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[358] = nativeContext.LoadFunction(
                        "SDL_GetRenderLogicalPresentationRect",
                        "SDL3"
                    )
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderLogicalPresentationRect(RendererHandle renderer, FRect* rect) =>
        DllImport.GetRenderLogicalPresentationRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderLogicalPresentationRect(RendererHandle renderer, Ref<FRect> rect)
    {
        fixed (FRect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRenderLogicalPresentationRect(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderLogicalPresentationRect(
        RendererHandle renderer,
        Ref<FRect> rect
    ) => DllImport.GetRenderLogicalPresentationRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetRenderMetalCommandEncoder(RendererHandle renderer) =>
        (void*)((ISdl)this).GetRenderMetalCommandEncoderRaw(renderer);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetRenderMetalCommandEncoder(RendererHandle renderer) =>
        DllImport.GetRenderMetalCommandEncoder(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetRenderMetalCommandEncoderRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, void*>)(
                _slots[359] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[359] = nativeContext.LoadFunction(
                        "SDL_GetRenderMetalCommandEncoder",
                        "SDL3"
                    )
            )
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetRenderMetalCommandEncoderRaw(RendererHandle renderer) =>
        DllImport.GetRenderMetalCommandEncoderRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetRenderMetalLayer(RendererHandle renderer) =>
        (void*)((ISdl)this).GetRenderMetalLayerRaw(renderer);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetRenderMetalLayer(RendererHandle renderer) =>
        DllImport.GetRenderMetalLayer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetRenderMetalLayerRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, void*>)(
                _slots[360] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[360] = nativeContext.LoadFunction("SDL_GetRenderMetalLayer", "SDL3")
            )
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetRenderMetalLayerRaw(RendererHandle renderer) =>
        DllImport.GetRenderMetalLayerRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
        (
            (delegate* unmanaged<RendererHandle, int*, int*, byte>)(
                _slots[361] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[361] = nativeContext.LoadFunction("SDL_GetRenderOutputSize", "SDL3")
            )
        )(renderer, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderOutputSize(RendererHandle renderer, int* w, int* h) =>
        DllImport.GetRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderOutputSize(RendererHandle renderer, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRenderOutputSize(renderer, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderOutputSize(
        RendererHandle renderer,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderSafeArea(RendererHandle renderer, Rect* rect) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, byte>)(
                _slots[362] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[362] = nativeContext.LoadFunction("SDL_GetRenderSafeArea", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderSafeArea(RendererHandle renderer, Rect* rect) =>
        DllImport.GetRenderSafeArea(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderSafeArea(RendererHandle renderer, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRenderSafeArea(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderSafeArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderSafeArea(RendererHandle renderer, Ref<Rect> rect) =>
        DllImport.GetRenderSafeArea(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderScale(RendererHandle renderer, float* scaleX, float* scaleY) =>
        (
            (delegate* unmanaged<RendererHandle, float*, float*, byte>)(
                _slots[363] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[363] = nativeContext.LoadFunction("SDL_GetRenderScale", "SDL3")
            )
        )(renderer, scaleX, scaleY);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderScale(RendererHandle renderer, float* scaleX, float* scaleY) =>
        DllImport.GetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderScale(
        RendererHandle renderer,
        Ref<float> scaleX,
        Ref<float> scaleY
    )
    {
        fixed (float* __dsl_scaleY = scaleY)
        fixed (float* __dsl_scaleX = scaleX)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetRenderScale(renderer, __dsl_scaleX, __dsl_scaleY);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderScale(
        RendererHandle renderer,
        Ref<float> scaleX,
        Ref<float> scaleY
    ) => DllImport.GetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Texture> ISdl.GetRenderTarget(RendererHandle renderer) =>
        (Texture*)((ISdl)this).GetRenderTargetRaw(renderer);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Texture> GetRenderTarget(RendererHandle renderer) =>
        DllImport.GetRenderTarget(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Texture* ISdl.GetRenderTargetRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, Texture*>)(
                _slots[364] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[364] = nativeContext.LoadFunction("SDL_GetRenderTarget", "SDL3")
            )
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Texture* GetRenderTargetRaw(RendererHandle renderer) =>
        DllImport.GetRenderTargetRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderViewport(RendererHandle renderer, Rect* rect) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, byte>)(
                _slots[365] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[365] = nativeContext.LoadFunction("SDL_GetRenderViewport", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderViewport(RendererHandle renderer, Rect* rect) =>
        DllImport.GetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderViewport(RendererHandle renderer, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRenderViewport(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderViewport(RendererHandle renderer, Ref<Rect> rect) =>
        DllImport.GetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetRenderVSync(RendererHandle renderer, int* vsync) =>
        (
            (delegate* unmanaged<RendererHandle, int*, byte>)(
                _slots[366] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[366] = nativeContext.LoadFunction("SDL_GetRenderVSync", "SDL3")
            )
        )(renderer, vsync);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetRenderVSync(RendererHandle renderer, int* vsync) =>
        DllImport.GetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetRenderVSync(RendererHandle renderer, Ref<int> vsync)
    {
        fixed (int* __dsl_vsync = vsync)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetRenderVSync(renderer, __dsl_vsync);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetRenderVSync(RendererHandle renderer, Ref<int> vsync) =>
        DllImport.GetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetRenderWindow(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, WindowHandle>)(
                _slots[367] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[367] = nativeContext.LoadFunction("SDL_GetRenderWindow", "SDL3")
            )
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetRenderWindow(RendererHandle renderer) =>
        DllImport.GetRenderWindow(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetRevision() => (sbyte*)((ISdl)this).GetRevisionRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetRevision() => DllImport.GetRevision();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetRevisionRaw() =>
        (
            (delegate* unmanaged<sbyte*>)(
                _slots[368] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[368] = nativeContext.LoadFunction("SDL_GetRevision", "SDL3")
            )
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetRevisionRaw() => DllImport.GetRevisionRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<uint, PixelFormatDetails*, Palette*, byte*, byte*, byte*, void>)(
                _slots[369] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[369] = nativeContext.LoadFunction("SDL_GetRGB", "SDL3")
            )
        )(pixel, format, palette, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetRGB(pixel, format, palette, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Palette* __dsl_palette = palette)
        fixed (PixelFormatDetails* __dsl_format = format)
        {
            ((ISdl)this).GetRGB(pixel, __dsl_format, __dsl_palette, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetRGB(pixel, format, palette, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<
                uint,
                PixelFormatDetails*,
                Palette*,
                byte*,
                byte*,
                byte*,
                byte*,
                void>)(
                _slots[370] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[370] = nativeContext.LoadFunction("SDL_GetRGBA", "SDL3")
            )
        )(pixel, format, palette, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.GetRgba(pixel, format, palette, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Palette* __dsl_palette = palette)
        fixed (PixelFormatDetails* __dsl_format = format)
        {
            ((ISdl)this).GetRgba(
                pixel,
                __dsl_format,
                __dsl_palette,
                __dsl_r,
                __dsl_g,
                __dsl_b,
                __dsl_a
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.GetRgba(pixel, format, palette, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Sandbox ISdl.GetSandbox() =>
        (
            (delegate* unmanaged<Sandbox>)(
                _slots[371] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[371] = nativeContext.LoadFunction("SDL_GetSandbox", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSandbox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Sandbox GetSandbox() => DllImport.GetSandbox();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromKey(
        [NativeTypeName("SDL_Keycode")] uint key,
        [NativeTypeName("SDL_Keymod *")] ushort* modstate
    ) =>
        (
            (delegate* unmanaged<uint, ushort*, Scancode>)(
                _slots[372] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[372] = nativeContext.LoadFunction("SDL_GetScancodeFromKey", "SDL3")
            )
        )(key, modstate);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromKey(
        [NativeTypeName("SDL_Keycode")] uint key,
        [NativeTypeName("SDL_Keymod *")] ushort* modstate
    ) => DllImport.GetScancodeFromKey(key, modstate);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromKey(
        [NativeTypeName("SDL_Keycode")] uint key,
        [NativeTypeName("SDL_Keymod *")] Ref<ushort> modstate
    )
    {
        fixed (ushort* __dsl_modstate = modstate)
        {
            return (Scancode)((ISdl)this).GetScancodeFromKey(key, __dsl_modstate);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromKey(
        [NativeTypeName("SDL_Keycode")] uint key,
        [NativeTypeName("SDL_Keymod *")] Ref<ushort> modstate
    ) => DllImport.GetScancodeFromKey(key, modstate);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, Scancode>)(
                _slots[373] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[373] = nativeContext.LoadFunction("SDL_GetScancodeFromName", "SDL3")
            )
        )(name);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetScancodeFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (Scancode)((ISdl)this).GetScancodeFromName(__dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetScancodeFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetScancodeName(Scancode scancode) =>
        (sbyte*)((ISdl)this).GetScancodeNameRaw(scancode);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
        DllImport.GetScancodeName(scancode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetScancodeNameRaw(Scancode scancode) =>
        (
            (delegate* unmanaged<Scancode, sbyte*>)(
                _slots[374] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[374] = nativeContext.LoadFunction("SDL_GetScancodeName", "SDL3")
            )
        )(scancode);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetScancodeNameRaw(Scancode scancode) =>
        DllImport.GetScancodeNameRaw(scancode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSemaphoreValue(SemaphoreHandle sem) =>
        (
            (delegate* unmanaged<SemaphoreHandle, uint>)(
                _slots[375] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[375] = nativeContext.LoadFunction("SDL_GetSemaphoreValue", "SDL3")
            )
        )(sem);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSemaphoreValue(SemaphoreHandle sem) => DllImport.GetSemaphoreValue(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSensorData(SensorHandle sensor, float* data, int num_values) =>
        (
            (delegate* unmanaged<SensorHandle, float*, int, byte>)(
                _slots[376] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[376] = nativeContext.LoadFunction("SDL_GetSensorData", "SDL3")
            )
        )(sensor, data, num_values);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSensorData(SensorHandle sensor, float* data, int num_values) =>
        DllImport.GetSensorData(sensor, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSensorData(SensorHandle sensor, Ref<float> data, int num_values)
    {
        fixed (float* __dsl_data = data)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetSensorData(sensor, __dsl_data, num_values);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSensorData(
        SensorHandle sensor,
        Ref<float> data,
        int num_values
    ) => DllImport.GetSensorData(sensor, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorHandle ISdl.GetSensorFromID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SensorHandle>)(
                _slots[377] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[377] = nativeContext.LoadFunction("SDL_GetSensorFromID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorHandle GetSensorFromID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        DllImport.GetSensorFromID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorID(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, uint>)(
                _slots[378] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[378] = nativeContext.LoadFunction("SDL_GetSensorID", "SDL3")
            )
        )(sensor);

    [return: NativeTypeName("SDL_SensorID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorID(SensorHandle sensor) => DllImport.GetSensorID(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetSensorName(SensorHandle sensor) =>
        (sbyte*)((ISdl)this).GetSensorNameRaw(sensor);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetSensorName(SensorHandle sensor) => DllImport.GetSensorName(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetSensorNameForID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetSensorNameForIDRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetSensorNameForID(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorNameForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetSensorNameForIDRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)(
                _slots[380] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[380] = nativeContext.LoadFunction("SDL_GetSensorNameForID", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNameForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetSensorNameForIDRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        DllImport.GetSensorNameForIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetSensorNameRaw(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, sbyte*>)(
                _slots[379] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[379] = nativeContext.LoadFunction("SDL_GetSensorName", "SDL3")
            )
        )(sensor);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetSensorNameRaw(SensorHandle sensor) =>
        DllImport.GetSensorNameRaw(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorNonPortableType(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, int>)(
                _slots[381] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[381] = nativeContext.LoadFunction(
                        "SDL_GetSensorNonPortableType",
                        "SDL3"
                    )
            )
        )(sensor);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorNonPortableType(SensorHandle sensor) =>
        DllImport.GetSensorNonPortableType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorNonPortableTypeForID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)(
                _slots[382] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[382] = nativeContext.LoadFunction(
                        "SDL_GetSensorNonPortableTypeForID",
                        "SDL3"
                    )
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorNonPortableTypeForID(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorNonPortableTypeForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorProperties(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, uint>)(
                _slots[383] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[383] = nativeContext.LoadFunction("SDL_GetSensorProperties", "SDL3")
            )
        )(sensor);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorProperties(SensorHandle sensor) =>
        DllImport.GetSensorProperties(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetSensors(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)(
                _slots[384] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[384] = nativeContext.LoadFunction("SDL_GetSensors", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_SensorID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetSensors(int* count) => DllImport.GetSensors(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetSensors(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetSensors(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_SensorID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetSensors(Ref<int> count) => DllImport.GetSensors(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorType ISdl.GetSensorType(SensorHandle sensor) =>
        (
            (delegate* unmanaged<SensorHandle, SensorType>)(
                _slots[385] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[385] = nativeContext.LoadFunction("SDL_GetSensorType", "SDL3")
            )
        )(sensor);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorType GetSensorType(SensorHandle sensor) => DllImport.GetSensorType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorType ISdl.GetSensorTypeForID([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SensorType>)(
                _slots[386] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[386] = nativeContext.LoadFunction("SDL_GetSensorTypeForID", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorTypeForID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorType GetSensorTypeForID(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorTypeForID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSilenceValueForFormat(AudioFormat format) =>
        (
            (delegate* unmanaged<AudioFormat, int>)(
                _slots[387] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[387] = nativeContext.LoadFunction(
                        "SDL_GetSilenceValueForFormat",
                        "SDL3"
                    )
            )
        )(format);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSilenceValueForFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSilenceValueForFormat(AudioFormat format) =>
        DllImport.GetSilenceValueForFormat(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.GetSimdAlignment() =>
        (
            (delegate* unmanaged<nuint>)(
                _slots[388] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[388] = nativeContext.LoadFunction("SDL_GetSIMDAlignment", "SDL3")
            )
        )();

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSIMDAlignment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint GetSimdAlignment() => DllImport.GetSimdAlignment();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetStorageFileSize(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("Uint64 *")] ulong* length
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, ulong*, byte>)(
                _slots[389] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[389] = nativeContext.LoadFunction("SDL_GetStorageFileSize", "SDL3")
            )
        )(storage, path, length);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetStorageFileSize(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("Uint64 *")] ulong* length
    ) => DllImport.GetStorageFileSize(storage, path, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetStorageFileSize(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("Uint64 *")] Ref<ulong> length
    )
    {
        fixed (ulong* __dsl_length = length)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetStorageFileSize(storage, __dsl_path, __dsl_length);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetStorageFileSize(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("Uint64 *")] Ref<ulong> length
    ) => DllImport.GetStorageFileSize(storage, path, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetStoragePathInfo(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        PathInfo* info
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, PathInfo*, byte>)(
                _slots[390] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[390] = nativeContext.LoadFunction("SDL_GetStoragePathInfo", "SDL3")
            )
        )(storage, path, info);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetStoragePathInfo(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        PathInfo* info
    ) => DllImport.GetStoragePathInfo(storage, path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetStoragePathInfo(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    )
    {
        fixed (PathInfo* __dsl_info = info)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetStoragePathInfo(storage, __dsl_path, __dsl_info);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetStoragePathInfo(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    ) => DllImport.GetStoragePathInfo(storage, path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetStorageSpaceRemaining(StorageHandle storage) =>
        (
            (delegate* unmanaged<StorageHandle, ulong>)(
                _slots[391] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[391] = nativeContext.LoadFunction(
                        "SDL_GetStorageSpaceRemaining",
                        "SDL3"
                    )
            )
        )(storage);

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetStorageSpaceRemaining(StorageHandle storage) =>
        DllImport.GetStorageSpaceRemaining(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, sbyte*>)(
                _slots[392] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[392] = nativeContext.LoadFunction("SDL_GetStringProperty", "SDL3")
            )
        )(props, name, default_value);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* default_value
    ) => DllImport.GetStringProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> default_value
    )
    {
        fixed (sbyte* __dsl_default_value = default_value)
        fixed (sbyte* __dsl_name = name)
        {
            return (sbyte*)((ISdl)this).GetStringProperty(props, __dsl_name, __dsl_default_value);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> default_value
    ) => DllImport.GetStringProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8 *")] byte* alpha) =>
        (
            (delegate* unmanaged<Surface*, byte*, byte>)(
                _slots[393] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[393] = nativeContext.LoadFunction("SDL_GetSurfaceAlphaMod", "SDL3")
            )
        )(surface, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSurfaceAlphaMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* alpha
    ) => DllImport.GetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    )
    {
        fixed (byte* __dsl_alpha = alpha)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    ) => DllImport.GetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSurfaceBlendMode(
        Surface* surface,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) =>
        (
            (delegate* unmanaged<Surface*, BlendMode*, byte>)(
                _slots[394] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[394] = nativeContext.LoadFunction("SDL_GetSurfaceBlendMode", "SDL3")
            )
        )(surface, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSurfaceBlendMode(
        Surface* surface,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) => DllImport.GetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSurfaceBlendMode(
        Ref<Surface> surface,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    )
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSurfaceBlendMode(
        Ref<Surface> surface,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    ) => DllImport.GetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSurfaceClipRect(Surface* surface, Rect* rect) =>
        (
            (delegate* unmanaged<Surface*, Rect*, byte>)(
                _slots[395] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[395] = nativeContext.LoadFunction("SDL_GetSurfaceClipRect", "SDL3")
            )
        )(surface, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSurfaceClipRect(Surface* surface, Rect* rect) =>
        DllImport.GetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetSurfaceClipRect(__dsl_surface, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect) =>
        DllImport.GetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSurfaceColorKey(Surface* surface, [NativeTypeName("Uint32 *")] uint* key) =>
        (
            (delegate* unmanaged<Surface*, uint*, byte>)(
                _slots[396] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[396] = nativeContext.LoadFunction("SDL_GetSurfaceColorKey", "SDL3")
            )
        )(surface, key);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSurfaceColorKey(
        Surface* surface,
        [NativeTypeName("Uint32 *")] uint* key
    ) => DllImport.GetSurfaceColorKey(surface, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSurfaceColorKey(
        Ref<Surface> surface,
        [NativeTypeName("Uint32 *")] Ref<uint> key
    )
    {
        fixed (uint* __dsl_key = key)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetSurfaceColorKey(__dsl_surface, __dsl_key);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSurfaceColorKey(
        Ref<Surface> surface,
        [NativeTypeName("Uint32 *")] Ref<uint> key
    ) => DllImport.GetSurfaceColorKey(surface, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<Surface*, byte*, byte*, byte*, byte>)(
                _slots[397] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[397] = nativeContext.LoadFunction("SDL_GetSurfaceColorMod", "SDL3")
            )
        )(surface, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Colorspace ISdl.GetSurfaceColorspace(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, Colorspace>)(
                _slots[398] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[398] = nativeContext.LoadFunction("SDL_GetSurfaceColorspace", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Colorspace GetSurfaceColorspace(Surface* surface) =>
        DllImport.GetSurfaceColorspace(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Colorspace ISdl.GetSurfaceColorspace(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Colorspace)((ISdl)this).GetSurfaceColorspace(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Colorspace GetSurfaceColorspace(Ref<Surface> surface) =>
        DllImport.GetSurfaceColorspace(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface** ISdl.GetSurfaceImages(Surface* surface, int* count) =>
        (
            (delegate* unmanaged<Surface*, int*, Surface**>)(
                _slots[399] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[399] = nativeContext.LoadFunction("SDL_GetSurfaceImages", "SDL3")
            )
        )(surface, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface** GetSurfaceImages(Surface* surface, int* count) =>
        DllImport.GetSurfaceImages(surface, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<Surface> ISdl.GetSurfaceImages(Ref<Surface> surface, Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface**)((ISdl)this).GetSurfaceImages(__dsl_surface, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<Surface> GetSurfaceImages(Ref<Surface> surface, Ref<int> count) =>
        DllImport.GetSurfaceImages(surface, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Palette* ISdl.GetSurfacePalette(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, Palette*>)(
                _slots[400] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[400] = nativeContext.LoadFunction("SDL_GetSurfacePalette", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Palette* GetSurfacePalette(Surface* surface) =>
        DllImport.GetSurfacePalette(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Palette> ISdl.GetSurfacePalette(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Palette*)((ISdl)this).GetSurfacePalette(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Palette> GetSurfacePalette(Ref<Surface> surface) =>
        DllImport.GetSurfacePalette(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSurfaceProperties(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, uint>)(
                _slots[401] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[401] = nativeContext.LoadFunction("SDL_GetSurfaceProperties", "SDL3")
            )
        )(surface);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSurfaceProperties(Surface* surface) =>
        DllImport.GetSurfaceProperties(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSurfaceProperties(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (uint)((ISdl)this).GetSurfaceProperties(__dsl_surface);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSurfaceProperties(Ref<Surface> surface) =>
        DllImport.GetSurfaceProperties(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSystemRAM() =>
        (
            (delegate* unmanaged<int>)(
                _slots[402] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[402] = nativeContext.LoadFunction("SDL_GetSystemRAM", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemRAM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSystemRAM() => DllImport.GetSystemRAM();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SystemTheme ISdl.GetSystemTheme() =>
        (
            (delegate* unmanaged<SystemTheme>)(
                _slots[403] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[403] = nativeContext.LoadFunction("SDL_GetSystemTheme", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSystemTheme")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SystemTheme GetSystemTheme() => DllImport.GetSystemTheme();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextInputArea(WindowHandle window, Rect* rect, int* cursor) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*, int*, byte>)(
                _slots[404] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[404] = nativeContext.LoadFunction("SDL_GetTextInputArea", "SDL3")
            )
        )(window, rect, cursor);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextInputArea(WindowHandle window, Rect* rect, int* cursor) =>
        DllImport.GetTextInputArea(window, rect, cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextInputArea(WindowHandle window, Ref<Rect> rect, Ref<int> cursor)
    {
        fixed (int* __dsl_cursor = cursor)
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextInputArea(window, __dsl_rect, __dsl_cursor);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextInputArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextInputArea(
        WindowHandle window,
        Ref<Rect> rect,
        Ref<int> cursor
    ) => DllImport.GetTextInputArea(window, rect, cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureAlphaMod(Texture* texture, [NativeTypeName("Uint8 *")] byte* alpha) =>
        (
            (delegate* unmanaged<Texture*, byte*, byte>)(
                _slots[405] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[405] = nativeContext.LoadFunction("SDL_GetTextureAlphaMod", "SDL3")
            )
        )(texture, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureAlphaMod(
        Texture* texture,
        [NativeTypeName("Uint8 *")] byte* alpha
    ) => DllImport.GetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureAlphaMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    )
    {
        fixed (byte* __dsl_alpha = alpha)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureAlphaMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    ) => DllImport.GetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureAlphaModFloat(Texture* texture, float* alpha) =>
        (
            (delegate* unmanaged<Texture*, float*, byte>)(
                _slots[406] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[406] = nativeContext.LoadFunction(
                        "SDL_GetTextureAlphaModFloat",
                        "SDL3"
                    )
            )
        )(texture, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureAlphaModFloat(Texture* texture, float* alpha) =>
        DllImport.GetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureAlphaModFloat(Ref<Texture> texture, Ref<float> alpha)
    {
        fixed (float* __dsl_alpha = alpha)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureAlphaModFloat(Ref<Texture> texture, Ref<float> alpha) =>
        DllImport.GetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureBlendMode(
        Texture* texture,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) =>
        (
            (delegate* unmanaged<Texture*, BlendMode*, byte>)(
                _slots[407] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[407] = nativeContext.LoadFunction("SDL_GetTextureBlendMode", "SDL3")
            )
        )(texture, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureBlendMode(
        Texture* texture,
        [NativeTypeName("SDL_BlendMode *")] BlendMode* blendMode
    ) => DllImport.GetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureBlendMode(
        Ref<Texture> texture,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    )
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureBlendMode(
        Ref<Texture> texture,
        [NativeTypeName("SDL_BlendMode *")] Ref<BlendMode> blendMode
    ) => DllImport.GetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureColorMod(
        Texture* texture,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<Texture*, byte*, byte*, byte*, byte>)(
                _slots[408] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[408] = nativeContext.LoadFunction("SDL_GetTextureColorMod", "SDL3")
            )
        )(texture, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureColorMod(
        Texture* texture,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureColorMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureColorMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureColorModFloat(Texture* texture, float* r, float* g, float* b) =>
        (
            (delegate* unmanaged<Texture*, float*, float*, float*, byte>)(
                _slots[409] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[409] = nativeContext.LoadFunction(
                        "SDL_GetTextureColorModFloat",
                        "SDL3"
                    )
            )
        )(texture, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureColorModFloat(Texture* texture, float* r, float* g, float* b) =>
        DllImport.GetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureColorModFloat(
        Ref<Texture> texture,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b
    )
    {
        fixed (float* __dsl_b = b)
        fixed (float* __dsl_g = g)
        fixed (float* __dsl_r = r)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureColorModFloat(
        Ref<Texture> texture,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b
    ) => DllImport.GetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetTextureProperties(Texture* texture) =>
        (
            (delegate* unmanaged<Texture*, uint>)(
                _slots[410] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[410] = nativeContext.LoadFunction("SDL_GetTextureProperties", "SDL3")
            )
        )(texture);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetTextureProperties(Texture* texture) =>
        DllImport.GetTextureProperties(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetTextureProperties(Ref<Texture> texture)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (uint)((ISdl)this).GetTextureProperties(__dsl_texture);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetTextureProperties(Ref<Texture> texture) =>
        DllImport.GetTextureProperties(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureScaleMode(Texture* texture, ScaleMode* scaleMode) =>
        (
            (delegate* unmanaged<Texture*, ScaleMode*, byte>)(
                _slots[411] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[411] = nativeContext.LoadFunction("SDL_GetTextureScaleMode", "SDL3")
            )
        )(texture, scaleMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureScaleMode(Texture* texture, ScaleMode* scaleMode) =>
        DllImport.GetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureScaleMode(Ref<Texture> texture, Ref<ScaleMode> scaleMode)
    {
        fixed (ScaleMode* __dsl_scaleMode = scaleMode)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureScaleMode(
        Ref<Texture> texture,
        Ref<ScaleMode> scaleMode
    ) => DllImport.GetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetTextureSize(Texture* texture, float* w, float* h) =>
        (
            (delegate* unmanaged<Texture*, float*, float*, byte>)(
                _slots[412] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[412] = nativeContext.LoadFunction("SDL_GetTextureSize", "SDL3")
            )
        )(texture, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetTextureSize(Texture* texture, float* w, float* h) =>
        DllImport.GetTextureSize(texture, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetTextureSize(Ref<Texture> texture, Ref<float> w, Ref<float> h)
    {
        fixed (float* __dsl_h = h)
        fixed (float* __dsl_w = w)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetTextureSize(__dsl_texture, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetTextureSize(
        Ref<Texture> texture,
        Ref<float> w,
        Ref<float> h
    ) => DllImport.GetTextureSize(texture, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetThreadID(ThreadHandle thread) =>
        (
            (delegate* unmanaged<ThreadHandle, ulong>)(
                _slots[413] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[413] = nativeContext.LoadFunction("SDL_GetThreadID", "SDL3")
            )
        )(thread);

    [return: NativeTypeName("SDL_ThreadID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetThreadID(ThreadHandle thread) => DllImport.GetThreadID(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetThreadName(ThreadHandle thread) =>
        (sbyte*)((ISdl)this).GetThreadNameRaw(thread);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetThreadName(ThreadHandle thread) => DllImport.GetThreadName(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetThreadNameRaw(ThreadHandle thread) =>
        (
            (delegate* unmanaged<ThreadHandle, sbyte*>)(
                _slots[414] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[414] = nativeContext.LoadFunction("SDL_GetThreadName", "SDL3")
            )
        )(thread);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetThreadNameRaw(ThreadHandle thread) =>
        DllImport.GetThreadNameRaw(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetTicks() =>
        (
            (delegate* unmanaged<ulong>)(
                _slots[415] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[415] = nativeContext.LoadFunction("SDL_GetTicks", "SDL3")
            )
        )();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTicks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetTicks() => DllImport.GetTicks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetTicksNS() =>
        (
            (delegate* unmanaged<ulong>)(
                _slots[416] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[416] = nativeContext.LoadFunction("SDL_GetTicksNS", "SDL3")
            )
        )();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTicksNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetTicksNS() => DllImport.GetTicksNS();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetTLS([NativeTypeName("SDL_TLSID *")] AtomicInt* id) =>
        (
            (delegate* unmanaged<AtomicInt*, void*>)(
                _slots[417] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[417] = nativeContext.LoadFunction("SDL_GetTLS", "SDL3")
            )
        )(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetTLS([NativeTypeName("SDL_TLSID *")] AtomicInt* id) =>
        DllImport.GetTLS(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetTLS([NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id)
    {
        fixed (AtomicInt* __dsl_id = id)
        {
            return (void*)((ISdl)this).GetTLS(__dsl_id);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetTLS([NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id) =>
        DllImport.GetTLS(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (sbyte*)((ISdl)this).GetTouchDeviceNameRaw(touchID);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        DllImport.GetTouchDeviceName(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (
            (delegate* unmanaged<ulong, sbyte*>)(
                _slots[418] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[418] = nativeContext.LoadFunction("SDL_GetTouchDeviceName", "SDL3")
            )
        )(touchID);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        DllImport.GetTouchDeviceNameRaw(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong* ISdl.GetTouchDevices(int* count) =>
        (
            (delegate* unmanaged<int*, ulong*>)(
                _slots[419] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[419] = nativeContext.LoadFunction("SDL_GetTouchDevices", "SDL3")
            )
        )(count);

    [return: NativeTypeName("SDL_TouchID *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong* GetTouchDevices(int* count) => DllImport.GetTouchDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<ulong> ISdl.GetTouchDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (ulong*)((ISdl)this).GetTouchDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_TouchID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<ulong> GetTouchDevices(Ref<int> count) => DllImport.GetTouchDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    TouchDeviceType ISdl.GetTouchDeviceType([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (
            (delegate* unmanaged<ulong, TouchDeviceType>)(
                _slots[420] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[420] = nativeContext.LoadFunction("SDL_GetTouchDeviceType", "SDL3")
            )
        )(touchID);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static TouchDeviceType GetTouchDeviceType(
        [NativeTypeName("SDL_TouchID")] ulong touchID
    ) => DllImport.GetTouchDeviceType(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Finger** ISdl.GetTouchFingers([NativeTypeName("SDL_TouchID")] ulong touchID, int* count) =>
        (
            (delegate* unmanaged<ulong, int*, Finger**>)(
                _slots[421] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[421] = nativeContext.LoadFunction("SDL_GetTouchFingers", "SDL3")
            )
        )(touchID, count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Finger** GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        int* count
    ) => DllImport.GetTouchFingers(touchID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<Finger> ISdl.GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (Finger**)((ISdl)this).GetTouchFingers(touchID, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<Finger> GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        Ref<int> count
    ) => DllImport.GetTouchFingers(touchID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetUserFolder(Folder folder) => (sbyte*)((ISdl)this).GetUserFolderRaw(folder);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetUserFolder(Folder folder) => DllImport.GetUserFolder(folder);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetUserFolderRaw(Folder folder) =>
        (
            (delegate* unmanaged<Folder, sbyte*>)(
                _slots[422] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[422] = nativeContext.LoadFunction("SDL_GetUserFolder", "SDL3")
            )
        )(folder);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetUserFolderRaw(Folder folder) => DllImport.GetUserFolderRaw(folder);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetVersion() =>
        (
            (delegate* unmanaged<int>)(
                _slots[423] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[423] = nativeContext.LoadFunction("SDL_GetVersion", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetVersion() => DllImport.GetVersion();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetVideoDriver(int index) => (sbyte*)((ISdl)this).GetVideoDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetVideoDriver(int index) => DllImport.GetVideoDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetVideoDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)(
                _slots[424] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[424] = nativeContext.LoadFunction("SDL_GetVideoDriver", "SDL3")
            )
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetVideoDriverRaw(int index) => DllImport.GetVideoDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowAspectRatio(WindowHandle window, float* min_aspect, float* max_aspect) =>
        (
            (delegate* unmanaged<WindowHandle, float*, float*, byte>)(
                _slots[425] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[425] = nativeContext.LoadFunction("SDL_GetWindowAspectRatio", "SDL3")
            )
        )(window, min_aspect, max_aspect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowAspectRatio(
        WindowHandle window,
        float* min_aspect,
        float* max_aspect
    ) => DllImport.GetWindowAspectRatio(window, min_aspect, max_aspect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowAspectRatio(
        WindowHandle window,
        Ref<float> min_aspect,
        Ref<float> max_aspect
    )
    {
        fixed (float* __dsl_max_aspect = max_aspect)
        fixed (float* __dsl_min_aspect = min_aspect)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetWindowAspectRatio(window, __dsl_min_aspect, __dsl_max_aspect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowAspectRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowAspectRatio(
        WindowHandle window,
        Ref<float> min_aspect,
        Ref<float> max_aspect
    ) => DllImport.GetWindowAspectRatio(window, min_aspect, max_aspect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowBordersSize(
        WindowHandle window,
        int* top,
        int* left,
        int* bottom,
        int* right
    ) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, int*, int*, byte>)(
                _slots[426] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[426] = nativeContext.LoadFunction("SDL_GetWindowBordersSize", "SDL3")
            )
        )(window, top, left, bottom, right);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowBordersSize(
        WindowHandle window,
        int* top,
        int* left,
        int* bottom,
        int* right
    ) => DllImport.GetWindowBordersSize(window, top, left, bottom, right);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowBordersSize(
        WindowHandle window,
        Ref<int> top,
        Ref<int> left,
        Ref<int> bottom,
        Ref<int> right
    )
    {
        fixed (int* __dsl_right = right)
        fixed (int* __dsl_bottom = bottom)
        fixed (int* __dsl_left = left)
        fixed (int* __dsl_top = top)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).GetWindowBordersSize(
                        window,
                        __dsl_top,
                        __dsl_left,
                        __dsl_bottom,
                        __dsl_right
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowBordersSize(
        WindowHandle window,
        Ref<int> top,
        Ref<int> left,
        Ref<int> bottom,
        Ref<int> right
    ) => DllImport.GetWindowBordersSize(window, top, left, bottom, right);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowDisplayScale(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, float>)(
                _slots[427] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[427] = nativeContext.LoadFunction("SDL_GetWindowDisplayScale", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowDisplayScale(WindowHandle window) =>
        DllImport.GetWindowDisplayScale(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetWindowFlags(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, ulong>)(
                _slots[428] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[428] = nativeContext.LoadFunction("SDL_GetWindowFlags", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_WindowFlags")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetWindowFlags(WindowHandle window) => DllImport.GetWindowFlags(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetWindowFromEvent([NativeTypeName("const SDL_Event *")] Event* @event) =>
        (
            (delegate* unmanaged<Event*, WindowHandle>)(
                _slots[429] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[429] = nativeContext.LoadFunction("SDL_GetWindowFromEvent", "SDL3")
            )
        )(@event);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetWindowFromEvent(
        [NativeTypeName("const SDL_Event *")] Event* @event
    ) => DllImport.GetWindowFromEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetWindowFromEvent([NativeTypeName("const SDL_Event *")] Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (WindowHandle)((ISdl)this).GetWindowFromEvent(__dsl_event);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetWindowFromEvent(
        [NativeTypeName("const SDL_Event *")] Ref<Event> @event
    ) => DllImport.GetWindowFromEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
        (
            (delegate* unmanaged<uint, WindowHandle>)(
                _slots[430] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[430] = nativeContext.LoadFunction("SDL_GetWindowFromID", "SDL3")
            )
        )(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
        DllImport.GetWindowFromID(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetWindowFullscreenMode(WindowHandle window) =>
        (DisplayMode*)((ISdl)this).GetWindowFullscreenModeRaw(window);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetWindowFullscreenMode(WindowHandle window) =>
        DllImport.GetWindowFullscreenMode(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetWindowFullscreenModeRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, DisplayMode*>)(
                _slots[431] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[431] = nativeContext.LoadFunction(
                        "SDL_GetWindowFullscreenMode",
                        "SDL3"
                    )
            )
        )(window);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetWindowFullscreenModeRaw(WindowHandle window) =>
        DllImport.GetWindowFullscreenModeRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetWindowICCProfile(WindowHandle window, [NativeTypeName("size_t *")] nuint* size) =>
        (
            (delegate* unmanaged<WindowHandle, nuint*, void*>)(
                _slots[432] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[432] = nativeContext.LoadFunction("SDL_GetWindowICCProfile", "SDL3")
            )
        )(window, size);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetWindowICCProfile(
        WindowHandle window,
        [NativeTypeName("size_t *")] nuint* size
    ) => DllImport.GetWindowICCProfile(window, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetWindowICCProfile(WindowHandle window, [NativeTypeName("size_t *")] Ref<nuint> size)
    {
        fixed (nuint* __dsl_size = size)
        {
            return (void*)((ISdl)this).GetWindowICCProfile(window, __dsl_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetWindowICCProfile(
        WindowHandle window,
        [NativeTypeName("size_t *")] Ref<nuint> size
    ) => DllImport.GetWindowICCProfile(window, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowID(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, uint>)(
                _slots[433] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[433] = nativeContext.LoadFunction("SDL_GetWindowID", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_WindowID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowID(WindowHandle window) => DllImport.GetWindowID(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowKeyboardGrab(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetWindowKeyboardGrabRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowKeyboardGrab(WindowHandle window) =>
        DllImport.GetWindowKeyboardGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowKeyboardGrabRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[434] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[434] = nativeContext.LoadFunction("SDL_GetWindowKeyboardGrab", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowKeyboardGrabRaw(WindowHandle window) =>
        DllImport.GetWindowKeyboardGrabRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowMaximumSize(WindowHandle window, int* w, int* h) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, byte>)(
                _slots[435] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[435] = nativeContext.LoadFunction("SDL_GetWindowMaximumSize", "SDL3")
            )
        )(window, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowMaximumSize(WindowHandle window, int* w, int* h) =>
        DllImport.GetWindowMaximumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowMaximumSize(WindowHandle window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetWindowMaximumSize(window, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowMaximumSize(
        WindowHandle window,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetWindowMaximumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowMinimumSize(WindowHandle window, int* w, int* h) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, byte>)(
                _slots[436] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[436] = nativeContext.LoadFunction("SDL_GetWindowMinimumSize", "SDL3")
            )
        )(window, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowMinimumSize(WindowHandle window, int* w, int* h) =>
        DllImport.GetWindowMinimumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowMinimumSize(WindowHandle window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetWindowMinimumSize(window, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowMinimumSize(
        WindowHandle window,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetWindowMinimumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowMouseGrab(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetWindowMouseGrabRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowMouseGrab(WindowHandle window) =>
        DllImport.GetWindowMouseGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowMouseGrabRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[437] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[437] = nativeContext.LoadFunction("SDL_GetWindowMouseGrab", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowMouseGrabRaw(WindowHandle window) =>
        DllImport.GetWindowMouseGrabRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Rect> ISdl.GetWindowMouseRect(WindowHandle window) =>
        (Rect*)((ISdl)this).GetWindowMouseRectRaw(window);

    [return: NativeTypeName("const SDL_Rect *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Rect> GetWindowMouseRect(WindowHandle window) =>
        DllImport.GetWindowMouseRect(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Rect* ISdl.GetWindowMouseRectRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*>)(
                _slots[438] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[438] = nativeContext.LoadFunction("SDL_GetWindowMouseRect", "SDL3")
            )
        )(window);

    [return: NativeTypeName("const SDL_Rect *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Rect* GetWindowMouseRectRaw(WindowHandle window) =>
        DllImport.GetWindowMouseRectRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowOpacity(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, float>)(
                _slots[439] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[439] = nativeContext.LoadFunction("SDL_GetWindowOpacity", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowOpacity(WindowHandle window) => DllImport.GetWindowOpacity(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GetWindowParent(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, WindowHandle>)(
                _slots[440] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[440] = nativeContext.LoadFunction("SDL_GetWindowParent", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GetWindowParent(WindowHandle window) =>
        DllImport.GetWindowParent(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowPixelDensity(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, float>)(
                _slots[441] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[441] = nativeContext.LoadFunction("SDL_GetWindowPixelDensity", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowPixelDensity(WindowHandle window) =>
        DllImport.GetWindowPixelDensity(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PixelFormat ISdl.GetWindowPixelFormat(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, PixelFormat>)(
                _slots[442] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[442] = nativeContext.LoadFunction("SDL_GetWindowPixelFormat", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PixelFormat GetWindowPixelFormat(WindowHandle window) =>
        DllImport.GetWindowPixelFormat(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowPosition(WindowHandle window, int* x, int* y) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, byte>)(
                _slots[443] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[443] = nativeContext.LoadFunction("SDL_GetWindowPosition", "SDL3")
            )
        )(window, x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowPosition(WindowHandle window, int* x, int* y) =>
        DllImport.GetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowPosition(WindowHandle window, Ref<int> x, Ref<int> y)
    {
        fixed (int* __dsl_y = y)
        fixed (int* __dsl_x = x)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetWindowPosition(window, __dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowPosition(WindowHandle window, Ref<int> x, Ref<int> y) =>
        DllImport.GetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowProperties(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, uint>)(
                _slots[444] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[444] = nativeContext.LoadFunction("SDL_GetWindowProperties", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowProperties(WindowHandle window) =>
        DllImport.GetWindowProperties(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowRelativeMouseMode(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GetWindowRelativeMouseModeRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowRelativeMouseMode(WindowHandle window) =>
        DllImport.GetWindowRelativeMouseMode(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowRelativeMouseModeRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[445] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[445] = nativeContext.LoadFunction(
                        "SDL_GetWindowRelativeMouseMode",
                        "SDL3"
                    )
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowRelativeMouseModeRaw(WindowHandle window) =>
        DllImport.GetWindowRelativeMouseModeRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle* ISdl.GetWindows(int* count) =>
        (
            (delegate* unmanaged<int*, WindowHandle*>)(
                _slots[446] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[446] = nativeContext.LoadFunction("SDL_GetWindows", "SDL3")
            )
        )(count);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle* GetWindows(int* count) => DllImport.GetWindows(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<WindowHandle> ISdl.GetWindows(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (WindowHandle*)((ISdl)this).GetWindows(__dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<WindowHandle> GetWindows(Ref<int> count) => DllImport.GetWindows(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowSafeArea(WindowHandle window, Rect* rect) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*, byte>)(
                _slots[447] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[447] = nativeContext.LoadFunction("SDL_GetWindowSafeArea", "SDL3")
            )
        )(window, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowSafeArea(WindowHandle window, Rect* rect) =>
        DllImport.GetWindowSafeArea(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowSafeArea(WindowHandle window, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetWindowSafeArea(window, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSafeArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowSafeArea(WindowHandle window, Ref<Rect> rect) =>
        DllImport.GetWindowSafeArea(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowSize(WindowHandle window, int* w, int* h) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, byte>)(
                _slots[448] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[448] = nativeContext.LoadFunction("SDL_GetWindowSize", "SDL3")
            )
        )(window, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowSize(WindowHandle window, int* w, int* h) =>
        DllImport.GetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowSize(WindowHandle window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetWindowSize(window, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowSize(WindowHandle window, Ref<int> w, Ref<int> h) =>
        DllImport.GetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowSizeInPixels(WindowHandle window, int* w, int* h) =>
        (
            (delegate* unmanaged<WindowHandle, int*, int*, byte>)(
                _slots[449] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[449] = nativeContext.LoadFunction("SDL_GetWindowSizeInPixels", "SDL3")
            )
        )(window, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowSizeInPixels(WindowHandle window, int* w, int* h) =>
        DllImport.GetWindowSizeInPixels(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowSizeInPixels(WindowHandle window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).GetWindowSizeInPixels(window, __dsl_w, __dsl_h);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowSizeInPixels(
        WindowHandle window,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetWindowSizeInPixels(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.GetWindowSurface(WindowHandle window) =>
        (Surface*)((ISdl)this).GetWindowSurfaceRaw(window);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> GetWindowSurface(WindowHandle window) =>
        DllImport.GetWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.GetWindowSurfaceRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, Surface*>)(
                _slots[450] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[450] = nativeContext.LoadFunction("SDL_GetWindowSurface", "SDL3")
            )
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* GetWindowSurfaceRaw(WindowHandle window) =>
        DllImport.GetWindowSurfaceRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetWindowSurfaceVSync(WindowHandle window, int* vsync) =>
        (
            (delegate* unmanaged<WindowHandle, int*, byte>)(
                _slots[451] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[451] = nativeContext.LoadFunction("SDL_GetWindowSurfaceVSync", "SDL3")
            )
        )(window, vsync);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetWindowSurfaceVSync(WindowHandle window, int* vsync) =>
        DllImport.GetWindowSurfaceVSync(window, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GetWindowSurfaceVSync(WindowHandle window, Ref<int> vsync)
    {
        fixed (int* __dsl_vsync = vsync)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GetWindowSurfaceVSync(window, __dsl_vsync);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurfaceVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GetWindowSurfaceVSync(WindowHandle window, Ref<int> vsync) =>
        DllImport.GetWindowSurfaceVSync(window, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetWindowTitle(WindowHandle window) =>
        (sbyte*)((ISdl)this).GetWindowTitleRaw(window);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetWindowTitle(WindowHandle window) =>
        DllImport.GetWindowTitle(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetWindowTitleRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, sbyte*>)(
                _slots[452] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[452] = nativeContext.LoadFunction("SDL_GetWindowTitle", "SDL3")
            )
        )(window);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetWindowTitleRaw(WindowHandle window) =>
        DllImport.GetWindowTitleRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GLContextStateHandle ISdl.GLCreateContext(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, GLContextStateHandle>)(
                _slots[453] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[453] = nativeContext.LoadFunction("SDL_GL_CreateContext", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_GLContext")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GLContextStateHandle GLCreateContext(WindowHandle window) =>
        DllImport.GLCreateContext(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLDestroyContext(
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => (MaybeBool<byte>)(byte)((ISdl)this).GLDestroyContextRaw(context);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLDestroyContext(
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => DllImport.GLDestroyContext(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLDestroyContextRaw([NativeTypeName("SDL_GLContext")] GLContextStateHandle context) =>
        (
            (delegate* unmanaged<GLContextStateHandle, byte>)(
                _slots[454] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[454] = nativeContext.LoadFunction("SDL_GL_DestroyContext", "SDL3")
            )
        )(context);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_DestroyContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLDestroyContextRaw(
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => DllImport.GLDestroyContextRaw(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[455] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[455] = nativeContext.LoadFunction("SDL_GL_ExtensionSupported", "SDL3")
            )
        )(extension);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
        DllImport.GLExtensionSupported(extension);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLExtensionSupported([NativeTypeName("const char *")] Ref<sbyte> extension)
    {
        fixed (sbyte* __dsl_extension = extension)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GLExtensionSupported(__dsl_extension);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLExtensionSupported(
        [NativeTypeName("const char *")] Ref<sbyte> extension
    ) => DllImport.GLExtensionSupported(extension);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLGetAttribute(GLAttr attr, int* value) =>
        (
            (delegate* unmanaged<GLAttr, int*, byte>)(
                _slots[456] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[456] = nativeContext.LoadFunction("SDL_GL_GetAttribute", "SDL3")
            )
        )(attr, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLGetAttribute(GLAttr attr, int* value) =>
        DllImport.GLGetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLGetAttribute(GLAttr attr, Ref<int> value)
    {
        fixed (int* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GLGetAttribute(attr, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLGetAttribute(GLAttr attr, Ref<int> value) =>
        DllImport.GLGetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GLContextStateHandle ISdl.GLGetCurrentContext() =>
        (
            (delegate* unmanaged<GLContextStateHandle>)(
                _slots[457] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[457] = nativeContext.LoadFunction("SDL_GL_GetCurrentContext", "SDL3")
            )
        )();

    [return: NativeTypeName("SDL_GLContext")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GLContextStateHandle GLGetCurrentContext() => DllImport.GLGetCurrentContext();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    WindowHandle ISdl.GLGetCurrentWindow() =>
        (
            (delegate* unmanaged<WindowHandle>)(
                _slots[458] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[458] = nativeContext.LoadFunction("SDL_GL_GetCurrentWindow", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static WindowHandle GLGetCurrentWindow() => DllImport.GLGetCurrentWindow();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.GLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
        (
            (delegate* unmanaged<sbyte*, FunctionPointer>)(
                _slots[459] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[459] = nativeContext.LoadFunction("SDL_GL_GetProcAddress", "SDL3")
            )
        )(proc);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer GLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
        DllImport.GLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.GLGetProcAddress([NativeTypeName("const char *")] Ref<sbyte> proc)
    {
        fixed (sbyte* __dsl_proc = proc)
        {
            return (FunctionPointer)((ISdl)this).GLGetProcAddress(__dsl_proc);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer GLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    ) => DllImport.GLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLGetSwapInterval(int* interval) =>
        (
            (delegate* unmanaged<int*, byte>)(
                _slots[460] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[460] = nativeContext.LoadFunction("SDL_GL_GetSwapInterval", "SDL3")
            )
        )(interval);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLGetSwapInterval(int* interval) => DllImport.GLGetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLGetSwapInterval(Ref<int> interval)
    {
        fixed (int* __dsl_interval = interval)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GLGetSwapInterval(__dsl_interval);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLGetSwapInterval(Ref<int> interval) =>
        DllImport.GLGetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[461] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[461] = nativeContext.LoadFunction("SDL_GL_LoadLibrary", "SDL3")
            )
        )(path);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.GLLoadLibrary(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).GLLoadLibrary(__dsl_path);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.GLLoadLibrary(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLMakeCurrent(
        WindowHandle window,
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => (MaybeBool<byte>)(byte)((ISdl)this).GLMakeCurrentRaw(window, context);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLMakeCurrent(
        WindowHandle window,
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => DllImport.GLMakeCurrent(window, context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLMakeCurrentRaw(
        WindowHandle window,
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) =>
        (
            (delegate* unmanaged<WindowHandle, GLContextStateHandle, byte>)(
                _slots[462] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[462] = nativeContext.LoadFunction("SDL_GL_MakeCurrent", "SDL3")
            )
        )(window, context);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLMakeCurrentRaw(
        WindowHandle window,
        [NativeTypeName("SDL_GLContext")] GLContextStateHandle context
    ) => DllImport.GLMakeCurrentRaw(window, context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GLResetAttributes() =>
        (
            (delegate* unmanaged<void>)(
                _slots[463] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[463] = nativeContext.LoadFunction("SDL_GL_ResetAttributes", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GL_ResetAttributes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GLResetAttributes() => DllImport.GLResetAttributes();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLSetAttribute(GLAttr attr, int value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GLSetAttributeRaw(attr, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLSetAttribute(GLAttr attr, int value) =>
        DllImport.GLSetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLSetAttributeRaw(GLAttr attr, int value) =>
        (
            (delegate* unmanaged<GLAttr, int, byte>)(
                _slots[464] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[464] = nativeContext.LoadFunction("SDL_GL_SetAttribute", "SDL3")
            )
        )(attr, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLSetAttributeRaw(GLAttr attr, int value) =>
        DllImport.GLSetAttributeRaw(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLSetSwapInterval(int interval) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GLSetSwapIntervalRaw(interval);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLSetSwapInterval(int interval) =>
        DllImport.GLSetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLSetSwapIntervalRaw(int interval) =>
        (
            (delegate* unmanaged<int, byte>)(
                _slots[465] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[465] = nativeContext.LoadFunction("SDL_GL_SetSwapInterval", "SDL3")
            )
        )(interval);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLSetSwapIntervalRaw(int interval) =>
        DllImport.GLSetSwapIntervalRaw(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.GLSwapWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).GLSwapWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> GLSwapWindow(WindowHandle window) =>
        DllImport.GLSwapWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GLSwapWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[466] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[466] = nativeContext.LoadFunction("SDL_GL_SwapWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GLSwapWindowRaw(WindowHandle window) => DllImport.GLSwapWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GLUnloadLibrary() =>
        (
            (delegate* unmanaged<void>)(
                _slots[467] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[467] = nativeContext.LoadFunction("SDL_GL_UnloadLibrary", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GL_UnloadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GLUnloadLibrary() => DllImport.GLUnloadLibrary();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GlobDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        int* count
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, uint, int*, sbyte**>)(
                _slots[468] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[468] = nativeContext.LoadFunction("SDL_GlobDirectory", "SDL3")
            )
        )(path, pattern, flags, count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GlobDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        int* count
    ) => DllImport.GlobDirectory(path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GlobDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        fixed (sbyte* __dsl_pattern = pattern)
        fixed (sbyte* __dsl_path = path)
        {
            return (sbyte**)
                ((ISdl)this).GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GlobDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        Ref<int> count
    ) => DllImport.GlobDirectory(path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GlobStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        int* count
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, sbyte*, uint, int*, sbyte**>)(
                _slots[469] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[469] = nativeContext.LoadFunction("SDL_GlobStorageDirectory", "SDL3")
            )
        )(storage, path, pattern, flags, count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GlobStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        int* count
    ) => DllImport.GlobStorageDirectory(storage, path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GlobStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        fixed (sbyte* __dsl_pattern = pattern)
        fixed (sbyte* __dsl_path = path)
        {
            return (sbyte**)
                ((ISdl)this).GlobStorageDirectory(
                    storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GlobStorageDirectory(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("SDL_GlobFlags")] uint flags,
        Ref<int> count
    ) => DllImport.GlobStorageDirectory(storage, path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GuidToString(Guid guid, [NativeTypeName("char *")] sbyte* pszGUID, int cbGUID) =>
        (
            (delegate* unmanaged<Guid, sbyte*, int, void>)(
                _slots[470] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[470] = nativeContext.LoadFunction("SDL_GUIDToString", "SDL3")
            )
        )(guid, pszGUID, cbGUID);

    [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GuidToString(
        Guid guid,
        [NativeTypeName("char *")] sbyte* pszGUID,
        int cbGUID
    ) => DllImport.GuidToString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GuidToString(Guid guid, [NativeTypeName("char *")] Ref<sbyte> pszGUID, int cbGUID)
    {
        fixed (sbyte* __dsl_pszGUID = pszGUID)
        {
            ((ISdl)this).GuidToString(guid, __dsl_pszGUID, cbGUID);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GuidToString(
        Guid guid,
        [NativeTypeName("char *")] Ref<sbyte> pszGUID,
        int cbGUID
    ) => DllImport.GuidToString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HapticEffectSupported(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) =>
        (
            (delegate* unmanaged<HapticHandle, HapticEffect*, byte>)(
                _slots[471] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[471] = nativeContext.LoadFunction("SDL_HapticEffectSupported", "SDL3")
            )
        )(haptic, effect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HapticEffectSupported(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) => DllImport.HapticEffectSupported(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HapticEffectSupported(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    )
    {
        fixed (HapticEffect* __dsl_effect = effect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).HapticEffectSupported(haptic, __dsl_effect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HapticEffectSupported(
        HapticHandle haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    ) => DllImport.HapticEffectSupported(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HapticRumbleSupported(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).HapticRumbleSupportedRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HapticRumbleSupported(HapticHandle haptic) =>
        DllImport.HapticRumbleSupported(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HapticRumbleSupportedRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[472] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[472] = nativeContext.LoadFunction("SDL_HapticRumbleSupported", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HapticRumbleSupportedRaw(HapticHandle haptic) =>
        DllImport.HapticRumbleSupportedRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasAltiVec() => (MaybeBool<byte>)(byte)((ISdl)this).HasAltiVecRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasAltiVec() => DllImport.HasAltiVec();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasAltiVecRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[473] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[473] = nativeContext.LoadFunction("SDL_HasAltiVec", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasAltiVecRaw() => DllImport.HasAltiVecRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasArmsimd() => (MaybeBool<byte>)(byte)((ISdl)this).HasArmsimdRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasArmsimd() => DllImport.HasArmsimd();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasArmsimdRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[474] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[474] = nativeContext.LoadFunction("SDL_HasARMSIMD", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasArmsimdRaw() => DllImport.HasArmsimdRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasAVX() => (MaybeBool<byte>)(byte)((ISdl)this).HasAVXRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasAVX() => DllImport.HasAVX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasAVX2() => (MaybeBool<byte>)(byte)((ISdl)this).HasAVX2Raw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasAVX2() => DllImport.HasAVX2();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasAVX2Raw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[476] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[476] = nativeContext.LoadFunction("SDL_HasAVX2", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasAVX2Raw() => DllImport.HasAVX2Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasAVX512F() => (MaybeBool<byte>)(byte)((ISdl)this).HasAVX512FRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasAVX512F() => DllImport.HasAVX512F();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasAVX512FRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[477] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[477] = nativeContext.LoadFunction("SDL_HasAVX512F", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasAVX512FRaw() => DllImport.HasAVX512FRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasAVXRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[475] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[475] = nativeContext.LoadFunction("SDL_HasAVX", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasAVXRaw() => DllImport.HasAVXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[478] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[478] = nativeContext.LoadFunction("SDL_HasClipboardData", "SDL3")
            )
        )(mime_type);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
        DllImport.HasClipboardData(mime_type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasClipboardData([NativeTypeName("const char *")] Ref<sbyte> mime_type)
    {
        fixed (sbyte* __dsl_mime_type = mime_type)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).HasClipboardData(__dsl_mime_type);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type
    ) => DllImport.HasClipboardData(mime_type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasClipboardText() =>
        (MaybeBool<byte>)(byte)((ISdl)this).HasClipboardTextRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasClipboardText() => DllImport.HasClipboardText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasClipboardTextRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[479] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[479] = nativeContext.LoadFunction("SDL_HasClipboardText", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasClipboardTextRaw() => DllImport.HasClipboardTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasEvent([NativeTypeName("Uint32")] uint type) =>
        (MaybeBool<byte>)(byte)((ISdl)this).HasEventRaw(type);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasEvent([NativeTypeName("Uint32")] uint type) =>
        DllImport.HasEvent(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasEventRaw([NativeTypeName("Uint32")] uint type) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[480] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[480] = nativeContext.LoadFunction("SDL_HasEvent", "SDL3")
            )
        )(type);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasEventRaw([NativeTypeName("Uint32")] uint type) =>
        DllImport.HasEventRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => (MaybeBool<byte>)(byte)((ISdl)this).HasEventsRaw(minType, maxType);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.HasEvents(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasEventsRaw(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        (
            (delegate* unmanaged<uint, uint, byte>)(
                _slots[481] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[481] = nativeContext.LoadFunction("SDL_HasEvents", "SDL3")
            )
        )(minType, maxType);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasEventsRaw(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.HasEventsRaw(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasGamepad() => (MaybeBool<byte>)(byte)((ISdl)this).HasGamepadRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasGamepad() => DllImport.HasGamepad();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasGamepadRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[482] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[482] = nativeContext.LoadFunction("SDL_HasGamepad", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasGamepadRaw() => DllImport.HasGamepadRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasJoystick() => (MaybeBool<byte>)(byte)((ISdl)this).HasJoystickRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasJoystick() => DllImport.HasJoystick();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasJoystickRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[483] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[483] = nativeContext.LoadFunction("SDL_HasJoystick", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasJoystickRaw() => DllImport.HasJoystickRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasKeyboard() => (MaybeBool<byte>)(byte)((ISdl)this).HasKeyboardRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasKeyboard() => DllImport.HasKeyboard();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasKeyboardRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[484] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[484] = nativeContext.LoadFunction("SDL_HasKeyboard", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasKeyboardRaw() => DllImport.HasKeyboardRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasLasx() => (MaybeBool<byte>)(byte)((ISdl)this).HasLasxRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasLasx() => DllImport.HasLasx();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasLasxRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[485] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[485] = nativeContext.LoadFunction("SDL_HasLASX", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasLasxRaw() => DllImport.HasLasxRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasLSX() => (MaybeBool<byte>)(byte)((ISdl)this).HasLSXRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasLSX() => DllImport.HasLSX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasLSXRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[486] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[486] = nativeContext.LoadFunction("SDL_HasLSX", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasLSXRaw() => DllImport.HasLSXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasMMX() => (MaybeBool<byte>)(byte)((ISdl)this).HasMMXRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasMMX() => DllImport.HasMMX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasMMXRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[487] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[487] = nativeContext.LoadFunction("SDL_HasMMX", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasMMXRaw() => DllImport.HasMMXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasMouse() => (MaybeBool<byte>)(byte)((ISdl)this).HasMouseRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasMouse() => DllImport.HasMouse();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasMouseRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[488] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[488] = nativeContext.LoadFunction("SDL_HasMouse", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasMouseRaw() => DllImport.HasMouseRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasNeon() => (MaybeBool<byte>)(byte)((ISdl)this).HasNeonRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasNeon() => DllImport.HasNeon();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasNeonRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[489] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[489] = nativeContext.LoadFunction("SDL_HasNEON", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasNeonRaw() => DllImport.HasNeonRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasPrimarySelectionText() =>
        (MaybeBool<byte>)(byte)((ISdl)this).HasPrimarySelectionTextRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasPrimarySelectionText() => DllImport.HasPrimarySelectionText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasPrimarySelectionTextRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[490] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[490] = nativeContext.LoadFunction(
                        "SDL_HasPrimarySelectionText",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasPrimarySelectionTextRaw() => DllImport.HasPrimarySelectionTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, byte>)(
                _slots[491] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[491] = nativeContext.LoadFunction("SDL_HasProperty", "SDL3")
            )
        )(props, name);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.HasProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).HasProperty(props, __dsl_name);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.HasProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, byte>)(
                _slots[492] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[492] = nativeContext.LoadFunction("SDL_HasRectIntersection", "SDL3")
            )
        )(A, B);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B
    ) => DllImport.HasRectIntersection(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
    )
    {
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).HasRectIntersection(__dsl_A, __dsl_B);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
    ) => DllImport.HasRectIntersection(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, byte>)(
                _slots[493] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[493] = nativeContext.LoadFunction(
                        "SDL_HasRectIntersectionFloat",
                        "SDL3"
                    )
            )
        )(A, B);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B
    ) => DllImport.HasRectIntersectionFloat(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
    )
    {
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).HasRectIntersectionFloat(__dsl_A, __dsl_B);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
    ) => DllImport.HasRectIntersectionFloat(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasScreenKeyboardSupport() =>
        (MaybeBool<byte>)(byte)((ISdl)this).HasScreenKeyboardSupportRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasScreenKeyboardSupport() =>
        DllImport.HasScreenKeyboardSupport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasScreenKeyboardSupportRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[494] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[494] = nativeContext.LoadFunction(
                        "SDL_HasScreenKeyboardSupport",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasScreenKeyboardSupportRaw() => DllImport.HasScreenKeyboardSupportRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasSSE() => (MaybeBool<byte>)(byte)((ISdl)this).HasSSERaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasSSE() => DllImport.HasSSE();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasSSE2() => (MaybeBool<byte>)(byte)((ISdl)this).HasSSE2Raw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasSSE2() => DllImport.HasSSE2();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasSSE2Raw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[496] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[496] = nativeContext.LoadFunction("SDL_HasSSE2", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasSSE2Raw() => DllImport.HasSSE2Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasSSE3() => (MaybeBool<byte>)(byte)((ISdl)this).HasSSE3Raw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasSSE3() => DllImport.HasSSE3();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasSSE3Raw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[497] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[497] = nativeContext.LoadFunction("SDL_HasSSE3", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasSSE3Raw() => DllImport.HasSSE3Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasSSE41() => (MaybeBool<byte>)(byte)((ISdl)this).HasSSE41Raw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasSSE41() => DllImport.HasSSE41();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasSSE41Raw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[498] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[498] = nativeContext.LoadFunction("SDL_HasSSE41", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasSSE41Raw() => DllImport.HasSSE41Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HasSSE42() => (MaybeBool<byte>)(byte)((ISdl)this).HasSSE42Raw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HasSSE42() => DllImport.HasSSE42();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasSSE42Raw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[499] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[499] = nativeContext.LoadFunction("SDL_HasSSE42", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasSSE42Raw() => DllImport.HasSSE42Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HasSSERaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[495] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[495] = nativeContext.LoadFunction("SDL_HasSSE", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HasSSERaw() => DllImport.HasSSERaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidBleScan([NativeTypeName("bool")] byte active) =>
        (
            (delegate* unmanaged<byte, void>)(
                _slots[500] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[500] = nativeContext.LoadFunction("SDL_hid_ble_scan", "SDL3")
            )
        )(active);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidBleScan([NativeTypeName("bool")] byte active) =>
        DllImport.HidBleScan(active);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidBleScan([NativeTypeName("bool")] MaybeBool<byte> active) =>
        ((ISdl)this).HidBleScan((byte)active);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidBleScan([NativeTypeName("bool")] MaybeBool<byte> active) =>
        DllImport.HidBleScan(active);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidClose(HidDeviceHandle dev) =>
        (
            (delegate* unmanaged<HidDeviceHandle, int>)(
                _slots[501] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[501] = nativeContext.LoadFunction("SDL_hid_close", "SDL3")
            )
        )(dev);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidClose(HidDeviceHandle dev) => DllImport.HidClose(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.HidDeviceChangeCount() =>
        (
            (delegate* unmanaged<uint>)(
                _slots[502] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[502] = nativeContext.LoadFunction(
                        "SDL_hid_device_change_count",
                        "SDL3"
                    )
            )
        )();

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_device_change_count")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint HidDeviceChangeCount() => DllImport.HidDeviceChangeCount();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<HidDeviceInfo> ISdl.HidEnumerate(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => (HidDeviceInfo*)((ISdl)this).HidEnumerateRaw(vendor_id, product_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<HidDeviceInfo> HidEnumerate(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => DllImport.HidEnumerate(vendor_id, product_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceInfo* ISdl.HidEnumerateRaw(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) =>
        (
            (delegate* unmanaged<ushort, ushort, HidDeviceInfo*>)(
                _slots[503] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[503] = nativeContext.LoadFunction("SDL_hid_enumerate", "SDL3")
            )
        )(vendor_id, product_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceInfo* HidEnumerateRaw(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => DllImport.HidEnumerateRaw(vendor_id, product_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidExit() =>
        (
            (delegate* unmanaged<int>)(
                _slots[504] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[504] = nativeContext.LoadFunction("SDL_hid_exit", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_exit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidExit() => DllImport.HidExit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidFreeEnumeration(HidDeviceInfo* devs) =>
        (
            (delegate* unmanaged<HidDeviceInfo*, void>)(
                _slots[505] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[505] = nativeContext.LoadFunction("SDL_hid_free_enumeration", "SDL3")
            )
        )(devs);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidFreeEnumeration(HidDeviceInfo* devs) =>
        DllImport.HidFreeEnumeration(devs);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidFreeEnumeration(Ref<HidDeviceInfo> devs)
    {
        fixed (HidDeviceInfo* __dsl_devs = devs)
        {
            ((ISdl)this).HidFreeEnumeration(__dsl_devs);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs) =>
        DllImport.HidFreeEnumeration(devs);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<HidDeviceInfo> ISdl.HidGetDeviceInfo(HidDeviceHandle dev) =>
        (HidDeviceInfo*)((ISdl)this).HidGetDeviceInfoRaw(dev);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<HidDeviceInfo> HidGetDeviceInfo(HidDeviceHandle dev) =>
        DllImport.HidGetDeviceInfo(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceInfo* ISdl.HidGetDeviceInfoRaw(HidDeviceHandle dev) =>
        (
            (delegate* unmanaged<HidDeviceHandle, HidDeviceInfo*>)(
                _slots[506] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[506] = nativeContext.LoadFunction("SDL_hid_get_device_info", "SDL3")
            )
        )(dev);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceInfo* HidGetDeviceInfoRaw(HidDeviceHandle dev) =>
        DllImport.HidGetDeviceInfoRaw(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[507] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[507] = nativeContext.LoadFunction("SDL_hid_get_feature_report", "SDL3")
            )
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidGetFeatureReport(dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetIndexedString(
        HidDeviceHandle dev,
        int string_index,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, int, uint*, nuint, int>)(
                _slots[508] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[508] = nativeContext.LoadFunction("SDL_hid_get_indexed_string", "SDL3")
            )
        )(dev, string_index, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetIndexedString(
        HidDeviceHandle dev,
        int string_index,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetIndexedString(dev, string_index, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetIndexedString(
        HidDeviceHandle dev,
        int string_index,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        {
            return (int)((ISdl)this).HidGetIndexedString(dev, string_index, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetIndexedString(
        HidDeviceHandle dev,
        int string_index,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetIndexedString(dev, string_index, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetInputReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[509] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[509] = nativeContext.LoadFunction("SDL_hid_get_input_report", "SDL3")
            )
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetInputReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetInputReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetInputReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidGetInputReport(dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetInputReport(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetInputReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetManufacturerString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, uint*, nuint, int>)(
                _slots[510] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[510] = nativeContext.LoadFunction(
                        "SDL_hid_get_manufacturer_string",
                        "SDL3"
                    )
            )
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetManufacturerString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetManufacturerString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetManufacturerString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        {
            return (int)((ISdl)this).HidGetManufacturerString(dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetManufacturerString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetManufacturerString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetProductString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, uint*, nuint, int>)(
                _slots[511] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[511] = nativeContext.LoadFunction("SDL_hid_get_product_string", "SDL3")
            )
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetProductString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetProductString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetProductString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        {
            return (int)((ISdl)this).HidGetProductString(dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetProductString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetProductString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetReportDescriptor(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[512] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[512] = nativeContext.LoadFunction(
                        "SDL_hid_get_report_descriptor",
                        "SDL3"
                    )
            )
        )(dev, buf, buf_size);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetReportDescriptor(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) => DllImport.HidGetReportDescriptor(dev, buf, buf_size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetReportDescriptor(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> buf,
        [NativeTypeName("size_t")] nuint buf_size
    )
    {
        fixed (byte* __dsl_buf = buf)
        {
            return (int)((ISdl)this).HidGetReportDescriptor(dev, __dsl_buf, buf_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetReportDescriptor(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) => DllImport.HidGetReportDescriptor(dev, buf, buf_size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetSerialNumberString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, uint*, nuint, int>)(
                _slots[513] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[513] = nativeContext.LoadFunction(
                        "SDL_hid_get_serial_number_string",
                        "SDL3"
                    )
            )
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetSerialNumberString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetSerialNumberString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetSerialNumberString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        {
            return (int)((ISdl)this).HidGetSerialNumberString(dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetSerialNumberString(
        HidDeviceHandle dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetSerialNumberString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidInit() =>
        (
            (delegate* unmanaged<int>)(
                _slots[514] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[514] = nativeContext.LoadFunction("SDL_hid_init", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_init")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidInit() => DllImport.HidInit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceHandle ISdl.HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] uint* serial_number
    ) =>
        (
            (delegate* unmanaged<ushort, ushort, uint*, HidDeviceHandle>)(
                _slots[515] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[515] = nativeContext.LoadFunction("SDL_hid_open", "SDL3")
            )
        )(vendor_id, product_id, serial_number);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceHandle HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] uint* serial_number
    ) => DllImport.HidOpen(vendor_id, product_id, serial_number);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceHandle ISdl.HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
    )
    {
        fixed (uint* __dsl_serial_number = serial_number)
        {
            return (HidDeviceHandle)
                ((ISdl)this).HidOpen(vendor_id, product_id, __dsl_serial_number);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceHandle HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
    ) => DllImport.HidOpen(vendor_id, product_id, serial_number);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceHandle ISdl.HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, HidDeviceHandle>)(
                _slots[516] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[516] = nativeContext.LoadFunction("SDL_hid_open_path", "SDL3")
            )
        )(path);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.HidOpenPath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceHandle ISdl.HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (HidDeviceHandle)((ISdl)this).HidOpenPath(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceHandle HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.HidOpenPath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidRead(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[517] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[517] = nativeContext.LoadFunction("SDL_hid_read", "SDL3")
            )
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidRead(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidRead(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidRead(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidRead(dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidRead(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidRead(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidReadTimeout(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int, int>)(
                _slots[518] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[518] = nativeContext.LoadFunction("SDL_hid_read_timeout", "SDL3")
            )
        )(dev, data, length, milliseconds);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidReadTimeout(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) => DllImport.HidReadTimeout(dev, data, length, milliseconds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidReadTimeout(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidReadTimeout(dev, __dsl_data, length, milliseconds);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidReadTimeout(
        HidDeviceHandle dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) => DllImport.HidReadTimeout(dev, data, length, milliseconds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSendFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[519] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[519] = nativeContext.LoadFunction(
                        "SDL_hid_send_feature_report",
                        "SDL3"
                    )
            )
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSendFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidSendFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSendFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidSendFeatureReport(dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSendFeatureReport(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidSendFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSetNonblocking(HidDeviceHandle dev, int nonblock) =>
        (
            (delegate* unmanaged<HidDeviceHandle, int, int>)(
                _slots[520] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[520] = nativeContext.LoadFunction("SDL_hid_set_nonblocking", "SDL3")
            )
        )(dev, nonblock);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSetNonblocking(HidDeviceHandle dev, int nonblock) =>
        DllImport.HidSetNonblocking(dev, nonblock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidWrite(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<HidDeviceHandle, byte*, nuint, int>)(
                _slots[521] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[521] = nativeContext.LoadFunction("SDL_hid_write", "SDL3")
            )
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidWrite(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidWrite(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidWrite(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        {
            return (int)((ISdl)this).HidWrite(dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidWrite(
        HidDeviceHandle dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidWrite(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HideCursor() => (MaybeBool<byte>)(byte)((ISdl)this).HideCursorRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HideCursor() => DllImport.HideCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HideCursorRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[522] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[522] = nativeContext.LoadFunction("SDL_HideCursor", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HideCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HideCursorRaw() => DllImport.HideCursorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.HideWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).HideWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> HideWindow(WindowHandle window) => DllImport.HideWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.HideWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[523] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[523] = nativeContext.LoadFunction("SDL_HideWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte HideWindowRaw(WindowHandle window) => DllImport.HideWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.Init([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (MaybeBool<byte>)(byte)((ISdl)this).InitRaw(flags);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> Init([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.Init(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.InitHapticRumble(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).InitHapticRumbleRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> InitHapticRumble(HapticHandle haptic) =>
        DllImport.InitHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.InitHapticRumbleRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[525] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[525] = nativeContext.LoadFunction("SDL_InitHapticRumble", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte InitHapticRumbleRaw(HapticHandle haptic) =>
        DllImport.InitHapticRumbleRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.InitRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[524] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[524] = nativeContext.LoadFunction("SDL_Init", "SDL3")
            )
        )(flags);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_Init")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte InitRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.InitRaw(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.InitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (MaybeBool<byte>)(byte)((ISdl)this).InitSubSystemRaw(flags);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> InitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.InitSubSystem(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.InitSubSystemRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[526] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[526] = nativeContext.LoadFunction("SDL_InitSubSystem", "SDL3")
            )
        )(flags);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_InitSubSystem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte InitSubSystemRaw([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.InitSubSystemRaw(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromConstMem(
        [NativeTypeName("const void *")] void* mem,
        [NativeTypeName("size_t")] nuint size
    ) =>
        (
            (delegate* unmanaged<void*, nuint, IOStreamHandle>)(
                _slots[527] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[527] = nativeContext.LoadFunction("SDL_IOFromConstMem", "SDL3")
            )
        )(mem, size);

    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromConstMem(
        [NativeTypeName("const void *")] void* mem,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.IOFromConstMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromConstMem(
        [NativeTypeName("const void *")] Ref mem,
        [NativeTypeName("size_t")] nuint size
    )
    {
        fixed (void* __dsl_mem = mem)
        {
            return (IOStreamHandle)((ISdl)this).IOFromConstMem(__dsl_mem, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromConstMem(
        [NativeTypeName("const void *")] Ref mem,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.IOFromConstMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromDynamicMem() =>
        (
            (delegate* unmanaged<IOStreamHandle>)(
                _slots[528] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[528] = nativeContext.LoadFunction("SDL_IOFromDynamicMem", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromDynamicMem() => DllImport.IOFromDynamicMem();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("const char *")] sbyte* mode
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, IOStreamHandle>)(
                _slots[529] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[529] = nativeContext.LoadFunction("SDL_IOFromFile", "SDL3")
            )
        )(file, mode);

    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("const char *")] sbyte* mode
    ) => DllImport.IOFromFile(file, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("const char *")] Ref<sbyte> mode
    )
    {
        fixed (sbyte* __dsl_mode = mode)
        fixed (sbyte* __dsl_file = file)
        {
            return (IOStreamHandle)((ISdl)this).IOFromFile(__dsl_file, __dsl_mode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("const char *")] Ref<sbyte> mode
    ) => DllImport.IOFromFile(file, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
        (
            (delegate* unmanaged<void*, nuint, IOStreamHandle>)(
                _slots[530] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[530] = nativeContext.LoadFunction("SDL_IOFromMem", "SDL3")
            )
        )(mem, size);

    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
        DllImport.IOFromMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
    {
        fixed (void* __dsl_mem = mem)
        {
            return (IOStreamHandle)((ISdl)this).IOFromMem(__dsl_mem, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size) =>
        DllImport.IOFromMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.IOvprintf(
        IOStreamHandle context,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) =>
        (
            (delegate* unmanaged<IOStreamHandle, sbyte*, sbyte*, nuint>)(
                _slots[531] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[531] = nativeContext.LoadFunction("SDL_IOvprintf", "SDL3")
            )
        )(context, fmt, ap);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint IOvprintf(
        IOStreamHandle context,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) => DllImport.IOvprintf(context, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.IOvprintf(
        IOStreamHandle context,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    )
    {
        fixed (sbyte* __dsl_ap = ap)
        fixed (sbyte* __dsl_fmt = fmt)
        {
            return (nuint)((ISdl)this).IOvprintf(context, __dsl_fmt, __dsl_ap);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint IOvprintf(
        IOStreamHandle context,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    ) => DllImport.IOvprintf(context, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (MaybeBool<byte>)(byte)((ISdl)this).IsGamepadRaw(instance_id);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsGamepad(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[532] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[532] = nativeContext.LoadFunction("SDL_IsGamepad", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsGamepadRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsJoystickHaptic(JoystickHandle joystick) =>
        (MaybeBool<byte>)(byte)((ISdl)this).IsJoystickHapticRaw(joystick);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsJoystickHaptic(JoystickHandle joystick) =>
        DllImport.IsJoystickHaptic(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsJoystickHapticRaw(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, byte>)(
                _slots[533] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[533] = nativeContext.LoadFunction("SDL_IsJoystickHaptic", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsJoystickHapticRaw(JoystickHandle joystick) =>
        DllImport.IsJoystickHapticRaw(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsJoystickVirtual([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (MaybeBool<byte>)(byte)((ISdl)this).IsJoystickVirtualRaw(instance_id);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsJoystickVirtual(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.IsJoystickVirtual(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[534] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[534] = nativeContext.LoadFunction("SDL_IsJoystickVirtual", "SDL3")
            )
        )(instance_id);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsJoystickVirtualRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsMouseHaptic() => (MaybeBool<byte>)(byte)((ISdl)this).IsMouseHapticRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsMouseHaptic() => DllImport.IsMouseHaptic();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsMouseHapticRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[535] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[535] = nativeContext.LoadFunction("SDL_IsMouseHaptic", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsMouseHapticRaw() => DllImport.IsMouseHapticRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsTablet() => (MaybeBool<byte>)(byte)((ISdl)this).IsTabletRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsTablet() => DllImport.IsTablet();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsTabletRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[536] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[536] = nativeContext.LoadFunction("SDL_IsTablet", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsTabletRaw() => DllImport.IsTabletRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.IsTV() => (MaybeBool<byte>)(byte)((ISdl)this).IsTVRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> IsTV() => DllImport.IsTV();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.IsTVRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[537] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[537] = nativeContext.LoadFunction("SDL_IsTV", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte IsTVRaw() => DllImport.IsTVRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.JoystickConnected(JoystickHandle joystick) =>
        (MaybeBool<byte>)(byte)((ISdl)this).JoystickConnectedRaw(joystick);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> JoystickConnected(JoystickHandle joystick) =>
        DllImport.JoystickConnected(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.JoystickConnectedRaw(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, byte>)(
                _slots[538] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[538] = nativeContext.LoadFunction("SDL_JoystickConnected", "SDL3")
            )
        )(joystick);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte JoystickConnectedRaw(JoystickHandle joystick) =>
        DllImport.JoystickConnectedRaw(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.JoystickEventsEnabled() =>
        (MaybeBool<byte>)(byte)((ISdl)this).JoystickEventsEnabledRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> JoystickEventsEnabled() => DllImport.JoystickEventsEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.JoystickEventsEnabledRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[539] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[539] = nativeContext.LoadFunction("SDL_JoystickEventsEnabled", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte JoystickEventsEnabledRaw() => DllImport.JoystickEventsEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
        (
            (delegate* unmanaged<sbyte*, Surface*>)(
                _slots[540] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[540] = nativeContext.LoadFunction("SDL_LoadBMP", "SDL3")
            )
        )(file);

    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
        DllImport.LoadBMP(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
    {
        fixed (sbyte* __dsl_file = file)
        {
            return (Surface*)((ISdl)this).LoadBMP(__dsl_file);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file) =>
        DllImport.LoadBMP(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.LoadBMPIO(IOStreamHandle src, [NativeTypeName("bool")] byte closeio) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte, Surface*>)(
                _slots[541] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[541] = nativeContext.LoadFunction("SDL_LoadBMP_IO", "SDL3")
            )
        )(src, closeio);

    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* LoadBMPIO(IOStreamHandle src, [NativeTypeName("bool")] byte closeio) =>
        DllImport.LoadBMPIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.LoadBMPIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => (Surface*)((ISdl)this).LoadBMPIO(src, (byte)closeio);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> LoadBMPIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => DllImport.LoadBMPIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.LoadFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("size_t *")] nuint* datasize
    ) =>
        (
            (delegate* unmanaged<sbyte*, nuint*, void*>)(
                _slots[542] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[542] = nativeContext.LoadFunction("SDL_LoadFile", "SDL3")
            )
        )(file, datasize);

    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* LoadFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("size_t *")] nuint* datasize
    ) => DllImport.LoadFile(file, datasize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.LoadFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("size_t *")] Ref<nuint> datasize
    )
    {
        fixed (nuint* __dsl_datasize = datasize)
        fixed (sbyte* __dsl_file = file)
        {
            return (void*)((ISdl)this).LoadFile(__dsl_file, __dsl_datasize);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr LoadFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("size_t *")] Ref<nuint> datasize
    ) => DllImport.LoadFile(file, datasize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.LoadFileIO(
        IOStreamHandle src,
        [NativeTypeName("size_t *")] nuint* datasize,
        [NativeTypeName("bool")] byte closeio
    ) =>
        (
            (delegate* unmanaged<IOStreamHandle, nuint*, byte, void*>)(
                _slots[543] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[543] = nativeContext.LoadFunction("SDL_LoadFile_IO", "SDL3")
            )
        )(src, datasize, closeio);

    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* LoadFileIO(
        IOStreamHandle src,
        [NativeTypeName("size_t *")] nuint* datasize,
        [NativeTypeName("bool")] byte closeio
    ) => DllImport.LoadFileIO(src, datasize, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.LoadFileIO(
        IOStreamHandle src,
        [NativeTypeName("size_t *")] Ref<nuint> datasize,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    )
    {
        fixed (nuint* __dsl_datasize = datasize)
        {
            return (void*)((ISdl)this).LoadFileIO(src, __dsl_datasize, (byte)closeio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr LoadFileIO(
        IOStreamHandle src,
        [NativeTypeName("size_t *")] Ref<nuint> datasize,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => DllImport.LoadFileIO(src, datasize, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.LoadFunction(
        SharedObjectHandle handle,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<SharedObjectHandle, sbyte*, FunctionPointer>)(
                _slots[544] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[544] = nativeContext.LoadFunction("SDL_LoadFunction", "SDL3")
            )
        )(handle, name);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer LoadFunction(
        SharedObjectHandle handle,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.LoadFunction(handle, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    FunctionPointer ISdl.LoadFunction(
        SharedObjectHandle handle,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (FunctionPointer)((ISdl)this).LoadFunction(handle, __dsl_name);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static FunctionPointer LoadFunction(
        SharedObjectHandle handle,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.LoadFunction(handle, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SharedObjectHandle ISdl.LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
        (
            (delegate* unmanaged<sbyte*, SharedObjectHandle>)(
                _slots[545] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[545] = nativeContext.LoadFunction("SDL_LoadObject", "SDL3")
            )
        )(sofile);

    [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SharedObjectHandle LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
        DllImport.LoadObject(sofile);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SharedObjectHandle ISdl.LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile)
    {
        fixed (sbyte* __dsl_sofile = sofile)
        {
            return (SharedObjectHandle)((ISdl)this).LoadObject(__dsl_sofile);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SharedObjectHandle LoadObject(
        [NativeTypeName("const char *")] Ref<sbyte> sofile
    ) => DllImport.LoadObject(sofile);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LoadWAV(
        [NativeTypeName("const char *")] sbyte* path,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) =>
        (
            (delegate* unmanaged<sbyte*, AudioSpec*, byte**, uint*, byte>)(
                _slots[546] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[546] = nativeContext.LoadFunction("SDL_LoadWAV", "SDL3")
            )
        )(path, spec, audio_buf, audio_len);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LoadWAV(
        [NativeTypeName("const char *")] sbyte* path,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) => DllImport.LoadWAV(path, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LoadWAV(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    )
    {
        fixed (uint* __dsl_audio_len = audio_len)
        fixed (byte** __dsl_audio_buf = audio_buf)
        fixed (AudioSpec* __dsl_spec = spec)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LoadWAV(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    ) => DllImport.LoadWAV(path, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LoadWAVIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] byte closeio,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte, AudioSpec*, byte**, uint*, byte>)(
                _slots[547] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[547] = nativeContext.LoadFunction("SDL_LoadWAV_IO", "SDL3")
            )
        )(src, closeio, spec, audio_buf, audio_len);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LoadWAVIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] byte closeio,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) => DllImport.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LoadWAVIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    )
    {
        fixed (uint* __dsl_audio_len = audio_len)
        fixed (byte** __dsl_audio_buf = audio_buf)
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).LoadWAVIO(
                        src,
                        (byte)closeio,
                        __dsl_spec,
                        __dsl_audio_buf,
                        __dsl_audio_len
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LoadWAVIO(
        IOStreamHandle src,
        [NativeTypeName("bool")] MaybeBool<byte> closeio,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    ) => DllImport.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LockAudioStream(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).LockAudioStreamRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LockAudioStream(AudioStreamHandle stream) =>
        DllImport.LockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LockAudioStreamRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[548] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[548] = nativeContext.LoadFunction("SDL_LockAudioStream", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LockAudioStreamRaw(AudioStreamHandle stream) =>
        DllImport.LockAudioStreamRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockJoysticks() =>
        (
            (delegate* unmanaged<void>)(
                _slots[549] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[549] = nativeContext.LoadFunction("SDL_LockJoysticks", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_LockJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockJoysticks() => DllImport.LockJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockMutex(MutexHandle mutex) =>
        (
            (delegate* unmanaged<MutexHandle, void>)(
                _slots[550] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[550] = nativeContext.LoadFunction("SDL_LockMutex", "SDL3")
            )
        )(mutex);

    [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockMutex(MutexHandle mutex) => DllImport.LockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        (MaybeBool<byte>)(byte)((ISdl)this).LockPropertiesRaw(props);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.LockProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LockPropertiesRaw([NativeTypeName("SDL_PropertiesID")] uint props) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[551] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[551] = nativeContext.LoadFunction("SDL_LockProperties", "SDL3")
            )
        )(props);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LockPropertiesRaw([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.LockPropertiesRaw(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForReading(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, void>)(
                _slots[552] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[552] = nativeContext.LoadFunction("SDL_LockRWLockForReading", "SDL3")
            )
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForReading(RWLockHandle rwlock) =>
        DllImport.LockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForWriting(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, void>)(
                _slots[553] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[553] = nativeContext.LoadFunction("SDL_LockRWLockForWriting", "SDL3")
            )
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForWriting(RWLockHandle rwlock) =>
        DllImport.LockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        (
            (delegate* unmanaged<int*, void>)(
                _slots[554] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[554] = nativeContext.LoadFunction("SDL_LockSpinlock", "SDL3")
            )
        )(@lock);

    [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.LockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            ((ISdl)this).LockSpinlock(__dsl_lock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
        DllImport.LockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LockSurface(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, byte>)(
                _slots[555] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[555] = nativeContext.LoadFunction("SDL_LockSurface", "SDL3")
            )
        )(surface);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LockSurface(Surface* surface) => DllImport.LockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LockSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).LockSurface(__dsl_surface);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LockSurface(Ref<Surface> surface) =>
        DllImport.LockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LockTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        void** pixels,
        int* pitch
    ) =>
        (
            (delegate* unmanaged<Texture*, Rect*, void**, int*, byte>)(
                _slots[556] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[556] = nativeContext.LoadFunction("SDL_LockTexture", "SDL3")
            )
        )(texture, rect, pixels, pitch);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LockTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        void** pixels,
        int* pitch
    ) => DllImport.LockTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LockTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D pixels,
        Ref<int> pitch
    )
    {
        fixed (int* __dsl_pitch = pitch)
        fixed (void** __dsl_pixels = pixels)
        fixed (Rect* __dsl_rect = rect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LockTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D pixels,
        Ref<int> pitch
    ) => DllImport.LockTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.LockTextureToSurface(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        Surface** surface
    ) =>
        (
            (delegate* unmanaged<Texture*, Rect*, Surface**, byte>)(
                _slots[557] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[557] = nativeContext.LoadFunction("SDL_LockTextureToSurface", "SDL3")
            )
        )(texture, rect, surface);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte LockTextureToSurface(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        Surface** surface
    ) => DllImport.LockTextureToSurface(texture, rect, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.LockTextureToSurface(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D<Surface> surface
    )
    {
        fixed (Surface** __dsl_surface = surface)
        fixed (Rect* __dsl_rect = rect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> LockTextureToSurface(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D<Surface> surface
    ) => DllImport.LockTextureToSurface(texture, rect, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) =>
        (
            (delegate* unmanaged<int, LogPriority, sbyte*, sbyte*, void>)(
                _slots[558] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[558] = nativeContext.LoadFunction("SDL_LogMessageV", "SDL3")
            )
        )(category, priority, fmt, ap);

    [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) => DllImport.LogMessageV(category, priority, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    )
    {
        fixed (sbyte* __dsl_ap = ap)
        fixed (sbyte* __dsl_fmt = fmt)
        {
            ((ISdl)this).LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    ) => DllImport.LogMessageV(category, priority, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRGB(
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<PixelFormatDetails*, Palette*, byte, byte, byte, uint>)(
                _slots[559] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[559] = nativeContext.LoadFunction("SDL_MapRGB", "SDL3")
            )
        )(format, palette, r, g, b);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRGB(
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapRGB(format, palette, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRGB(
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (PixelFormatDetails* __dsl_format = format)
        {
            return (uint)((ISdl)this).MapRGB(__dsl_format, __dsl_palette, r, g, b);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRGB(
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapRGB(format, palette, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRgba(
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<PixelFormatDetails*, Palette*, byte, byte, byte, byte, uint>)(
                _slots[560] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[560] = nativeContext.LoadFunction("SDL_MapRGBA", "SDL3")
            )
        )(format, palette, r, g, b, a);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRgba(
        [NativeTypeName("const SDL_PixelFormatDetails *")] PixelFormatDetails* format,
        [NativeTypeName("const SDL_Palette *")] Palette* palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapRgba(format, palette, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRgba(
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    )
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (PixelFormatDetails* __dsl_format = format)
        {
            return (uint)((ISdl)this).MapRgba(__dsl_format, __dsl_palette, r, g, b, a);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRgba(
        [NativeTypeName("const SDL_PixelFormatDetails *")] Ref<PixelFormatDetails> format,
        [NativeTypeName("const SDL_Palette *")] Ref<Palette> palette,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapRgba(format, palette, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapSurfaceRGB(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<Surface*, byte, byte, byte, uint>)(
                _slots[561] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[561] = nativeContext.LoadFunction("SDL_MapSurfaceRGB", "SDL3")
            )
        )(surface, r, g, b);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapSurfaceRGB(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapSurfaceRGB(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapSurfaceRGB(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (uint)((ISdl)this).MapSurfaceRGB(__dsl_surface, r, g, b);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapSurfaceRGB(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapSurfaceRGB(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapSurfaceRgba(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<Surface*, byte, byte, byte, byte, uint>)(
                _slots[562] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[562] = nativeContext.LoadFunction("SDL_MapSurfaceRGBA", "SDL3")
            )
        )(surface, r, g, b, a);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapSurfaceRgba(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapSurfaceRgba(surface, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapSurfaceRgba(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (uint)((ISdl)this).MapSurfaceRgba(__dsl_surface, r, g, b, a);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapSurfaceRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapSurfaceRgba(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapSurfaceRgba(surface, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.MaximizeWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).MaximizeWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> MaximizeWindow(WindowHandle window) =>
        DllImport.MaximizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.MaximizeWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[563] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[563] = nativeContext.LoadFunction("SDL_MaximizeWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte MaximizeWindowRaw(WindowHandle window) =>
        DllImport.MaximizeWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MemoryBarrierAcquireFunction() =>
        (
            (delegate* unmanaged<void>)(
                _slots[564] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[564] = nativeContext.LoadFunction(
                        "SDL_MemoryBarrierAcquireFunction",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MemoryBarrierAcquireFunction() => DllImport.MemoryBarrierAcquireFunction();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MemoryBarrierReleaseFunction() =>
        (
            (delegate* unmanaged<void>)(
                _slots[565] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[565] = nativeContext.LoadFunction(
                        "SDL_MemoryBarrierReleaseFunction",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MemoryBarrierReleaseFunction() => DllImport.MemoryBarrierReleaseFunction();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.MetalCreateView(WindowHandle window) => (void*)((ISdl)this).MetalCreateViewRaw(window);

    [return: NativeTypeName("SDL_MetalView")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr MetalCreateView(WindowHandle window) => DllImport.MetalCreateView(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.MetalCreateViewRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, void*>)(
                _slots[566] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[566] = nativeContext.LoadFunction("SDL_Metal_CreateView", "SDL3")
            )
        )(window);

    [return: NativeTypeName("SDL_MetalView")]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* MetalCreateViewRaw(WindowHandle window) =>
        DllImport.MetalCreateViewRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
        (
            (delegate* unmanaged<void*, void>)(
                _slots[567] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[567] = nativeContext.LoadFunction("SDL_Metal_DestroyView", "SDL3")
            )
        )(view);

    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
        DllImport.MetalDestroyView(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
    {
        fixed (void* __dsl_view = view)
        {
            ((ISdl)this).MetalDestroyView(__dsl_view);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view) =>
        DllImport.MetalDestroyView(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
        (
            (delegate* unmanaged<void*, void*>)(
                _slots[568] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[568] = nativeContext.LoadFunction("SDL_Metal_GetLayer", "SDL3")
            )
        )(view);

    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
        DllImport.MetalGetLayer(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
    {
        fixed (void* __dsl_view = view)
        {
            return (void*)((ISdl)this).MetalGetLayer(__dsl_view);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view) =>
        DllImport.MetalGetLayer(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.MinimizeWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).MinimizeWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> MinimizeWindow(WindowHandle window) =>
        DllImport.MinimizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.MinimizeWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[569] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[569] = nativeContext.LoadFunction("SDL_MinimizeWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte MinimizeWindowRaw(WindowHandle window) =>
        DllImport.MinimizeWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.MixAudio(
        [NativeTypeName("Uint8 *")] byte* dst,
        [NativeTypeName("const Uint8 *")] byte* src,
        AudioFormat format,
        [NativeTypeName("Uint32")] uint len,
        float volume
    ) =>
        (
            (delegate* unmanaged<byte*, byte*, AudioFormat, uint, float, byte>)(
                _slots[570] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[570] = nativeContext.LoadFunction("SDL_MixAudio", "SDL3")
            )
        )(dst, src, format, len, volume);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte MixAudio(
        [NativeTypeName("Uint8 *")] byte* dst,
        [NativeTypeName("const Uint8 *")] byte* src,
        AudioFormat format,
        [NativeTypeName("Uint32")] uint len,
        float volume
    ) => DllImport.MixAudio(dst, src, format, len, volume);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.MixAudio(
        [NativeTypeName("Uint8 *")] Ref<byte> dst,
        [NativeTypeName("const Uint8 *")] Ref<byte> src,
        AudioFormat format,
        [NativeTypeName("Uint32")] uint len,
        float volume
    )
    {
        fixed (byte* __dsl_src = src)
        fixed (byte* __dsl_dst = dst)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).MixAudio(__dsl_dst, __dsl_src, format, len, volume);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MixAudio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> MixAudio(
        [NativeTypeName("Uint8 *")] Ref<byte> dst,
        [NativeTypeName("const Uint8 *")] Ref<byte> src,
        AudioFormat format,
        [NativeTypeName("Uint32")] uint len,
        float volume
    ) => DllImport.MixAudio(dst, src, format, len, volume);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidEnterBackground() =>
        (
            (delegate* unmanaged<void>)(
                _slots[571] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[571] = nativeContext.LoadFunction(
                        "SDL_OnApplicationDidEnterBackground",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterBackground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidEnterBackground() =>
        DllImport.OnApplicationDidEnterBackground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidEnterForeground() =>
        (
            (delegate* unmanaged<void>)(
                _slots[572] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[572] = nativeContext.LoadFunction(
                        "SDL_OnApplicationDidEnterForeground",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidEnterForeground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidEnterForeground() =>
        DllImport.OnApplicationDidEnterForeground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidReceiveMemoryWarning() =>
        (
            (delegate* unmanaged<void>)(
                _slots[573] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[573] = nativeContext.LoadFunction(
                        "SDL_OnApplicationDidReceiveMemoryWarning",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidReceiveMemoryWarning() =>
        DllImport.OnApplicationDidReceiveMemoryWarning();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillEnterBackground() =>
        (
            (delegate* unmanaged<void>)(
                _slots[574] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[574] = nativeContext.LoadFunction(
                        "SDL_OnApplicationWillEnterBackground",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterBackground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillEnterBackground() =>
        DllImport.OnApplicationWillEnterBackground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillEnterForeground() =>
        (
            (delegate* unmanaged<void>)(
                _slots[575] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[575] = nativeContext.LoadFunction(
                        "SDL_OnApplicationWillEnterForeground",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillEnterForeground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillEnterForeground() =>
        DllImport.OnApplicationWillEnterForeground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillTerminate() =>
        (
            (delegate* unmanaged<void>)(
                _slots[576] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[576] = nativeContext.LoadFunction(
                        "SDL_OnApplicationWillTerminate",
                        "SDL3"
                    )
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OnApplicationWillTerminate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillTerminate() => DllImport.OnApplicationWillTerminate();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
    ) =>
        (
            (delegate* unmanaged<uint, AudioSpec*, uint>)(
                _slots[577] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[577] = nativeContext.LoadFunction("SDL_OpenAudioDevice", "SDL3")
            )
        )(devid, spec);

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
    ) => DllImport.OpenAudioDevice(devid, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
    )
    {
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (uint)((ISdl)this).OpenAudioDevice(devid, __dsl_spec);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
    ) => DllImport.OpenAudioDevice(devid, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AudioStreamHandle ISdl.OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, AudioSpec*, AudioStreamCallback, void*, AudioStreamHandle>)(
                _slots[578] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[578] = nativeContext.LoadFunction("SDL_OpenAudioDeviceStream", "SDL3")
            )
        )(devid, spec, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AudioStreamHandle OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) => DllImport.OpenAudioDeviceStream(devid, spec, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AudioStreamHandle ISdl.OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (AudioStreamHandle)
                ((ISdl)this).OpenAudioDeviceStream(devid, __dsl_spec, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AudioStreamHandle OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    ) => DllImport.OpenAudioDeviceStream(devid, spec, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraHandle ISdl.OpenCamera(
        [NativeTypeName("SDL_CameraID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
    ) =>
        (
            (delegate* unmanaged<uint, CameraSpec*, CameraHandle>)(
                _slots[579] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[579] = nativeContext.LoadFunction("SDL_OpenCamera", "SDL3")
            )
        )(instance_id, spec);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraHandle OpenCamera(
        [NativeTypeName("SDL_CameraID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
    ) => DllImport.OpenCamera(instance_id, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraHandle ISdl.OpenCamera(
        [NativeTypeName("SDL_CameraID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
    )
    {
        fixed (CameraSpec* __dsl_spec = spec)
        {
            return (CameraHandle)((ISdl)this).OpenCamera(instance_id, __dsl_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenCamera")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraHandle OpenCamera(
        [NativeTypeName("SDL_CameraID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
    ) => DllImport.OpenCamera(instance_id, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, StorageHandle>)(
                _slots[580] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[580] = nativeContext.LoadFunction("SDL_OpenFileStorage", "SDL3")
            )
        )(path);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.OpenFileStorage(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenFileStorage([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (StorageHandle)((ISdl)this).OpenFileStorage(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenFileStorage([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.OpenFileStorage(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadHandle ISdl.OpenGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, GamepadHandle>)(
                _slots[581] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[581] = nativeContext.LoadFunction("SDL_OpenGamepad", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadHandle OpenGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.OpenGamepad(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HapticHandle ISdl.OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, HapticHandle>)(
                _slots[582] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[582] = nativeContext.LoadFunction("SDL_OpenHaptic", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HapticHandle OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        DllImport.OpenHaptic(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HapticHandle ISdl.OpenHapticFromJoystick(JoystickHandle joystick) =>
        (
            (delegate* unmanaged<JoystickHandle, HapticHandle>)(
                _slots[583] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[583] = nativeContext.LoadFunction("SDL_OpenHapticFromJoystick", "SDL3")
            )
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HapticHandle OpenHapticFromJoystick(JoystickHandle joystick) =>
        DllImport.OpenHapticFromJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HapticHandle ISdl.OpenHapticFromMouse() =>
        (
            (delegate* unmanaged<HapticHandle>)(
                _slots[584] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[584] = nativeContext.LoadFunction("SDL_OpenHapticFromMouse", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HapticHandle OpenHapticFromMouse() => DllImport.OpenHapticFromMouse();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<IOStreamInterface*, void*, IOStreamHandle>)(
                _slots[585] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[585] = nativeContext.LoadFunction("SDL_OpenIO", "SDL3")
            )
        )(iface, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
        void* userdata
    ) => DllImport.OpenIO(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStreamHandle ISdl.OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (IOStreamInterface* __dsl_iface = iface)
        {
            return (IOStreamHandle)((ISdl)this).OpenIO(__dsl_iface, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStreamHandle OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
        Ref userdata
    ) => DllImport.OpenIO(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickHandle ISdl.OpenJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, JoystickHandle>)(
                _slots[586] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[586] = nativeContext.LoadFunction("SDL_OpenJoystick", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickHandle OpenJoystick(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.OpenJoystick(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorHandle ISdl.OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SensorHandle>)(
                _slots[587] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[587] = nativeContext.LoadFunction("SDL_OpenSensor", "SDL3")
            )
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorHandle OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        DllImport.OpenSensor(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<StorageInterface*, void*, StorageHandle>)(
                _slots[588] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[588] = nativeContext.LoadFunction("SDL_OpenStorage", "SDL3")
            )
        )(iface, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
        void* userdata
    ) => DllImport.OpenStorage(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (StorageInterface* __dsl_iface = iface)
        {
            return (StorageHandle)((ISdl)this).OpenStorage(__dsl_iface, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
        Ref userdata
    ) => DllImport.OpenStorage(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenTitleStorage(
        [NativeTypeName("const char *")] sbyte* @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<sbyte*, uint, StorageHandle>)(
                _slots[589] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[589] = nativeContext.LoadFunction("SDL_OpenTitleStorage", "SDL3")
            )
        )(@override, props);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenTitleStorage(
        [NativeTypeName("const char *")] sbyte* @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenTitleStorage(@override, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenTitleStorage(
        [NativeTypeName("const char *")] Ref<sbyte> @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (sbyte* __dsl_override = @override)
        {
            return (StorageHandle)((ISdl)this).OpenTitleStorage(__dsl_override, props);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenTitleStorage(
        [NativeTypeName("const char *")] Ref<sbyte> @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenTitleStorage(@override, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.OpenURL([NativeTypeName("const char *")] sbyte* url) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[590] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[590] = nativeContext.LoadFunction("SDL_OpenURL", "SDL3")
            )
        )(url);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte OpenURL([NativeTypeName("const char *")] sbyte* url) =>
        DllImport.OpenURL(url);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
    {
        fixed (sbyte* __dsl_url = url)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).OpenURL(__dsl_url);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> OpenURL([NativeTypeName("const char *")] Ref<sbyte> url) =>
        DllImport.OpenURL(url);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenUserStorage(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, uint, StorageHandle>)(
                _slots[591] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[591] = nativeContext.LoadFunction("SDL_OpenUserStorage", "SDL3")
            )
        )(org, app, props);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenUserStorage(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenUserStorage(org, app, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    StorageHandle ISdl.OpenUserStorage(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (sbyte* __dsl_app = app)
        fixed (sbyte* __dsl_org = org)
        {
            return (StorageHandle)((ISdl)this).OpenUserStorage(__dsl_org, __dsl_app, props);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static StorageHandle OpenUserStorage(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenUserStorage(org, app, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.OutOfMemory() => (MaybeBool<byte>)(byte)((ISdl)this).OutOfMemoryRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> OutOfMemory() => DllImport.OutOfMemory();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.OutOfMemoryRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[592] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[592] = nativeContext.LoadFunction("SDL_OutOfMemory", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_OutOfMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte OutOfMemoryRaw() => DllImport.OutOfMemoryRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (MaybeBool<byte>)(byte)((ISdl)this).PauseAudioDeviceRaw(dev);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PauseAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint dev
    ) => DllImport.PauseAudioDevice(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PauseAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[593] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[593] = nativeContext.LoadFunction("SDL_PauseAudioDevice", "SDL3")
            )
        )(dev);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PauseAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.PauseAudioDeviceRaw(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PauseAudioStreamDevice(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).PauseAudioStreamDeviceRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PauseAudioStreamDevice(AudioStreamHandle stream) =>
        DllImport.PauseAudioStreamDevice(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PauseAudioStreamDeviceRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[594] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[594] = nativeContext.LoadFunction("SDL_PauseAudioStreamDevice", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PauseAudioStreamDeviceRaw(AudioStreamHandle stream) =>
        DllImport.PauseAudioStreamDeviceRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PauseHaptic(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).PauseHapticRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PauseHaptic(HapticHandle haptic) => DllImport.PauseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PauseHapticRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[595] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[595] = nativeContext.LoadFunction("SDL_PauseHaptic", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PauseHapticRaw(HapticHandle haptic) => DllImport.PauseHapticRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PeepEvents(
        Event* events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        (
            (delegate* unmanaged<Event*, int, EventAction, uint, uint, int>)(
                _slots[596] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[596] = nativeContext.LoadFunction("SDL_PeepEvents", "SDL3")
            )
        )(events, numevents, action, minType, maxType);

    [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PeepEvents(
        Event* events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.PeepEvents(events, numevents, action, minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PeepEvents(
        Ref<Event> events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    )
    {
        fixed (Event* __dsl_events = events)
        {
            return (int)((ISdl)this).PeepEvents(__dsl_events, numevents, action, minType, maxType);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PeepEvents(
        Ref<Event> events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.PeepEvents(events, numevents, action, minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PlayHapticRumble(
        HapticHandle haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) => (MaybeBool<byte>)(byte)((ISdl)this).PlayHapticRumbleRaw(haptic, strength, length);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PlayHapticRumble(
        HapticHandle haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) => DllImport.PlayHapticRumble(haptic, strength, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PlayHapticRumbleRaw(
        HapticHandle haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) =>
        (
            (delegate* unmanaged<HapticHandle, float, uint, byte>)(
                _slots[597] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[597] = nativeContext.LoadFunction("SDL_PlayHapticRumble", "SDL3")
            )
        )(haptic, strength, length);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PlayHapticRumbleRaw(
        HapticHandle haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) => DllImport.PlayHapticRumbleRaw(haptic, strength, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PollEvent(Event* @event) =>
        (
            (delegate* unmanaged<Event*, byte>)(
                _slots[598] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[598] = nativeContext.LoadFunction("SDL_PollEvent", "SDL3")
            )
        )(@event);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PollEvent(Event* @event) => DllImport.PollEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PollEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).PollEvent(__dsl_event);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PollEvent(Ref<Event> @event) => DllImport.PollEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PremultiplyAlpha(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        void* dst,
        int dst_pitch,
        [NativeTypeName("bool")] byte linear
    ) =>
        (
            (delegate* unmanaged<
                int,
                int,
                PixelFormat,
                void*,
                int,
                PixelFormat,
                void*,
                int,
                byte,
                byte>)(
                _slots[599] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[599] = nativeContext.LoadFunction("SDL_PremultiplyAlpha", "SDL3")
            )
        )(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PremultiplyAlpha(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormat dst_format,
        void* dst,
        int dst_pitch,
        [NativeTypeName("bool")] byte linear
    ) =>
        DllImport.PremultiplyAlpha(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch,
            linear
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PremultiplyAlpha(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Ref dst,
        int dst_pitch,
        [NativeTypeName("bool")] MaybeBool<byte> linear
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).PremultiplyAlpha(
                        width,
                        height,
                        src_format,
                        __dsl_src,
                        src_pitch,
                        dst_format,
                        __dsl_dst,
                        dst_pitch,
                        (byte)linear
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PremultiplyAlpha(
        int width,
        int height,
        PixelFormat src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormat dst_format,
        Ref dst,
        int dst_pitch,
        [NativeTypeName("bool")] MaybeBool<byte> linear
    ) =>
        DllImport.PremultiplyAlpha(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch,
            linear
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PremultiplySurfaceAlpha(Surface* surface, [NativeTypeName("bool")] byte linear) =>
        (
            (delegate* unmanaged<Surface*, byte, byte>)(
                _slots[600] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[600] = nativeContext.LoadFunction(
                        "SDL_PremultiplySurfaceAlpha",
                        "SDL3"
                    )
            )
        )(surface, linear);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PremultiplySurfaceAlpha(
        Surface* surface,
        [NativeTypeName("bool")] byte linear
    ) => DllImport.PremultiplySurfaceAlpha(surface, linear);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PremultiplySurfaceAlpha(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> linear
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).PremultiplySurfaceAlpha(__dsl_surface, (byte)linear);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplySurfaceAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PremultiplySurfaceAlpha(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> linear
    ) => DllImport.PremultiplySurfaceAlpha(surface, linear);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.PumpEvents() =>
        (
            (delegate* unmanaged<void>)(
                _slots[601] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[601] = nativeContext.LoadFunction("SDL_PumpEvents", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_PumpEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void PumpEvents() => DllImport.PumpEvents();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PushEvent(Event* @event) =>
        (
            (delegate* unmanaged<Event*, byte>)(
                _slots[602] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[602] = nativeContext.LoadFunction("SDL_PushEvent", "SDL3")
            )
        )(@event);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PushEvent(Event* @event) => DllImport.PushEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PushEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).PushEvent(__dsl_event);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PushEvent(Ref<Event> @event) => DllImport.PushEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.PutAudioStreamData(
        AudioStreamHandle stream,
        [NativeTypeName("const void *")] void* buf,
        int len
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, void*, int, byte>)(
                _slots[603] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[603] = nativeContext.LoadFunction("SDL_PutAudioStreamData", "SDL3")
            )
        )(stream, buf, len);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte PutAudioStreamData(
        AudioStreamHandle stream,
        [NativeTypeName("const void *")] void* buf,
        int len
    ) => DllImport.PutAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.PutAudioStreamData(
        AudioStreamHandle stream,
        [NativeTypeName("const void *")] Ref buf,
        int len
    )
    {
        fixed (void* __dsl_buf = buf)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).PutAudioStreamData(stream, __dsl_buf, len);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> PutAudioStreamData(
        AudioStreamHandle stream,
        [NativeTypeName("const void *")] Ref buf,
        int len
    ) => DllImport.PutAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.Quit() =>
        (
            (delegate* unmanaged<void>)(
                _slots[604] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[604] = nativeContext.LoadFunction("SDL_Quit", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_Quit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void Quit() => DllImport.Quit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.QuitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[605] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[605] = nativeContext.LoadFunction("SDL_QuitSubSystem", "SDL3")
            )
        )(flags);

    [NativeFunction("SDL3", EntryPoint = "SDL_QuitSubSystem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QuitSubSystem([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.QuitSubSystem(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RaiseWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RaiseWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RaiseWindow(WindowHandle window) => DllImport.RaiseWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RaiseWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[606] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[606] = nativeContext.LoadFunction("SDL_RaiseWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RaiseWindowRaw(WindowHandle window) => DllImport.RaiseWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.ReadIO(IOStreamHandle context, void* ptr, [NativeTypeName("size_t")] nuint size) =>
        (
            (delegate* unmanaged<IOStreamHandle, void*, nuint, nuint>)(
                _slots[607] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[607] = nativeContext.LoadFunction("SDL_ReadIO", "SDL3")
            )
        )(context, ptr, size);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint ReadIO(
        IOStreamHandle context,
        void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.ReadIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.ReadIO(IOStreamHandle context, Ref ptr, [NativeTypeName("size_t")] nuint size)
    {
        fixed (void* __dsl_ptr = ptr)
        {
            return (nuint)((ISdl)this).ReadIO(context, __dsl_ptr, size);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint ReadIO(
        IOStreamHandle context,
        Ref ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.ReadIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS16BE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, short*, byte>)(
                _slots[608] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[608] = nativeContext.LoadFunction("SDL_ReadS16BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS16BE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
        DllImport.ReadS16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS16BE(
        IOStreamHandle src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    )
    {
        fixed (short* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS16BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS16BE(
        IOStreamHandle src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    ) => DllImport.ReadS16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS16LE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, short*, byte>)(
                _slots[609] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[609] = nativeContext.LoadFunction("SDL_ReadS16LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS16LE(IOStreamHandle src, [NativeTypeName("Sint16 *")] short* value) =>
        DllImport.ReadS16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS16LE(
        IOStreamHandle src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    )
    {
        fixed (short* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS16LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS16LE(
        IOStreamHandle src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    ) => DllImport.ReadS16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS32BE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, int*, byte>)(
                _slots[610] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[610] = nativeContext.LoadFunction("SDL_ReadS32BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS32BE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
        DllImport.ReadS32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS32BE(IOStreamHandle src, [NativeTypeName("Sint32 *")] Ref<int> value)
    {
        fixed (int* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS32BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS32BE(
        IOStreamHandle src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    ) => DllImport.ReadS32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS32LE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, int*, byte>)(
                _slots[611] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[611] = nativeContext.LoadFunction("SDL_ReadS32LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS32LE(IOStreamHandle src, [NativeTypeName("Sint32 *")] int* value) =>
        DllImport.ReadS32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS32LE(IOStreamHandle src, [NativeTypeName("Sint32 *")] Ref<int> value)
    {
        fixed (int* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS32LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS32LE(
        IOStreamHandle src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    ) => DllImport.ReadS32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS64BE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, long*, byte>)(
                _slots[612] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[612] = nativeContext.LoadFunction("SDL_ReadS64BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS64BE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
        DllImport.ReadS64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS64BE(IOStreamHandle src, [NativeTypeName("Sint64 *")] Ref<long> value)
    {
        fixed (long* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS64BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS64BE(
        IOStreamHandle src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    ) => DllImport.ReadS64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS64LE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, long*, byte>)(
                _slots[613] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[613] = nativeContext.LoadFunction("SDL_ReadS64LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS64LE(IOStreamHandle src, [NativeTypeName("Sint64 *")] long* value) =>
        DllImport.ReadS64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS64LE(IOStreamHandle src, [NativeTypeName("Sint64 *")] Ref<long> value)
    {
        fixed (long* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS64LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS64LE(
        IOStreamHandle src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    ) => DllImport.ReadS64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadS8(IOStreamHandle src, [NativeTypeName("Sint8 *")] sbyte* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, sbyte*, byte>)(
                _slots[614] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[614] = nativeContext.LoadFunction("SDL_ReadS8", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadS8(IOStreamHandle src, [NativeTypeName("Sint8 *")] sbyte* value) =>
        DllImport.ReadS8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadS8(IOStreamHandle src, [NativeTypeName("Sint8 *")] Ref<sbyte> value)
    {
        fixed (sbyte* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadS8(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadS8(
        IOStreamHandle src,
        [NativeTypeName("Sint8 *")] Ref<sbyte> value
    ) => DllImport.ReadS8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        void* destination,
        [NativeTypeName("Uint64")] ulong length
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, void*, ulong, byte>)(
                _slots[615] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[615] = nativeContext.LoadFunction("SDL_ReadStorageFile", "SDL3")
            )
        )(storage, path, destination, length);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        void* destination,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.ReadStorageFile(storage, path, destination, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref destination,
        [NativeTypeName("Uint64")] ulong length
    )
    {
        fixed (void* __dsl_destination = destination)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).ReadStorageFile(storage, __dsl_path, __dsl_destination, length);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref destination,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.ReadStorageFile(storage, path, destination, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<Surface*, int, int, byte*, byte*, byte*, byte*, byte>)(
                _slots[616] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[616] = nativeContext.LoadFunction("SDL_ReadSurfacePixel", "SDL3")
            )
        )(surface, x, y, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.ReadSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).ReadSurfacePixel(
                        __dsl_surface,
                        x,
                        y,
                        __dsl_r,
                        __dsl_g,
                        __dsl_b,
                        __dsl_a
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.ReadSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadSurfacePixelFloat(
        Surface* surface,
        int x,
        int y,
        float* r,
        float* g,
        float* b,
        float* a
    ) =>
        (
            (delegate* unmanaged<Surface*, int, int, float*, float*, float*, float*, byte>)(
                _slots[617] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[617] = nativeContext.LoadFunction("SDL_ReadSurfacePixelFloat", "SDL3")
            )
        )(surface, x, y, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadSurfacePixelFloat(
        Surface* surface,
        int x,
        int y,
        float* r,
        float* g,
        float* b,
        float* a
    ) => DllImport.ReadSurfacePixelFloat(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadSurfacePixelFloat(
        Ref<Surface> surface,
        int x,
        int y,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    )
    {
        fixed (float* __dsl_a = a)
        fixed (float* __dsl_b = b)
        fixed (float* __dsl_g = g)
        fixed (float* __dsl_r = r)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).ReadSurfacePixelFloat(
                        __dsl_surface,
                        x,
                        y,
                        __dsl_r,
                        __dsl_g,
                        __dsl_b,
                        __dsl_a
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixelFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadSurfacePixelFloat(
        Ref<Surface> surface,
        int x,
        int y,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    ) => DllImport.ReadSurfacePixelFloat(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU16BE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ushort*, byte>)(
                _slots[618] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[618] = nativeContext.LoadFunction("SDL_ReadU16BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU16BE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
        DllImport.ReadU16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU16BE(
        IOStreamHandle src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    )
    {
        fixed (ushort* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU16BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU16BE(
        IOStreamHandle src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    ) => DllImport.ReadU16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU16LE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ushort*, byte>)(
                _slots[619] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[619] = nativeContext.LoadFunction("SDL_ReadU16LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU16LE(IOStreamHandle src, [NativeTypeName("Uint16 *")] ushort* value) =>
        DllImport.ReadU16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU16LE(
        IOStreamHandle src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    )
    {
        fixed (ushort* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU16LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU16LE(
        IOStreamHandle src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    ) => DllImport.ReadU16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU32BE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, uint*, byte>)(
                _slots[620] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[620] = nativeContext.LoadFunction("SDL_ReadU32BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU32BE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
        DllImport.ReadU32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU32BE(IOStreamHandle src, [NativeTypeName("Uint32 *")] Ref<uint> value)
    {
        fixed (uint* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU32BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU32BE(
        IOStreamHandle src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    ) => DllImport.ReadU32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU32LE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, uint*, byte>)(
                _slots[621] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[621] = nativeContext.LoadFunction("SDL_ReadU32LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU32LE(IOStreamHandle src, [NativeTypeName("Uint32 *")] uint* value) =>
        DllImport.ReadU32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU32LE(IOStreamHandle src, [NativeTypeName("Uint32 *")] Ref<uint> value)
    {
        fixed (uint* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU32LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU32LE(
        IOStreamHandle src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    ) => DllImport.ReadU32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU64BE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ulong*, byte>)(
                _slots[622] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[622] = nativeContext.LoadFunction("SDL_ReadU64BE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU64BE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
        DllImport.ReadU64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU64BE(
        IOStreamHandle src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    )
    {
        fixed (ulong* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU64BE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU64BE(
        IOStreamHandle src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    ) => DllImport.ReadU64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU64LE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ulong*, byte>)(
                _slots[623] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[623] = nativeContext.LoadFunction("SDL_ReadU64LE", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU64LE(IOStreamHandle src, [NativeTypeName("Uint64 *")] ulong* value) =>
        DllImport.ReadU64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU64LE(
        IOStreamHandle src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    )
    {
        fixed (ulong* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU64LE(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU64LE(
        IOStreamHandle src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    ) => DllImport.ReadU64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReadU8(IOStreamHandle src, [NativeTypeName("Uint8 *")] byte* value) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte*, byte>)(
                _slots[624] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[624] = nativeContext.LoadFunction("SDL_ReadU8", "SDL3")
            )
        )(src, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReadU8(IOStreamHandle src, [NativeTypeName("Uint8 *")] byte* value) =>
        DllImport.ReadU8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReadU8(IOStreamHandle src, [NativeTypeName("Uint8 *")] Ref<byte> value)
    {
        fixed (byte* __dsl_value = value)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ReadU8(src, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReadU8(
        IOStreamHandle src,
        [NativeTypeName("Uint8 *")] Ref<byte> value
    ) => DllImport.ReadU8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.RegisterEvents(int numevents) =>
        (
            (delegate* unmanaged<int, uint>)(
                _slots[625] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[625] = nativeContext.LoadFunction("SDL_RegisterEvents", "SDL3")
            )
        )(numevents);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RegisterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint RegisterEvents(int numevents) => DllImport.RegisterEvents(numevents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ReleaseCameraFrame(CameraHandle camera, Surface* frame) =>
        (
            (delegate* unmanaged<CameraHandle, Surface*, void>)(
                _slots[626] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[626] = nativeContext.LoadFunction("SDL_ReleaseCameraFrame", "SDL3")
            )
        )(camera, frame);

    [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ReleaseCameraFrame(CameraHandle camera, Surface* frame) =>
        DllImport.ReleaseCameraFrame(camera, frame);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ReleaseCameraFrame(CameraHandle camera, Ref<Surface> frame)
    {
        fixed (Surface* __dsl_frame = frame)
        {
            ((ISdl)this).ReleaseCameraFrame(camera, __dsl_frame);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ReleaseCameraFrame(CameraHandle camera, Ref<Surface> frame) =>
        DllImport.ReleaseCameraFrame(camera, frame);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ReloadGamepadMappings() =>
        (MaybeBool<byte>)(byte)((ISdl)this).ReloadGamepadMappingsRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ReloadGamepadMappings() => DllImport.ReloadGamepadMappings();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ReloadGamepadMappingsRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[627] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[627] = nativeContext.LoadFunction("SDL_ReloadGamepadMappings", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReloadGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ReloadGamepadMappingsRaw() => DllImport.ReloadGamepadMappingsRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<EventFilter, void*, void>)(
                _slots[628] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[628] = nativeContext.LoadFunction("SDL_RemoveEventWatch", "SDL3")
            )
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) => DllImport.RemoveEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveEventWatch([NativeTypeName("SDL_EventFilter")] EventFilter filter, Ref userdata)
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).RemoveEventWatch(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveEventWatch(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        Ref userdata
    ) => DllImport.RemoveEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<sbyte*, HintCallback, void*, void>)(
                _slots[629] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[629] = nativeContext.LoadFunction("SDL_RemoveHintCallback", "SDL3")
            )
        )(name, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        void* userdata
    ) => DllImport.RemoveHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_name = name)
        {
            ((ISdl)this).RemoveHintCallback(__dsl_name, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")] HintCallback callback,
        Ref userdata
    ) => DllImport.RemoveHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RemovePath([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[630] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[630] = nativeContext.LoadFunction("SDL_RemovePath", "SDL3")
            )
        )(path);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RemovePath([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.RemovePath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RemovePath(__dsl_path);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RemovePath([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.RemovePath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RemoveStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, byte>)(
                _slots[631] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[631] = nativeContext.LoadFunction("SDL_RemoveStoragePath", "SDL3")
            )
        )(storage, path);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RemoveStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path
    ) => DllImport.RemoveStoragePath(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RemoveStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    )
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RemoveStoragePath(storage, __dsl_path);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RemoveStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.RemoveStoragePath(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveSurfaceAlternateImages(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, void>)(
                _slots[632] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[632] = nativeContext.LoadFunction(
                        "SDL_RemoveSurfaceAlternateImages",
                        "SDL3"
                    )
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveSurfaceAlternateImages(Surface* surface) =>
        DllImport.RemoveSurfaceAlternateImages(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.RemoveSurfaceAlternateImages(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            ((ISdl)this).RemoveSurfaceAlternateImages(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void RemoveSurfaceAlternateImages(Ref<Surface> surface) =>
        DllImport.RemoveSurfaceAlternateImages(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RemoveTimerRaw(id);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
        DllImport.RemoveTimer(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[633] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[633] = nativeContext.LoadFunction("SDL_RemoveTimer", "SDL3")
            )
        )(id);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
        DllImport.RemoveTimerRaw(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenamePath(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, byte>)(
                _slots[634] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[634] = nativeContext.LoadFunction("SDL_RenamePath", "SDL3")
            )
        )(oldpath, newpath);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenamePath(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.RenamePath(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenamePath(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenamePath(__dsl_oldpath, __dsl_newpath);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenamePath(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.RenamePath(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenameStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, sbyte*, byte>)(
                _slots[635] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[635] = nativeContext.LoadFunction("SDL_RenameStoragePath", "SDL3")
            )
        )(storage, oldpath, newpath);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenameStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.RenameStoragePath(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenameStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).RenameStoragePath(storage, __dsl_oldpath, __dsl_newpath);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenameStoragePath(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.RenameStoragePath(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderClear(RendererHandle renderer) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RenderClearRaw(renderer);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderClear(RendererHandle renderer) =>
        DllImport.RenderClear(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderClearRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, byte>)(
                _slots[636] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[636] = nativeContext.LoadFunction("SDL_RenderClear", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderClearRaw(RendererHandle renderer) =>
        DllImport.RenderClearRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderClipEnabled(RendererHandle renderer) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RenderClipEnabledRaw(renderer);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderClipEnabled(RendererHandle renderer) =>
        DllImport.RenderClipEnabled(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderClipEnabledRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, byte>)(
                _slots[637] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[637] = nativeContext.LoadFunction("SDL_RenderClipEnabled", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderClipEnabledRaw(RendererHandle renderer) =>
        DllImport.RenderClipEnabledRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderCoordinatesFromWindow(
        RendererHandle renderer,
        float window_x,
        float window_y,
        float* x,
        float* y
    ) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, float*, float*, byte>)(
                _slots[638] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[638] = nativeContext.LoadFunction(
                        "SDL_RenderCoordinatesFromWindow",
                        "SDL3"
                    )
            )
        )(renderer, window_x, window_y, x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderCoordinatesFromWindow(
        RendererHandle renderer,
        float window_x,
        float window_y,
        float* x,
        float* y
    ) => DllImport.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderCoordinatesFromWindow(
        RendererHandle renderer,
        float window_x,
        float window_y,
        Ref<float> x,
        Ref<float> y
    )
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderCoordinatesFromWindow(
                        renderer,
                        window_x,
                        window_y,
                        __dsl_x,
                        __dsl_y
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderCoordinatesFromWindow(
        RendererHandle renderer,
        float window_x,
        float window_y,
        Ref<float> x,
        Ref<float> y
    ) => DllImport.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderCoordinatesToWindow(
        RendererHandle renderer,
        float x,
        float y,
        float* window_x,
        float* window_y
    ) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, float*, float*, byte>)(
                _slots[639] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[639] = nativeContext.LoadFunction(
                        "SDL_RenderCoordinatesToWindow",
                        "SDL3"
                    )
            )
        )(renderer, x, y, window_x, window_y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderCoordinatesToWindow(
        RendererHandle renderer,
        float x,
        float y,
        float* window_x,
        float* window_y
    ) => DllImport.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderCoordinatesToWindow(
        RendererHandle renderer,
        float x,
        float y,
        Ref<float> window_x,
        Ref<float> window_y
    )
    {
        fixed (float* __dsl_window_y = window_y)
        fixed (float* __dsl_window_x = window_x)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderCoordinatesToWindow(
                        renderer,
                        x,
                        y,
                        __dsl_window_x,
                        __dsl_window_y
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderCoordinatesToWindow(
        RendererHandle renderer,
        float x,
        float y,
        Ref<float> window_x,
        Ref<float> window_y
    ) => DllImport.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderDebugText(
        RendererHandle renderer,
        float x,
        float y,
        [NativeTypeName("const char *")] sbyte* str
    ) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, sbyte*, byte>)(
                _slots[640] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[640] = nativeContext.LoadFunction("SDL_RenderDebugText", "SDL3")
            )
        )(renderer, x, y, str);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderDebugText(
        RendererHandle renderer,
        float x,
        float y,
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.RenderDebugText(renderer, x, y, str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderDebugText(
        RendererHandle renderer,
        float x,
        float y,
        [NativeTypeName("const char *")] Ref<sbyte> str
    )
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderDebugText(renderer, x, y, __dsl_str);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderDebugText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderDebugText(
        RendererHandle renderer,
        float x,
        float y,
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.RenderDebugText(renderer, x, y, str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderFillRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FRect*, byte>)(
                _slots[641] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[641] = nativeContext.LoadFunction("SDL_RenderFillRect", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderFillRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) => DllImport.RenderFillRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderFillRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    )
    {
        fixed (FRect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderFillRect(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderFillRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    ) => DllImport.RenderFillRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderFillRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FRect*, int, byte>)(
                _slots[642] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[642] = nativeContext.LoadFunction("SDL_RenderFillRects", "SDL3")
            )
        )(renderer, rects, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderFillRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) => DllImport.RenderFillRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderFillRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    )
    {
        fixed (FRect* __dsl_rects = rects)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).RenderFillRects(renderer, __dsl_rects, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderFillRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    ) => DllImport.RenderFillRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderGeometry(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
        int num_vertices,
        [NativeTypeName("const int *")] int* indices,
        int num_indices
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Texture*, Vertex*, int, int*, int, byte>)(
                _slots[643] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[643] = nativeContext.LoadFunction("SDL_RenderGeometry", "SDL3")
            )
        )(renderer, texture, vertices, num_vertices, indices, num_indices);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderGeometry(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
        int num_vertices,
        [NativeTypeName("const int *")] int* indices,
        int num_indices
    ) => DllImport.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderGeometry(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
        int num_vertices,
        [NativeTypeName("const int *")] Ref<int> indices,
        int num_indices
    )
    {
        fixed (int* __dsl_indices = indices)
        fixed (Vertex* __dsl_vertices = vertices)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderGeometry(
                        renderer,
                        __dsl_texture,
                        __dsl_vertices,
                        num_vertices,
                        __dsl_indices,
                        num_indices
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderGeometry(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
        int num_vertices,
        [NativeTypeName("const int *")] Ref<int> indices,
        int num_indices
    ) => DllImport.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderGeometryRaw(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] FColor* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        (
            (delegate* unmanaged<
                RendererHandle,
                Texture*,
                float*,
                int,
                FColor*,
                int,
                float*,
                int,
                int,
                void*,
                int,
                int,
                byte>)(
                _slots[644] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[644] = nativeContext.LoadFunction("SDL_RenderGeometryRaw", "SDL3")
            )
        )(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderGeometryRaw(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] FColor* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRaw(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderGeometryRaw(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    )
    {
        fixed (void* __dsl_indices = indices)
        fixed (float* __dsl_uv = uv)
        fixed (FColor* __dsl_color = color)
        fixed (float* __dsl_xy = xy)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderGeometryRaw(
                        renderer,
                        __dsl_texture,
                        __dsl_xy,
                        xy_stride,
                        __dsl_color,
                        color_stride,
                        __dsl_uv,
                        uv_stride,
                        num_vertices,
                        __dsl_indices,
                        num_indices,
                        size_indices
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderGeometryRaw(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRaw(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderLine(
        RendererHandle renderer,
        float x1,
        float y1,
        float x2,
        float y2
    ) => (MaybeBool<byte>)(byte)((ISdl)this).RenderLineRaw(renderer, x1, y1, x2, y2);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderLine(
        RendererHandle renderer,
        float x1,
        float y1,
        float x2,
        float y2
    ) => DllImport.RenderLine(renderer, x1, y1, x2, y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderLineRaw(RendererHandle renderer, float x1, float y1, float x2, float y2) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, float, float, byte>)(
                _slots[645] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[645] = nativeContext.LoadFunction("SDL_RenderLine", "SDL3")
            )
        )(renderer, x1, y1, x2, y2);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderLineRaw(
        RendererHandle renderer,
        float x1,
        float y1,
        float x2,
        float y2
    ) => DllImport.RenderLineRaw(renderer, x1, y1, x2, y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderLines(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FPoint*, int, byte>)(
                _slots[646] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[646] = nativeContext.LoadFunction("SDL_RenderLines", "SDL3")
            )
        )(renderer, points, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderLines(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) => DllImport.RenderLines(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderLines(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    )
    {
        fixed (FPoint* __dsl_points = points)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderLines(renderer, __dsl_points, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderLines(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    ) => DllImport.RenderLines(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderPoint(RendererHandle renderer, float x, float y) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RenderPointRaw(renderer, x, y);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderPoint(RendererHandle renderer, float x, float y) =>
        DllImport.RenderPoint(renderer, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderPointRaw(RendererHandle renderer, float x, float y) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, byte>)(
                _slots[647] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[647] = nativeContext.LoadFunction("SDL_RenderPoint", "SDL3")
            )
        )(renderer, x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderPointRaw(RendererHandle renderer, float x, float y) =>
        DllImport.RenderPointRaw(renderer, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderPoints(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FPoint*, int, byte>)(
                _slots[648] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[648] = nativeContext.LoadFunction("SDL_RenderPoints", "SDL3")
            )
        )(renderer, points, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderPoints(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) => DllImport.RenderPoints(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderPoints(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    )
    {
        fixed (FPoint* __dsl_points = points)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderPoints(renderer, __dsl_points, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderPoints(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    ) => DllImport.RenderPoints(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderPresent(RendererHandle renderer) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RenderPresentRaw(renderer);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderPresent(RendererHandle renderer) =>
        DllImport.RenderPresent(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderPresentRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, byte>)(
                _slots[649] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[649] = nativeContext.LoadFunction("SDL_RenderPresent", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderPresentRaw(RendererHandle renderer) =>
        DllImport.RenderPresentRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.RenderReadPixels(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, Surface*>)(
                _slots[650] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[650] = nativeContext.LoadFunction("SDL_RenderReadPixels", "SDL3")
            )
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* RenderReadPixels(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.RenderReadPixels(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.RenderReadPixels(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (Surface*)((ISdl)this).RenderReadPixels(renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> RenderReadPixels(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.RenderReadPixels(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FRect*, byte>)(
                _slots[651] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[651] = nativeContext.LoadFunction("SDL_RenderRect", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) => DllImport.RenderRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    )
    {
        fixed (FRect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderRect(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    ) => DllImport.RenderRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) =>
        (
            (delegate* unmanaged<RendererHandle, FRect*, int, byte>)(
                _slots[652] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[652] = nativeContext.LoadFunction("SDL_RenderRects", "SDL3")
            )
        )(renderer, rects, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) => DllImport.RenderRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    )
    {
        fixed (FRect* __dsl_rects = rects)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).RenderRects(renderer, __dsl_rects, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderRects(
        RendererHandle renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    ) => DllImport.RenderRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderTexture(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Texture*, FRect*, FRect*, byte>)(
                _slots[653] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[653] = nativeContext.LoadFunction("SDL_RenderTexture", "SDL3")
            )
        )(renderer, texture, srcrect, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderTexture(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) => DllImport.RenderTexture(renderer, texture, srcrect, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderTexture(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    )
    {
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderTexture(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderTexture(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    ) => DllImport.RenderTexture(renderer, texture, srcrect, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderTexture9Grid(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        float left_width,
        float right_width,
        float top_height,
        float bottom_height,
        float scale,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) =>
        (
            (delegate* unmanaged<
                RendererHandle,
                Texture*,
                FRect*,
                float,
                float,
                float,
                float,
                float,
                FRect*,
                byte>)(
                _slots[654] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[654] = nativeContext.LoadFunction("SDL_RenderTexture9Grid", "SDL3")
            )
        )(
            renderer,
            texture,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            dstrect
        );

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderTexture9Grid(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        float left_width,
        float right_width,
        float top_height,
        float bottom_height,
        float scale,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) =>
        DllImport.RenderTexture9Grid(
            renderer,
            texture,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            dstrect
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderTexture9Grid(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        float left_width,
        float right_width,
        float top_height,
        float bottom_height,
        float scale,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    )
    {
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderTexture9Grid(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        left_width,
                        right_width,
                        top_height,
                        bottom_height,
                        scale,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture9Grid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderTexture9Grid(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        float left_width,
        float right_width,
        float top_height,
        float bottom_height,
        float scale,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    ) =>
        DllImport.RenderTexture9Grid(
            renderer,
            texture,
            srcrect,
            left_width,
            right_width,
            top_height,
            bottom_height,
            scale,
            dstrect
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderTextureRotated(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
        double angle,
        [NativeTypeName("const SDL_FPoint *")] FPoint* center,
        FlipMode flip
    ) =>
        (
            (delegate* unmanaged<
                RendererHandle,
                Texture*,
                FRect*,
                FRect*,
                double,
                FPoint*,
                FlipMode,
                byte>)(
                _slots[655] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[655] = nativeContext.LoadFunction("SDL_RenderTextureRotated", "SDL3")
            )
        )(renderer, texture, srcrect, dstrect, angle, center, flip);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderTextureRotated(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
        double angle,
        [NativeTypeName("const SDL_FPoint *")] FPoint* center,
        FlipMode flip
    ) => DllImport.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderTextureRotated(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
        double angle,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
        FlipMode flip
    )
    {
        fixed (FPoint* __dsl_center = center)
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderTextureRotated(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        __dsl_dstrect,
                        angle,
                        __dsl_center,
                        flip
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderTextureRotated(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
        double angle,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
        FlipMode flip
    ) => DllImport.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderTextureTiled(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        float scale,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Texture*, FRect*, float, FRect*, byte>)(
                _slots[656] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[656] = nativeContext.LoadFunction("SDL_RenderTextureTiled", "SDL3")
            )
        )(renderer, texture, srcrect, scale, dstrect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderTextureTiled(
        RendererHandle renderer,
        Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        float scale,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) => DllImport.RenderTextureTiled(renderer, texture, srcrect, scale, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderTextureTiled(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        float scale,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    )
    {
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).RenderTextureTiled(
                        renderer,
                        __dsl_texture,
                        __dsl_srcrect,
                        scale,
                        __dsl_dstrect
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureTiled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderTextureTiled(
        RendererHandle renderer,
        Ref<Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        float scale,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    ) => DllImport.RenderTextureTiled(renderer, texture, srcrect, scale, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RenderViewportSet(RendererHandle renderer) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RenderViewportSetRaw(renderer);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RenderViewportSet(RendererHandle renderer) =>
        DllImport.RenderViewportSet(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RenderViewportSetRaw(RendererHandle renderer) =>
        (
            (delegate* unmanaged<RendererHandle, byte>)(
                _slots[657] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[657] = nativeContext.LoadFunction("SDL_RenderViewportSet", "SDL3")
            )
        )(renderer);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RenderViewportSetRaw(RendererHandle renderer) =>
        DllImport.RenderViewportSetRaw(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertState ISdl.ReportAssertion(
        AssertData* data,
        [NativeTypeName("const char *")] sbyte* func,
        [NativeTypeName("const char *")] sbyte* file,
        int line
    ) =>
        (
            (delegate* unmanaged<AssertData*, sbyte*, sbyte*, int, AssertState>)(
                _slots[658] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[658] = nativeContext.LoadFunction("SDL_ReportAssertion", "SDL3")
            )
        )(data, func, file, line);

    [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertState ReportAssertion(
        AssertData* data,
        [NativeTypeName("const char *")] sbyte* func,
        [NativeTypeName("const char *")] sbyte* file,
        int line
    ) => DllImport.ReportAssertion(data, func, file, line);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertState ISdl.ReportAssertion(
        Ref<AssertData> data,
        [NativeTypeName("const char *")] Ref<sbyte> func,
        [NativeTypeName("const char *")] Ref<sbyte> file,
        int line
    )
    {
        fixed (sbyte* __dsl_file = file)
        fixed (sbyte* __dsl_func = func)
        fixed (AssertData* __dsl_data = data)
        {
            return (AssertState)
                ((ISdl)this).ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertState ReportAssertion(
        Ref<AssertData> data,
        [NativeTypeName("const char *")] Ref<sbyte> func,
        [NativeTypeName("const char *")] Ref<sbyte> file,
        int line
    ) => DllImport.ReportAssertion(data, func, file, line);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetAssertionReport() =>
        (
            (delegate* unmanaged<void>)(
                _slots[659] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[659] = nativeContext.LoadFunction("SDL_ResetAssertionReport", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_ResetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetAssertionReport() => DllImport.ResetAssertionReport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ResetHint([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[660] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[660] = nativeContext.LoadFunction("SDL_ResetHint", "SDL3")
            )
        )(name);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ResetHint([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.ResetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ResetHint(__dsl_name);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.ResetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetHints() =>
        (
            (delegate* unmanaged<void>)(
                _slots[661] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[661] = nativeContext.LoadFunction("SDL_ResetHints", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_ResetHints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetHints() => DllImport.ResetHints();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetKeyboard() =>
        (
            (delegate* unmanaged<void>)(
                _slots[662] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[662] = nativeContext.LoadFunction("SDL_ResetKeyboard", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_ResetKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetKeyboard() => DllImport.ResetKeyboard();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetLogPriorities() =>
        (
            (delegate* unmanaged<void>)(
                _slots[663] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[663] = nativeContext.LoadFunction("SDL_ResetLogPriorities", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_ResetLogPriorities")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetLogPriorities() => DllImport.ResetLogPriorities();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RestoreWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).RestoreWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RestoreWindow(WindowHandle window) =>
        DllImport.RestoreWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RestoreWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[664] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[664] = nativeContext.LoadFunction("SDL_RestoreWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RestoreWindowRaw(WindowHandle window) => DllImport.RestoreWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ResumeAudioDeviceRaw(dev);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ResumeAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint dev
    ) => DllImport.ResumeAudioDevice(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ResumeAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (
            (delegate* unmanaged<uint, byte>)(
                _slots[665] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[665] = nativeContext.LoadFunction("SDL_ResumeAudioDevice", "SDL3")
            )
        )(dev);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ResumeAudioDeviceRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.ResumeAudioDeviceRaw(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ResumeAudioStreamDevice(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ResumeAudioStreamDeviceRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ResumeAudioStreamDevice(AudioStreamHandle stream) =>
        DllImport.ResumeAudioStreamDevice(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ResumeAudioStreamDeviceRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[666] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[666] = nativeContext.LoadFunction(
                        "SDL_ResumeAudioStreamDevice",
                        "SDL3"
                    )
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ResumeAudioStreamDeviceRaw(AudioStreamHandle stream) =>
        DllImport.ResumeAudioStreamDeviceRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ResumeHaptic(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ResumeHapticRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ResumeHaptic(HapticHandle haptic) =>
        DllImport.ResumeHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ResumeHapticRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[667] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[667] = nativeContext.LoadFunction("SDL_ResumeHaptic", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ResumeHapticRaw(HapticHandle haptic) => DllImport.ResumeHapticRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RumbleGamepad(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).RumbleGamepadRaw(
                    gamepad,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RumbleGamepad(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RumbleGamepadRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort, ushort, uint, byte>)(
                _slots[668] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[668] = nativeContext.LoadFunction("SDL_RumbleGamepad", "SDL3")
            )
        )(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RumbleGamepadRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        DllImport.RumbleGamepadRaw(
            gamepad,
            low_frequency_rumble,
            high_frequency_rumble,
            duration_ms
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RumbleGamepadTriggers(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).RumbleGamepadTriggersRaw(
                    gamepad,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RumbleGamepadTriggers(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RumbleGamepadTriggersRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, ushort, ushort, uint, byte>)(
                _slots[669] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[669] = nativeContext.LoadFunction("SDL_RumbleGamepadTriggers", "SDL3")
            )
        )(gamepad, left_rumble, right_rumble, duration_ms);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RumbleGamepadTriggersRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepadTriggersRaw(gamepad, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RumbleJoystick(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).RumbleJoystickRaw(
                    joystick,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RumbleJoystick(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        DllImport.RumbleJoystick(
            joystick,
            low_frequency_rumble,
            high_frequency_rumble,
            duration_ms
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RumbleJoystickRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort, ushort, uint, byte>)(
                _slots[670] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[670] = nativeContext.LoadFunction("SDL_RumbleJoystick", "SDL3")
            )
        )(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RumbleJoystickRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        DllImport.RumbleJoystickRaw(
            joystick,
            low_frequency_rumble,
            high_frequency_rumble,
            duration_ms
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RumbleJoystickTriggers(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).RumbleJoystickTriggersRaw(
                    joystick,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RumbleJoystickTriggers(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RumbleJoystickTriggersRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, ushort, ushort, uint, byte>)(
                _slots[671] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[671] = nativeContext.LoadFunction("SDL_RumbleJoystickTriggers", "SDL3")
            )
        )(joystick, left_rumble, right_rumble, duration_ms);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RumbleJoystickTriggersRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleJoystickTriggersRaw(joystick, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.RunHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) => (MaybeBool<byte>)(byte)((ISdl)this).RunHapticEffectRaw(haptic, effect, iterations);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> RunHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) => DllImport.RunHapticEffect(haptic, effect, iterations);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.RunHapticEffectRaw(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) =>
        (
            (delegate* unmanaged<HapticHandle, int, uint, byte>)(
                _slots[672] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[672] = nativeContext.LoadFunction("SDL_RunHapticEffect", "SDL3")
            )
        )(haptic, effect, iterations);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte RunHapticEffectRaw(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) => DllImport.RunHapticEffectRaw(haptic, effect, iterations);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
        (
            (delegate* unmanaged<Surface*, sbyte*, byte>)(
                _slots[673] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[673] = nativeContext.LoadFunction("SDL_SaveBMP", "SDL3")
            )
        )(surface, file);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
        DllImport.SaveBMP(surface, file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SaveBMP(
        Ref<Surface> surface,
        [NativeTypeName("const char *")] Ref<sbyte> file
    )
    {
        fixed (sbyte* __dsl_file = file)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SaveBMP(__dsl_surface, __dsl_file);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SaveBMP(
        Ref<Surface> surface,
        [NativeTypeName("const char *")] Ref<sbyte> file
    ) => DllImport.SaveBMP(surface, file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SaveBMPIO(
        Surface* surface,
        IOStreamHandle dst,
        [NativeTypeName("bool")] byte closeio
    ) =>
        (
            (delegate* unmanaged<Surface*, IOStreamHandle, byte, byte>)(
                _slots[674] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[674] = nativeContext.LoadFunction("SDL_SaveBMP_IO", "SDL3")
            )
        )(surface, dst, closeio);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SaveBMPIO(
        Surface* surface,
        IOStreamHandle dst,
        [NativeTypeName("bool")] byte closeio
    ) => DllImport.SaveBMPIO(surface, dst, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SaveBMPIO(
        Ref<Surface> surface,
        IOStreamHandle dst,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SaveBMPIO(__dsl_surface, dst, (byte)closeio);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SaveBMPIO(
        Ref<Surface> surface,
        IOStreamHandle dst,
        [NativeTypeName("bool")] MaybeBool<byte> closeio
    ) => DllImport.SaveBMPIO(surface, dst, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ScaleSurface(Surface* surface, int width, int height, ScaleMode scaleMode) =>
        (
            (delegate* unmanaged<Surface*, int, int, ScaleMode, Surface*>)(
                _slots[675] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[675] = nativeContext.LoadFunction("SDL_ScaleSurface", "SDL3")
            )
        )(surface, width, height, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ScaleSurface(
        Surface* surface,
        int width,
        int height,
        ScaleMode scaleMode
    ) => DllImport.ScaleSurface(surface, width, height, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ScaleSurface(Ref<Surface> surface, int width, int height, ScaleMode scaleMode)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).ScaleSurface(__dsl_surface, width, height, scaleMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScaleSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ScaleSurface(
        Ref<Surface> surface,
        int width,
        int height,
        ScaleMode scaleMode
    ) => DllImport.ScaleSurface(surface, width, height, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ScreenKeyboardShown(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ScreenKeyboardShownRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ScreenKeyboardShown(WindowHandle window) =>
        DllImport.ScreenKeyboardShown(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ScreenKeyboardShownRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[676] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[676] = nativeContext.LoadFunction("SDL_ScreenKeyboardShown", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ScreenKeyboardShownRaw(WindowHandle window) =>
        DllImport.ScreenKeyboardShownRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ScreenSaverEnabled() =>
        (MaybeBool<byte>)(byte)((ISdl)this).ScreenSaverEnabledRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ScreenSaverEnabled() => DllImport.ScreenSaverEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ScreenSaverEnabledRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[677] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[677] = nativeContext.LoadFunction("SDL_ScreenSaverEnabled", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ScreenSaverEnabledRaw() => DllImport.ScreenSaverEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.SeekIO(
        IOStreamHandle context,
        [NativeTypeName("Sint64")] long offset,
        IOWhence whence
    ) =>
        (
            (delegate* unmanaged<IOStreamHandle, long, IOWhence, long>)(
                _slots[678] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[678] = nativeContext.LoadFunction("SDL_SeekIO", "SDL3")
            )
        )(context, offset, whence);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long SeekIO(
        IOStreamHandle context,
        [NativeTypeName("Sint64")] long offset,
        IOWhence whence
    ) => DllImport.SeekIO(context, offset, whence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SendGamepadEffect(
        GamepadHandle gamepad,
        [NativeTypeName("const void *")] void* data,
        int size
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, void*, int, byte>)(
                _slots[679] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[679] = nativeContext.LoadFunction("SDL_SendGamepadEffect", "SDL3")
            )
        )(gamepad, data, size);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SendGamepadEffect(
        GamepadHandle gamepad,
        [NativeTypeName("const void *")] void* data,
        int size
    ) => DllImport.SendGamepadEffect(gamepad, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SendGamepadEffect(
        GamepadHandle gamepad,
        [NativeTypeName("const void *")] Ref data,
        int size
    )
    {
        fixed (void* __dsl_data = data)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SendGamepadEffect(gamepad, __dsl_data, size);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SendGamepadEffect(
        GamepadHandle gamepad,
        [NativeTypeName("const void *")] Ref data,
        int size
    ) => DllImport.SendGamepadEffect(gamepad, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SendJoystickEffect(
        JoystickHandle joystick,
        [NativeTypeName("const void *")] void* data,
        int size
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, void*, int, byte>)(
                _slots[680] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[680] = nativeContext.LoadFunction("SDL_SendJoystickEffect", "SDL3")
            )
        )(joystick, data, size);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SendJoystickEffect(
        JoystickHandle joystick,
        [NativeTypeName("const void *")] void* data,
        int size
    ) => DllImport.SendJoystickEffect(joystick, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SendJoystickEffect(
        JoystickHandle joystick,
        [NativeTypeName("const void *")] Ref data,
        int size
    )
    {
        fixed (void* __dsl_data = data)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SendJoystickEffect(joystick, __dsl_data, size);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SendJoystickEffect(
        JoystickHandle joystick,
        [NativeTypeName("const void *")] Ref data,
        int size
    ) => DllImport.SendJoystickEffect(joystick, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SendJoystickVirtualSensorData(
        JoystickHandle joystick,
        SensorType type,
        [NativeTypeName("Uint64")] ulong sensor_timestamp,
        [NativeTypeName("const float *")] float* data,
        int num_values
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, SensorType, ulong, float*, int, byte>)(
                _slots[681] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[681] = nativeContext.LoadFunction(
                        "SDL_SendJoystickVirtualSensorData",
                        "SDL3"
                    )
            )
        )(joystick, type, sensor_timestamp, data, num_values);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SendJoystickVirtualSensorData(
        JoystickHandle joystick,
        SensorType type,
        [NativeTypeName("Uint64")] ulong sensor_timestamp,
        [NativeTypeName("const float *")] float* data,
        int num_values
    ) =>
        DllImport.SendJoystickVirtualSensorData(joystick, type, sensor_timestamp, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SendJoystickVirtualSensorData(
        JoystickHandle joystick,
        SensorType type,
        [NativeTypeName("Uint64")] ulong sensor_timestamp,
        [NativeTypeName("const float *")] Ref<float> data,
        int num_values
    )
    {
        fixed (float* __dsl_data = data)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).SendJoystickVirtualSensorData(
                        joystick,
                        type,
                        sensor_timestamp,
                        __dsl_data,
                        num_values
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickVirtualSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SendJoystickVirtualSensorData(
        JoystickHandle joystick,
        SensorType type,
        [NativeTypeName("Uint64")] ulong sensor_timestamp,
        [NativeTypeName("const float *")] Ref<float> data,
        int num_values
    ) =>
        DllImport.SendJoystickVirtualSensorData(joystick, type, sensor_timestamp, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAppMetadata(
        [NativeTypeName("const char *")] sbyte* appname,
        [NativeTypeName("const char *")] sbyte* appversion,
        [NativeTypeName("const char *")] sbyte* appidentifier
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, sbyte*, byte>)(
                _slots[682] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[682] = nativeContext.LoadFunction("SDL_SetAppMetadata", "SDL3")
            )
        )(appname, appversion, appidentifier);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAppMetadata(
        [NativeTypeName("const char *")] sbyte* appname,
        [NativeTypeName("const char *")] sbyte* appversion,
        [NativeTypeName("const char *")] sbyte* appidentifier
    ) => DllImport.SetAppMetadata(appname, appversion, appidentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAppMetadata(
        [NativeTypeName("const char *")] Ref<sbyte> appname,
        [NativeTypeName("const char *")] Ref<sbyte> appversion,
        [NativeTypeName("const char *")] Ref<sbyte> appidentifier
    )
    {
        fixed (sbyte* __dsl_appidentifier = appidentifier)
        fixed (sbyte* __dsl_appversion = appversion)
        fixed (sbyte* __dsl_appname = appname)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).SetAppMetadata(
                        __dsl_appname,
                        __dsl_appversion,
                        __dsl_appidentifier
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadata")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAppMetadata(
        [NativeTypeName("const char *")] Ref<sbyte> appname,
        [NativeTypeName("const char *")] Ref<sbyte> appversion,
        [NativeTypeName("const char *")] Ref<sbyte> appidentifier
    ) => DllImport.SetAppMetadata(appname, appversion, appidentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAppMetadataProperty(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, byte>)(
                _slots[683] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[683] = nativeContext.LoadFunction("SDL_SetAppMetadataProperty", "SDL3")
            )
        )(name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAppMetadataProperty(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) => DllImport.SetAppMetadataProperty(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAppMetadataProperty(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAppMetadataProperty(__dsl_name, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAppMetadataProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAppMetadataProperty(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    ) => DllImport.SetAppMetadataProperty(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<AssertionHandler, void*, void>)(
                _slots[684] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[684] = nativeContext.LoadFunction("SDL_SetAssertionHandler", "SDL3")
            )
        )(handler, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
        void* userdata
    ) => DllImport.SetAssertionHandler(handler, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetAssertionHandler(handler, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")] AssertionHandler handler,
        Ref userdata
    ) => DllImport.SetAssertionHandler(handler, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAtomicInt(AtomicInt* a, int v) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int>)(
                _slots[685] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[685] = nativeContext.LoadFunction("SDL_SetAtomicInt", "SDL3")
            )
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAtomicInt(AtomicInt* a, int v) => DllImport.SetAtomicInt(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAtomicInt(Ref<AtomicInt> a, int v)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).SetAtomicInt(__dsl_a, v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicInt")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAtomicInt(Ref<AtomicInt> a, int v) => DllImport.SetAtomicInt(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.SetAtomicPointer(void** a, void* v) =>
        (
            (delegate* unmanaged<void**, void*, void*>)(
                _slots[686] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[686] = nativeContext.LoadFunction("SDL_SetAtomicPointer", "SDL3")
            )
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* SetAtomicPointer(void** a, void* v) => DllImport.SetAtomicPointer(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.SetAtomicPointer(Ref2D a, Ref v)
    {
        fixed (void* __dsl_v = v)
        fixed (void** __dsl_a = a)
        {
            return (void*)((ISdl)this).SetAtomicPointer(__dsl_a, __dsl_v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr SetAtomicPointer(Ref2D a, Ref v) => DllImport.SetAtomicPointer(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.SetAtomicU32(AtomicU32* a, [NativeTypeName("Uint32")] uint v) =>
        (
            (delegate* unmanaged<AtomicU32*, uint, uint>)(
                _slots[687] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[687] = nativeContext.LoadFunction("SDL_SetAtomicU32", "SDL3")
            )
        )(a, v);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint SetAtomicU32(AtomicU32* a, [NativeTypeName("Uint32")] uint v) =>
        DllImport.SetAtomicU32(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.SetAtomicU32(Ref<AtomicU32> a, [NativeTypeName("Uint32")] uint v)
    {
        fixed (AtomicU32* __dsl_a = a)
        {
            return (uint)((ISdl)this).SetAtomicU32(__dsl_a, v);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAtomicU32")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint SetAtomicU32(Ref<AtomicU32> a, [NativeTypeName("Uint32")] uint v) =>
        DllImport.SetAtomicU32(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioDeviceGain(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        float gain
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetAudioDeviceGainRaw(devid, gain);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioDeviceGain(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        float gain
    ) => DllImport.SetAudioDeviceGain(devid, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioDeviceGainRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid, float gain) =>
        (
            (delegate* unmanaged<uint, float, byte>)(
                _slots[688] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[688] = nativeContext.LoadFunction("SDL_SetAudioDeviceGain", "SDL3")
            )
        )(devid, gain);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioDeviceGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioDeviceGainRaw(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        float gain
    ) => DllImport.SetAudioDeviceGainRaw(devid, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, AudioPostmixCallback, void*, byte>)(
                _slots[689] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[689] = nativeContext.LoadFunction(
                        "SDL_SetAudioPostmixCallback",
                        "SDL3"
                    )
            )
        )(devid, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
        void* userdata
    ) => DllImport.SetAudioPostmixCallback(devid, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioPostmixCallback(devid, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")] AudioPostmixCallback callback,
        Ref userdata
    ) => DllImport.SetAudioPostmixCallback(devid, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamFormat(
        AudioStreamHandle stream,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, AudioSpec*, AudioSpec*, byte>)(
                _slots[690] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[690] = nativeContext.LoadFunction("SDL_SetAudioStreamFormat", "SDL3")
            )
        )(stream, src_spec, dst_spec);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamFormat(
        AudioStreamHandle stream,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) => DllImport.SetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamFormat(
        AudioStreamHandle stream,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioStreamFormat(stream, __dsl_src_spec, __dsl_dst_spec);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamFormat(
        AudioStreamHandle stream,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    ) => DllImport.SetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamFrequencyRatio(AudioStreamHandle stream, float ratio) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetAudioStreamFrequencyRatioRaw(stream, ratio);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamFrequencyRatio(
        AudioStreamHandle stream,
        float ratio
    ) => DllImport.SetAudioStreamFrequencyRatio(stream, ratio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamFrequencyRatioRaw(AudioStreamHandle stream, float ratio) =>
        (
            (delegate* unmanaged<AudioStreamHandle, float, byte>)(
                _slots[691] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[691] = nativeContext.LoadFunction(
                        "SDL_SetAudioStreamFrequencyRatio",
                        "SDL3"
                    )
            )
        )(stream, ratio);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamFrequencyRatioRaw(AudioStreamHandle stream, float ratio) =>
        DllImport.SetAudioStreamFrequencyRatioRaw(stream, ratio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamGain(AudioStreamHandle stream, float gain) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetAudioStreamGainRaw(stream, gain);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamGain(AudioStreamHandle stream, float gain) =>
        DllImport.SetAudioStreamGain(stream, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamGainRaw(AudioStreamHandle stream, float gain) =>
        (
            (delegate* unmanaged<AudioStreamHandle, float, byte>)(
                _slots[692] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[692] = nativeContext.LoadFunction("SDL_SetAudioStreamGain", "SDL3")
            )
        )(stream, gain);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamGainRaw(AudioStreamHandle stream, float gain) =>
        DllImport.SetAudioStreamGainRaw(stream, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamGetCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, AudioStreamCallback, void*, byte>)(
                _slots[693] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[693] = nativeContext.LoadFunction(
                        "SDL_SetAudioStreamGetCallback",
                        "SDL3"
                    )
            )
        )(stream, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamGetCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) => DllImport.SetAudioStreamGetCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamGetCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioStreamGetCallback(stream, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamGetCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    ) => DllImport.SetAudioStreamGetCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamInputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] int* chmap,
        int count
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int*, int, byte>)(
                _slots[694] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[694] = nativeContext.LoadFunction(
                        "SDL_SetAudioStreamInputChannelMap",
                        "SDL3"
                    )
            )
        )(stream, chmap, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamInputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] int* chmap,
        int count
    ) => DllImport.SetAudioStreamInputChannelMap(stream, chmap, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamInputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] Ref<int> chmap,
        int count
    )
    {
        fixed (int* __dsl_chmap = chmap)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioStreamInputChannelMap(stream, __dsl_chmap, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamInputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] Ref<int> chmap,
        int count
    ) => DllImport.SetAudioStreamInputChannelMap(stream, chmap, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamOutputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] int* chmap,
        int count
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, int*, int, byte>)(
                _slots[695] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[695] = nativeContext.LoadFunction(
                        "SDL_SetAudioStreamOutputChannelMap",
                        "SDL3"
                    )
            )
        )(stream, chmap, count);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamOutputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] int* chmap,
        int count
    ) => DllImport.SetAudioStreamOutputChannelMap(stream, chmap, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamOutputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] Ref<int> chmap,
        int count
    )
    {
        fixed (int* __dsl_chmap = chmap)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioStreamOutputChannelMap(stream, __dsl_chmap, count);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamOutputChannelMap(
        AudioStreamHandle stream,
        [NativeTypeName("const int *")] Ref<int> chmap,
        int count
    ) => DllImport.SetAudioStreamOutputChannelMap(stream, chmap, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetAudioStreamPutCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<AudioStreamHandle, AudioStreamCallback, void*, byte>)(
                _slots[696] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[696] = nativeContext.LoadFunction(
                        "SDL_SetAudioStreamPutCallback",
                        "SDL3"
                    )
            )
        )(stream, callback, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetAudioStreamPutCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        void* userdata
    ) => DllImport.SetAudioStreamPutCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetAudioStreamPutCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetAudioStreamPutCallback(stream, callback, __dsl_userdata);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetAudioStreamPutCallback(
        AudioStreamHandle stream,
        [NativeTypeName("SDL_AudioStreamCallback")] AudioStreamCallback callback,
        Ref userdata
    ) => DllImport.SetAudioStreamPutCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, byte, byte>)(
                _slots[697] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[697] = nativeContext.LoadFunction("SDL_SetBooleanProperty", "SDL3")
            )
        )(props, name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("bool")] byte value
    ) => DllImport.SetBooleanProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetBooleanProperty(props, __dsl_name, (byte)value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("bool")] MaybeBool<byte> value
    ) => DllImport.SetBooleanProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
        void* userdata,
        [NativeTypeName("const char **")] sbyte** mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) =>
        (
            (delegate* unmanaged<
                ClipboardDataCallback,
                ClipboardCleanupCallback,
                void*,
                sbyte**,
                nuint,
                byte>)(
                _slots[698] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[698] = nativeContext.LoadFunction("SDL_SetClipboardData", "SDL3")
            )
        )(callback, cleanup, userdata, mime_types, num_mime_types);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
        void* userdata,
        [NativeTypeName("const char **")] sbyte** mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) => DllImport.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
        Ref userdata,
        [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    )
    {
        fixed (sbyte** __dsl_mime_types = mime_types)
        fixed (void* __dsl_userdata = userdata)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).SetClipboardData(
                        callback,
                        cleanup,
                        __dsl_userdata,
                        __dsl_mime_types,
                        num_mime_types
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")] ClipboardDataCallback callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] ClipboardCleanupCallback cleanup,
        Ref userdata,
        [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) => DllImport.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[699] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[699] = nativeContext.LoadFunction("SDL_SetClipboardText", "SDL3")
            )
        )(text);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
        DllImport.SetClipboardText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text)
    {
        fixed (sbyte* __dsl_text = text)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetClipboardText(__dsl_text);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetClipboardText(
        [NativeTypeName("const char *")] Ref<sbyte> text
    ) => DllImport.SetClipboardText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetCurrentThreadPriority(ThreadPriority priority) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetCurrentThreadPriorityRaw(priority);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetCurrentThreadPriority(ThreadPriority priority) =>
        DllImport.SetCurrentThreadPriority(priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetCurrentThreadPriorityRaw(ThreadPriority priority) =>
        (
            (delegate* unmanaged<ThreadPriority, byte>)(
                _slots[700] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[700] = nativeContext.LoadFunction(
                        "SDL_SetCurrentThreadPriority",
                        "SDL3"
                    )
            )
        )(priority);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetCurrentThreadPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetCurrentThreadPriorityRaw(ThreadPriority priority) =>
        DllImport.SetCurrentThreadPriorityRaw(priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetCursor(CursorHandle cursor) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetCursorRaw(cursor);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetCursor(CursorHandle cursor) => DllImport.SetCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetCursorRaw(CursorHandle cursor) =>
        (
            (delegate* unmanaged<CursorHandle, byte>)(
                _slots[701] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[701] = nativeContext.LoadFunction("SDL_SetCursor", "SDL3")
            )
        )(cursor);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetCursorRaw(CursorHandle cursor) => DllImport.SetCursorRaw(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetErrorV(
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, byte>)(
                _slots[702] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[702] = nativeContext.LoadFunction("SDL_SetErrorV", "SDL3")
            )
        )(fmt, ap);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetErrorV(
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) => DllImport.SetErrorV(fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetErrorV(
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    )
    {
        fixed (sbyte* __dsl_ap = ap)
        fixed (sbyte* __dsl_fmt = fmt)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetErrorV(__dsl_fmt, __dsl_ap);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetErrorV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetErrorV(
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    ) => DllImport.SetErrorV(fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("bool")] byte enabled
    ) =>
        (
            (delegate* unmanaged<uint, byte, void>)(
                _slots[703] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[703] = nativeContext.LoadFunction("SDL_SetEventEnabled", "SDL3")
            )
        )(type, enabled);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("bool")] byte enabled
    ) => DllImport.SetEventEnabled(type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => ((ISdl)this).SetEventEnabled(type, (byte)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => DllImport.SetEventEnabled(type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<EventFilter, void*, void>)(
                _slots[704] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[704] = nativeContext.LoadFunction("SDL_SetEventFilter", "SDL3")
            )
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        void* userdata
    ) => DllImport.SetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventFilter([NativeTypeName("SDL_EventFilter")] EventFilter filter, Ref userdata)
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetEventFilter(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] EventFilter filter,
        Ref userdata
    ) => DllImport.SetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, float, byte>)(
                _slots[705] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[705] = nativeContext.LoadFunction("SDL_SetFloatProperty", "SDL3")
            )
        )(props, name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float value
    ) => DllImport.SetFloatProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetFloatProperty(props, __dsl_name, value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float value
    ) => DllImport.SetFloatProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetGamepadEventsEnabled([NativeTypeName("bool")] byte enabled) =>
        (
            (delegate* unmanaged<byte, void>)(
                _slots[706] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[706] = nativeContext.LoadFunction(
                        "SDL_SetGamepadEventsEnabled",
                        "SDL3"
                    )
            )
        )(enabled);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetGamepadEventsEnabled([NativeTypeName("bool")] byte enabled) =>
        DllImport.SetGamepadEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetGamepadEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        ((ISdl)this).SetGamepadEventsEnabled((byte)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetGamepadEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        DllImport.SetGamepadEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetGamepadLED(
        GamepadHandle gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetGamepadLEDRaw(gamepad, red, green, blue);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetGamepadLED(
        GamepadHandle gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetGamepadLED(gamepad, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetGamepadLEDRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, byte, byte, byte, byte>)(
                _slots[707] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[707] = nativeContext.LoadFunction("SDL_SetGamepadLED", "SDL3")
            )
        )(gamepad, red, green, blue);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetGamepadLEDRaw(
        GamepadHandle gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetGamepadLEDRaw(gamepad, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] sbyte* mapping
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, byte>)(
                _slots[708] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[708] = nativeContext.LoadFunction("SDL_SetGamepadMapping", "SDL3")
            )
        )(instance_id, mapping);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] sbyte* mapping
    ) => DllImport.SetGamepadMapping(instance_id, mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] Ref<sbyte> mapping
    )
    {
        fixed (sbyte* __dsl_mapping = mapping)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetGamepadMapping(instance_id, __dsl_mapping);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] Ref<sbyte> mapping
    ) => DllImport.SetGamepadMapping(instance_id, mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetGamepadPlayerIndex(GamepadHandle gamepad, int player_index) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetGamepadPlayerIndexRaw(gamepad, player_index);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetGamepadPlayerIndex(GamepadHandle gamepad, int player_index) =>
        DllImport.SetGamepadPlayerIndex(gamepad, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetGamepadPlayerIndexRaw(GamepadHandle gamepad, int player_index) =>
        (
            (delegate* unmanaged<GamepadHandle, int, byte>)(
                _slots[709] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[709] = nativeContext.LoadFunction("SDL_SetGamepadPlayerIndex", "SDL3")
            )
        )(gamepad, player_index);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetGamepadPlayerIndexRaw(GamepadHandle gamepad, int player_index) =>
        DllImport.SetGamepadPlayerIndexRaw(gamepad, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetGamepadSensorEnabled(
        GamepadHandle gamepad,
        SensorType type,
        [NativeTypeName("bool")] byte enabled
    ) =>
        (
            (delegate* unmanaged<GamepadHandle, SensorType, byte, byte>)(
                _slots[710] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[710] = nativeContext.LoadFunction(
                        "SDL_SetGamepadSensorEnabled",
                        "SDL3"
                    )
            )
        )(gamepad, type, enabled);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetGamepadSensorEnabled(
        GamepadHandle gamepad,
        SensorType type,
        [NativeTypeName("bool")] byte enabled
    ) => DllImport.SetGamepadSensorEnabled(gamepad, type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetGamepadSensorEnabled(
        GamepadHandle gamepad,
        SensorType type,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetGamepadSensorEnabled(gamepad, type, (byte)enabled);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetGamepadSensorEnabled(
        GamepadHandle gamepad,
        SensorType type,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => DllImport.SetGamepadSensorEnabled(gamepad, type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetHapticAutocenter(HapticHandle haptic, int autocenter) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetHapticAutocenterRaw(haptic, autocenter);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetHapticAutocenter(HapticHandle haptic, int autocenter) =>
        DllImport.SetHapticAutocenter(haptic, autocenter);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetHapticAutocenterRaw(HapticHandle haptic, int autocenter) =>
        (
            (delegate* unmanaged<HapticHandle, int, byte>)(
                _slots[711] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[711] = nativeContext.LoadFunction("SDL_SetHapticAutocenter", "SDL3")
            )
        )(haptic, autocenter);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetHapticAutocenterRaw(HapticHandle haptic, int autocenter) =>
        DllImport.SetHapticAutocenterRaw(haptic, autocenter);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetHapticGain(HapticHandle haptic, int gain) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetHapticGainRaw(haptic, gain);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetHapticGain(HapticHandle haptic, int gain) =>
        DllImport.SetHapticGain(haptic, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetHapticGainRaw(HapticHandle haptic, int gain) =>
        (
            (delegate* unmanaged<HapticHandle, int, byte>)(
                _slots[712] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[712] = nativeContext.LoadFunction("SDL_SetHapticGain", "SDL3")
            )
        )(haptic, gain);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetHapticGainRaw(HapticHandle haptic, int gain) =>
        DllImport.SetHapticGainRaw(haptic, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetHint(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, byte>)(
                _slots[713] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[713] = nativeContext.LoadFunction("SDL_SetHint", "SDL3")
            )
        )(name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetHint(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) => DllImport.SetHint(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetHint(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetHint(__dsl_name, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetHint(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    ) => DllImport.SetHint(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetHintWithPriority(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value,
        HintPriority priority
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, HintPriority, byte>)(
                _slots[714] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[714] = nativeContext.LoadFunction("SDL_SetHintWithPriority", "SDL3")
            )
        )(name, value, priority);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetHintWithPriority(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value,
        HintPriority priority
    ) => DllImport.SetHintWithPriority(name, value, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetHintWithPriority(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value,
        HintPriority priority
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetHintWithPriority(__dsl_name, __dsl_value, priority);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetHintWithPriority(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value,
        HintPriority priority
    ) => DllImport.SetHintWithPriority(name, value, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetInitialized(InitState* state, [NativeTypeName("bool")] byte initialized) =>
        (
            (delegate* unmanaged<InitState*, byte, void>)(
                _slots[715] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[715] = nativeContext.LoadFunction("SDL_SetInitialized", "SDL3")
            )
        )(state, initialized);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetInitialized(
        InitState* state,
        [NativeTypeName("bool")] byte initialized
    ) => DllImport.SetInitialized(state, initialized);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetInitialized(
        Ref<InitState> state,
        [NativeTypeName("bool")] MaybeBool<byte> initialized
    )
    {
        fixed (InitState* __dsl_state = state)
        {
            ((ISdl)this).SetInitialized(__dsl_state, (byte)initialized);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetInitialized")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetInitialized(
        Ref<InitState> state,
        [NativeTypeName("bool")] MaybeBool<byte> initialized
    ) => DllImport.SetInitialized(state, initialized);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetJoystickEventsEnabled([NativeTypeName("bool")] byte enabled) =>
        (
            (delegate* unmanaged<byte, void>)(
                _slots[716] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[716] = nativeContext.LoadFunction(
                        "SDL_SetJoystickEventsEnabled",
                        "SDL3"
                    )
            )
        )(enabled);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetJoystickEventsEnabled([NativeTypeName("bool")] byte enabled) =>
        DllImport.SetJoystickEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetJoystickEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        ((ISdl)this).SetJoystickEventsEnabled((byte)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetJoystickEventsEnabled([NativeTypeName("bool")] MaybeBool<byte> enabled) =>
        DllImport.SetJoystickEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickLED(
        JoystickHandle joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickLEDRaw(joystick, red, green, blue);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickLED(
        JoystickHandle joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetJoystickLED(joystick, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickLEDRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, byte, byte, byte, byte>)(
                _slots[717] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[717] = nativeContext.LoadFunction("SDL_SetJoystickLED", "SDL3")
            )
        )(joystick, red, green, blue);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickLEDRaw(
        JoystickHandle joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetJoystickLEDRaw(joystick, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickPlayerIndex(JoystickHandle joystick, int player_index) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickPlayerIndexRaw(joystick, player_index);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickPlayerIndex(
        JoystickHandle joystick,
        int player_index
    ) => DllImport.SetJoystickPlayerIndex(joystick, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickPlayerIndexRaw(JoystickHandle joystick, int player_index) =>
        (
            (delegate* unmanaged<JoystickHandle, int, byte>)(
                _slots[718] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[718] = nativeContext.LoadFunction("SDL_SetJoystickPlayerIndex", "SDL3")
            )
        )(joystick, player_index);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickPlayerIndexRaw(JoystickHandle joystick, int player_index) =>
        DllImport.SetJoystickPlayerIndexRaw(joystick, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickVirtualAxis(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickVirtualAxisRaw(joystick, axis, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickVirtualAxis(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.SetJoystickVirtualAxis(joystick, axis, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickVirtualAxisRaw(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, short, byte>)(
                _slots[719] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[719] = nativeContext.LoadFunction("SDL_SetJoystickVirtualAxis", "SDL3")
            )
        )(joystick, axis, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickVirtualAxisRaw(
        JoystickHandle joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.SetJoystickVirtualAxisRaw(joystick, axis, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickVirtualBall(
        JoystickHandle joystick,
        int ball,
        [NativeTypeName("Sint16")] short xrel,
        [NativeTypeName("Sint16")] short yrel
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickVirtualBallRaw(joystick, ball, xrel, yrel);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickVirtualBall(
        JoystickHandle joystick,
        int ball,
        [NativeTypeName("Sint16")] short xrel,
        [NativeTypeName("Sint16")] short yrel
    ) => DllImport.SetJoystickVirtualBall(joystick, ball, xrel, yrel);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickVirtualBallRaw(
        JoystickHandle joystick,
        int ball,
        [NativeTypeName("Sint16")] short xrel,
        [NativeTypeName("Sint16")] short yrel
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, short, short, byte>)(
                _slots[720] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[720] = nativeContext.LoadFunction("SDL_SetJoystickVirtualBall", "SDL3")
            )
        )(joystick, ball, xrel, yrel);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickVirtualBallRaw(
        JoystickHandle joystick,
        int ball,
        [NativeTypeName("Sint16")] short xrel,
        [NativeTypeName("Sint16")] short yrel
    ) => DllImport.SetJoystickVirtualBallRaw(joystick, ball, xrel, yrel);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickVirtualButton(
        JoystickHandle joystick,
        int button,
        [NativeTypeName("bool")] byte down
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, byte, byte>)(
                _slots[721] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[721] = nativeContext.LoadFunction(
                        "SDL_SetJoystickVirtualButton",
                        "SDL3"
                    )
            )
        )(joystick, button, down);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickVirtualButton(
        JoystickHandle joystick,
        int button,
        [NativeTypeName("bool")] byte down
    ) => DllImport.SetJoystickVirtualButton(joystick, button, down);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickVirtualButton(
        JoystickHandle joystick,
        int button,
        [NativeTypeName("bool")] MaybeBool<byte> down
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickVirtualButton(joystick, button, (byte)down);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickVirtualButton(
        JoystickHandle joystick,
        int button,
        [NativeTypeName("bool")] MaybeBool<byte> down
    ) => DllImport.SetJoystickVirtualButton(joystick, button, down);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickVirtualHat(
        JoystickHandle joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetJoystickVirtualHatRaw(joystick, hat, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickVirtualHat(
        JoystickHandle joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualHat(joystick, hat, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickVirtualHatRaw(
        JoystickHandle joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, byte, byte>)(
                _slots[722] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[722] = nativeContext.LoadFunction("SDL_SetJoystickVirtualHat", "SDL3")
            )
        )(joystick, hat, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickVirtualHatRaw(
        JoystickHandle joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualHatRaw(joystick, hat, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetJoystickVirtualTouchpad(
        JoystickHandle joystick,
        int touchpad,
        int finger,
        [NativeTypeName("bool")] byte down,
        float x,
        float y,
        float pressure
    ) =>
        (
            (delegate* unmanaged<JoystickHandle, int, int, byte, float, float, float, byte>)(
                _slots[723] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[723] = nativeContext.LoadFunction(
                        "SDL_SetJoystickVirtualTouchpad",
                        "SDL3"
                    )
            )
        )(joystick, touchpad, finger, down, x, y, pressure);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetJoystickVirtualTouchpad(
        JoystickHandle joystick,
        int touchpad,
        int finger,
        [NativeTypeName("bool")] byte down,
        float x,
        float y,
        float pressure
    ) => DllImport.SetJoystickVirtualTouchpad(joystick, touchpad, finger, down, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetJoystickVirtualTouchpad(
        JoystickHandle joystick,
        int touchpad,
        int finger,
        [NativeTypeName("bool")] MaybeBool<byte> down,
        float x,
        float y,
        float pressure
    ) =>
        (MaybeBool<byte>)
            (byte)
                ((ISdl)this).SetJoystickVirtualTouchpad(
                    joystick,
                    touchpad,
                    finger,
                    (byte)down,
                    x,
                    y,
                    pressure
                );

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetJoystickVirtualTouchpad(
        JoystickHandle joystick,
        int touchpad,
        int finger,
        [NativeTypeName("bool")] MaybeBool<byte> down,
        float x,
        float y,
        float pressure
    ) => DllImport.SetJoystickVirtualTouchpad(joystick, touchpad, finger, down, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<LogOutputFunction, void*, void>)(
                _slots[724] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[724] = nativeContext.LoadFunction("SDL_SetLogOutputFunction", "SDL3")
            )
        )(callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
        void* userdata
    ) => DllImport.SetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetLogOutputFunction(callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")] LogOutputFunction callback,
        Ref userdata
    ) => DllImport.SetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogPriorities(LogPriority priority) =>
        (
            (delegate* unmanaged<LogPriority, void>)(
                _slots[725] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[725] = nativeContext.LoadFunction("SDL_SetLogPriorities", "SDL3")
            )
        )(priority);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorities")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogPriorities(LogPriority priority) =>
        DllImport.SetLogPriorities(priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogPriority(int category, LogPriority priority) =>
        (
            (delegate* unmanaged<int, LogPriority, void>)(
                _slots[726] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[726] = nativeContext.LoadFunction("SDL_SetLogPriority", "SDL3")
            )
        )(category, priority);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogPriority(int category, LogPriority priority) =>
        DllImport.SetLogPriority(category, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetLogPriorityPrefix(
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* prefix
    ) =>
        (
            (delegate* unmanaged<LogPriority, sbyte*, byte>)(
                _slots[727] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[727] = nativeContext.LoadFunction("SDL_SetLogPriorityPrefix", "SDL3")
            )
        )(priority, prefix);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetLogPriorityPrefix(
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* prefix
    ) => DllImport.SetLogPriorityPrefix(priority, prefix);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetLogPriorityPrefix(
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> prefix
    )
    {
        fixed (sbyte* __dsl_prefix = prefix)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetLogPriorityPrefix(priority, __dsl_prefix);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogPriorityPrefix")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetLogPriorityPrefix(
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> prefix
    ) => DllImport.SetLogPriorityPrefix(priority, prefix);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetModState([NativeTypeName("SDL_Keymod")] ushort modstate) =>
        (
            (delegate* unmanaged<ushort, void>)(
                _slots[728] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[728] = nativeContext.LoadFunction("SDL_SetModState", "SDL3")
            )
        )(modstate);

    [NativeFunction("SDL3", EntryPoint = "SDL_SetModState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetModState([NativeTypeName("SDL_Keymod")] ushort modstate) =>
        DllImport.SetModState(modstate);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, long, byte>)(
                _slots[729] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[729] = nativeContext.LoadFunction("SDL_SetNumberProperty", "SDL3")
            )
        )(props, name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.SetNumberProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetNumberProperty(props, __dsl_name, value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.SetNumberProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetPaletteColors(
        Palette* palette,
        [NativeTypeName("const SDL_Color *")] Color* colors,
        int firstcolor,
        int ncolors
    ) =>
        (
            (delegate* unmanaged<Palette*, Color*, int, int, byte>)(
                _slots[730] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[730] = nativeContext.LoadFunction("SDL_SetPaletteColors", "SDL3")
            )
        )(palette, colors, firstcolor, ncolors);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetPaletteColors(
        Palette* palette,
        [NativeTypeName("const SDL_Color *")] Color* colors,
        int firstcolor,
        int ncolors
    ) => DllImport.SetPaletteColors(palette, colors, firstcolor, ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetPaletteColors(
        Ref<Palette> palette,
        [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
        int firstcolor,
        int ncolors
    )
    {
        fixed (Color* __dsl_colors = colors)
        fixed (Palette* __dsl_palette = palette)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetPaletteColors(
        Ref<Palette> palette,
        [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
        int firstcolor,
        int ncolors
    ) => DllImport.SetPaletteColors(palette, colors, firstcolor, ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, void*, byte>)(
                _slots[731] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[731] = nativeContext.LoadFunction("SDL_SetPointerProperty", "SDL3")
            )
        )(props, name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value
    ) => DllImport.SetPointerProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value
    )
    {
        fixed (void* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetPointerProperty(props, __dsl_name, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetPointerProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value
    ) => DllImport.SetPointerProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetPointerPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value,
        [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, void*, CleanupPropertyCallback, void*, byte>)(
                _slots[732] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[732] = nativeContext.LoadFunction(
                        "SDL_SetPointerPropertyWithCleanup",
                        "SDL3"
                    )
            )
        )(props, name, value, cleanup, userdata);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetPointerPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value,
        [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
        void* userdata
    ) => DllImport.SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetPointerPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value,
        [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (void* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).SetPointerPropertyWithCleanup(
                        props,
                        __dsl_name,
                        __dsl_value,
                        cleanup,
                        __dsl_userdata
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetPointerPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value,
        [NativeTypeName("SDL_CleanupPropertyCallback")] CleanupPropertyCallback cleanup,
        Ref userdata
    ) => DllImport.SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
        (
            (delegate* unmanaged<sbyte*, byte>)(
                _slots[733] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[733] = nativeContext.LoadFunction(
                        "SDL_SetPrimarySelectionText",
                        "SDL3"
                    )
            )
        )(text);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
        DllImport.SetPrimarySelectionText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text)
    {
        fixed (sbyte* __dsl_text = text)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetPrimarySelectionText(__dsl_text);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetPrimarySelectionText(
        [NativeTypeName("const char *")] Ref<sbyte> text
    ) => DllImport.SetPrimarySelectionText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderClipRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, byte>)(
                _slots[734] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[734] = nativeContext.LoadFunction("SDL_SetRenderClipRect", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderClipRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderClipRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetRenderClipRect(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderClipRect(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderColorScale(RendererHandle renderer, float scale) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetRenderColorScaleRaw(renderer, scale);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderColorScale(RendererHandle renderer, float scale) =>
        DllImport.SetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderColorScaleRaw(RendererHandle renderer, float scale) =>
        (
            (delegate* unmanaged<RendererHandle, float, byte>)(
                _slots[735] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[735] = nativeContext.LoadFunction("SDL_SetRenderColorScale", "SDL3")
            )
        )(renderer, scale);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderColorScaleRaw(RendererHandle renderer, float scale) =>
        DllImport.SetRenderColorScaleRaw(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetRenderDrawBlendModeRaw(renderer, blendMode);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderDrawBlendMode(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderDrawBlendModeRaw(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) =>
        (
            (delegate* unmanaged<RendererHandle, BlendMode, byte>)(
                _slots[736] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[736] = nativeContext.LoadFunction("SDL_SetRenderDrawBlendMode", "SDL3")
            )
        )(renderer, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderDrawBlendModeRaw(
        RendererHandle renderer,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetRenderDrawBlendModeRaw(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetRenderDrawColorRaw(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderDrawColor(
        RendererHandle renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.SetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderDrawColorFloat(
        RendererHandle renderer,
        float r,
        float g,
        float b,
        float a
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetRenderDrawColorFloatRaw(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderDrawColorFloat(
        RendererHandle renderer,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.SetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderDrawColorFloatRaw(
        RendererHandle renderer,
        float r,
        float g,
        float b,
        float a
    ) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, float, float, byte>)(
                _slots[738] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[738] = nativeContext.LoadFunction(
                        "SDL_SetRenderDrawColorFloat",
                        "SDL3"
                    )
            )
        )(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderDrawColorFloatRaw(
        RendererHandle renderer,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.SetRenderDrawColorFloatRaw(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderDrawColorRaw(
        RendererHandle renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<RendererHandle, byte, byte, byte, byte, byte>)(
                _slots[737] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[737] = nativeContext.LoadFunction("SDL_SetRenderDrawColor", "SDL3")
            )
        )(renderer, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderDrawColorRaw(
        RendererHandle renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.SetRenderDrawColorRaw(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderLogicalPresentation(
        RendererHandle renderer,
        int w,
        int h,
        RendererLogicalPresentation mode
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetRenderLogicalPresentationRaw(renderer, w, h, mode);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderLogicalPresentation(
        RendererHandle renderer,
        int w,
        int h,
        RendererLogicalPresentation mode
    ) => DllImport.SetRenderLogicalPresentation(renderer, w, h, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderLogicalPresentationRaw(
        RendererHandle renderer,
        int w,
        int h,
        RendererLogicalPresentation mode
    ) =>
        (
            (delegate* unmanaged<RendererHandle, int, int, RendererLogicalPresentation, byte>)(
                _slots[739] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[739] = nativeContext.LoadFunction(
                        "SDL_SetRenderLogicalPresentation",
                        "SDL3"
                    )
            )
        )(renderer, w, h, mode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderLogicalPresentationRaw(
        RendererHandle renderer,
        int w,
        int h,
        RendererLogicalPresentation mode
    ) => DllImport.SetRenderLogicalPresentationRaw(renderer, w, h, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderScale(RendererHandle renderer, float scaleX, float scaleY) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetRenderScaleRaw(renderer, scaleX, scaleY);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderScale(
        RendererHandle renderer,
        float scaleX,
        float scaleY
    ) => DllImport.SetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderScaleRaw(RendererHandle renderer, float scaleX, float scaleY) =>
        (
            (delegate* unmanaged<RendererHandle, float, float, byte>)(
                _slots[740] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[740] = nativeContext.LoadFunction("SDL_SetRenderScale", "SDL3")
            )
        )(renderer, scaleX, scaleY);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderScaleRaw(RendererHandle renderer, float scaleX, float scaleY) =>
        DllImport.SetRenderScaleRaw(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderTarget(RendererHandle renderer, Texture* texture) =>
        (
            (delegate* unmanaged<RendererHandle, Texture*, byte>)(
                _slots[741] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[741] = nativeContext.LoadFunction("SDL_SetRenderTarget", "SDL3")
            )
        )(renderer, texture);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderTarget(RendererHandle renderer, Texture* texture) =>
        DllImport.SetRenderTarget(renderer, texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderTarget(RendererHandle renderer, Ref<Texture> texture)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetRenderTarget(renderer, __dsl_texture);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderTarget(RendererHandle renderer, Ref<Texture> texture) =>
        DllImport.SetRenderTarget(renderer, texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderViewport(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<RendererHandle, Rect*, byte>)(
                _slots[742] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[742] = nativeContext.LoadFunction("SDL_SetRenderViewport", "SDL3")
            )
        )(renderer, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderViewport(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderViewport(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetRenderViewport(renderer, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderViewport(
        RendererHandle renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetRenderVSync(RendererHandle renderer, int vsync) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetRenderVSyncRaw(renderer, vsync);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetRenderVSync(RendererHandle renderer, int vsync) =>
        DllImport.SetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetRenderVSyncRaw(RendererHandle renderer, int vsync) =>
        (
            (delegate* unmanaged<RendererHandle, int, byte>)(
                _slots[743] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[743] = nativeContext.LoadFunction("SDL_SetRenderVSync", "SDL3")
            )
        )(renderer, vsync);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetRenderVSyncRaw(RendererHandle renderer, int vsync) =>
        DllImport.SetRenderVSyncRaw(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetScancodeName(Scancode scancode, [NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<Scancode, sbyte*, byte>)(
                _slots[744] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[744] = nativeContext.LoadFunction("SDL_SetScancodeName", "SDL3")
            )
        )(scancode, name);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetScancodeName(
        Scancode scancode,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.SetScancodeName(scancode, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetScancodeName(
        Scancode scancode,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetScancodeName(scancode, __dsl_name);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetScancodeName(
        Scancode scancode,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.SetScancodeName(scancode, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, byte>)(
                _slots[745] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[745] = nativeContext.LoadFunction("SDL_SetStringProperty", "SDL3")
            )
        )(props, name, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) => DllImport.SetStringProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetStringProperty(props, __dsl_name, __dsl_value);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    ) => DllImport.SetStringProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
        (
            (delegate* unmanaged<Surface*, byte, byte>)(
                _slots[746] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[746] = nativeContext.LoadFunction("SDL_SetSurfaceAlphaMod", "SDL3")
            )
        )(surface, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
        DllImport.SetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte alpha
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetSurfaceAlphaMod(__dsl_surface, alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte alpha
    ) => DllImport.SetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceBlendMode(
        Surface* surface,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) =>
        (
            (delegate* unmanaged<Surface*, BlendMode, byte>)(
                _slots[747] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[747] = nativeContext.LoadFunction("SDL_SetSurfaceBlendMode", "SDL3")
            )
        )(surface, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceBlendMode(
        Surface* surface,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceBlendMode(
        Ref<Surface> surface,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetSurfaceBlendMode(__dsl_surface, blendMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceBlendMode(
        Ref<Surface> surface,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceClipRect(
        Surface* surface,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, byte>)(
                _slots[748] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[748] = nativeContext.LoadFunction("SDL_SetSurfaceClipRect", "SDL3")
            )
        )(surface, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceClipRect(
        Surface* surface,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceClipRect(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetSurfaceClipRect(__dsl_surface, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceClipRect(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceColorKey(
        Surface* surface,
        [NativeTypeName("bool")] byte enabled,
        [NativeTypeName("Uint32")] uint key
    ) =>
        (
            (delegate* unmanaged<Surface*, byte, uint, byte>)(
                _slots[749] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[749] = nativeContext.LoadFunction("SDL_SetSurfaceColorKey", "SDL3")
            )
        )(surface, enabled, key);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceColorKey(
        Surface* surface,
        [NativeTypeName("bool")] byte enabled,
        [NativeTypeName("Uint32")] uint key
    ) => DllImport.SetSurfaceColorKey(surface, enabled, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceColorKey(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> enabled,
        [NativeTypeName("Uint32")] uint key
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetSurfaceColorKey(__dsl_surface, (byte)enabled, key);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceColorKey(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> enabled,
        [NativeTypeName("Uint32")] uint key
    ) => DllImport.SetSurfaceColorKey(surface, enabled, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<Surface*, byte, byte, byte, byte>)(
                _slots[750] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[750] = nativeContext.LoadFunction("SDL_SetSurfaceColorMod", "SDL3")
            )
        )(surface, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetSurfaceColorMod(__dsl_surface, r, g, b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
        (
            (delegate* unmanaged<Surface*, Colorspace, byte>)(
                _slots[751] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[751] = nativeContext.LoadFunction("SDL_SetSurfaceColorspace", "SDL3")
            )
        )(surface, colorspace);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
        DllImport.SetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetSurfaceColorspace(__dsl_surface, colorspace);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceColorspace(
        Ref<Surface> surface,
        Colorspace colorspace
    ) => DllImport.SetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfacePalette(Surface* surface, Palette* palette) =>
        (
            (delegate* unmanaged<Surface*, Palette*, byte>)(
                _slots[752] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[752] = nativeContext.LoadFunction("SDL_SetSurfacePalette", "SDL3")
            )
        )(surface, palette);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfacePalette(Surface* surface, Palette* palette) =>
        DllImport.SetSurfacePalette(surface, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetSurfacePalette(__dsl_surface, __dsl_palette);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette) =>
        DllImport.SetSurfacePalette(surface, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetSurfaceRLE(Surface* surface, [NativeTypeName("bool")] byte enabled) =>
        (
            (delegate* unmanaged<Surface*, byte, byte>)(
                _slots[753] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[753] = nativeContext.LoadFunction("SDL_SetSurfaceRLE", "SDL3")
            )
        )(surface, enabled);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetSurfaceRLE(Surface* surface, [NativeTypeName("bool")] byte enabled) =>
        DllImport.SetSurfaceRLE(surface, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetSurfaceRLE(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetSurfaceRLE(__dsl_surface, (byte)enabled);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetSurfaceRLE(
        Ref<Surface> surface,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => DllImport.SetSurfaceRLE(surface, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextInputArea(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int cursor
    ) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*, int, byte>)(
                _slots[754] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[754] = nativeContext.LoadFunction("SDL_SetTextInputArea", "SDL3")
            )
        )(window, rect, cursor);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextInputArea(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int cursor
    ) => DllImport.SetTextInputArea(window, rect, cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextInputArea(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        int cursor
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetTextInputArea(window, __dsl_rect, cursor);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputArea")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextInputArea(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        int cursor
    ) => DllImport.SetTextInputArea(window, rect, cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureAlphaMod(Texture* texture, [NativeTypeName("Uint8")] byte alpha) =>
        (
            (delegate* unmanaged<Texture*, byte, byte>)(
                _slots[755] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[755] = nativeContext.LoadFunction("SDL_SetTextureAlphaMod", "SDL3")
            )
        )(texture, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureAlphaMod(Texture* texture, [NativeTypeName("Uint8")] byte alpha) =>
        DllImport.SetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureAlphaMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8")] byte alpha
    )
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetTextureAlphaMod(__dsl_texture, alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureAlphaMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8")] byte alpha
    ) => DllImport.SetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureAlphaModFloat(Texture* texture, float alpha) =>
        (
            (delegate* unmanaged<Texture*, float, byte>)(
                _slots[756] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[756] = nativeContext.LoadFunction(
                        "SDL_SetTextureAlphaModFloat",
                        "SDL3"
                    )
            )
        )(texture, alpha);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureAlphaModFloat(Texture* texture, float alpha) =>
        DllImport.SetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureAlphaModFloat(Ref<Texture> texture, float alpha)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetTextureAlphaModFloat(__dsl_texture, alpha);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureAlphaModFloat(Ref<Texture> texture, float alpha) =>
        DllImport.SetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureBlendMode(
        Texture* texture,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) =>
        (
            (delegate* unmanaged<Texture*, BlendMode, byte>)(
                _slots[757] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[757] = nativeContext.LoadFunction("SDL_SetTextureBlendMode", "SDL3")
            )
        )(texture, blendMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureBlendMode(
        Texture* texture,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureBlendMode(
        Ref<Texture> texture,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    )
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetTextureBlendMode(__dsl_texture, blendMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureBlendMode(
        Ref<Texture> texture,
        [NativeTypeName("SDL_BlendMode")] BlendMode blendMode
    ) => DllImport.SetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureColorMod(
        Texture* texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<Texture*, byte, byte, byte, byte>)(
                _slots[758] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[758] = nativeContext.LoadFunction("SDL_SetTextureColorMod", "SDL3")
            )
        )(texture, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureColorMod(
        Texture* texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureColorMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetTextureColorMod(__dsl_texture, r, g, b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureColorMod(
        Ref<Texture> texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureColorModFloat(Texture* texture, float r, float g, float b) =>
        (
            (delegate* unmanaged<Texture*, float, float, float, byte>)(
                _slots[759] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[759] = nativeContext.LoadFunction(
                        "SDL_SetTextureColorModFloat",
                        "SDL3"
                    )
            )
        )(texture, r, g, b);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureColorModFloat(Texture* texture, float r, float g, float b) =>
        DllImport.SetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureColorModFloat(Ref<Texture> texture, float r, float g, float b)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetTextureColorModFloat(__dsl_texture, r, g, b);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureColorModFloat(
        Ref<Texture> texture,
        float r,
        float g,
        float b
    ) => DllImport.SetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTextureScaleMode(Texture* texture, ScaleMode scaleMode) =>
        (
            (delegate* unmanaged<Texture*, ScaleMode, byte>)(
                _slots[760] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[760] = nativeContext.LoadFunction("SDL_SetTextureScaleMode", "SDL3")
            )
        )(texture, scaleMode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTextureScaleMode(Texture* texture, ScaleMode scaleMode) =>
        DllImport.SetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTextureScaleMode(Ref<Texture> texture, ScaleMode scaleMode)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetTextureScaleMode(__dsl_texture, scaleMode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTextureScaleMode(Ref<Texture> texture, ScaleMode scaleMode) =>
        DllImport.SetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetTLS(
        [NativeTypeName("SDL_TLSID *")] AtomicInt* id,
        [NativeTypeName("const void *")] void* value,
        [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
    ) =>
        (
            (delegate* unmanaged<AtomicInt*, void*, TLSDestructorCallback, byte>)(
                _slots[761] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[761] = nativeContext.LoadFunction("SDL_SetTLS", "SDL3")
            )
        )(id, value, destructor);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetTLS(
        [NativeTypeName("SDL_TLSID *")] AtomicInt* id,
        [NativeTypeName("const void *")] void* value,
        [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
    ) => DllImport.SetTLS(id, value, destructor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetTLS(
        [NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id,
        [NativeTypeName("const void *")] Ref value,
        [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
    )
    {
        fixed (void* __dsl_value = value)
        fixed (AtomicInt* __dsl_id = id)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetTLS(__dsl_id, __dsl_value, destructor);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetTLS(
        [NativeTypeName("SDL_TLSID *")] Ref<AtomicInt> id,
        [NativeTypeName("const void *")] Ref value,
        [NativeTypeName("SDL_TLSDestructorCallback")] TLSDestructorCallback destructor
    ) => DllImport.SetTLS(id, value, destructor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowAlwaysOnTop(WindowHandle window, [NativeTypeName("bool")] byte on_top) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[762] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[762] = nativeContext.LoadFunction("SDL_SetWindowAlwaysOnTop", "SDL3")
            )
        )(window, on_top);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowAlwaysOnTop(
        WindowHandle window,
        [NativeTypeName("bool")] byte on_top
    ) => DllImport.SetWindowAlwaysOnTop(window, on_top);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowAlwaysOnTop(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> on_top
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowAlwaysOnTop(window, (byte)on_top);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowAlwaysOnTop(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> on_top
    ) => DllImport.SetWindowAlwaysOnTop(window, on_top);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowAspectRatio(
        WindowHandle window,
        float min_aspect,
        float max_aspect
    ) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowAspectRatioRaw(window, min_aspect, max_aspect);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowAspectRatio(
        WindowHandle window,
        float min_aspect,
        float max_aspect
    ) => DllImport.SetWindowAspectRatio(window, min_aspect, max_aspect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowAspectRatioRaw(WindowHandle window, float min_aspect, float max_aspect) =>
        (
            (delegate* unmanaged<WindowHandle, float, float, byte>)(
                _slots[763] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[763] = nativeContext.LoadFunction("SDL_SetWindowAspectRatio", "SDL3")
            )
        )(window, min_aspect, max_aspect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAspectRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowAspectRatioRaw(
        WindowHandle window,
        float min_aspect,
        float max_aspect
    ) => DllImport.SetWindowAspectRatioRaw(window, min_aspect, max_aspect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowBordered(WindowHandle window, [NativeTypeName("bool")] byte bordered) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[764] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[764] = nativeContext.LoadFunction("SDL_SetWindowBordered", "SDL3")
            )
        )(window, bordered);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowBordered(
        WindowHandle window,
        [NativeTypeName("bool")] byte bordered
    ) => DllImport.SetWindowBordered(window, bordered);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowBordered(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> bordered
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowBordered(window, (byte)bordered);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowBordered(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> bordered
    ) => DllImport.SetWindowBordered(window, bordered);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowFocusable(WindowHandle window, [NativeTypeName("bool")] byte focusable) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[765] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[765] = nativeContext.LoadFunction("SDL_SetWindowFocusable", "SDL3")
            )
        )(window, focusable);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowFocusable(
        WindowHandle window,
        [NativeTypeName("bool")] byte focusable
    ) => DllImport.SetWindowFocusable(window, focusable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowFocusable(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> focusable
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowFocusable(window, (byte)focusable);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowFocusable(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> focusable
    ) => DllImport.SetWindowFocusable(window, focusable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowFullscreen(WindowHandle window, [NativeTypeName("bool")] byte fullscreen) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[766] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[766] = nativeContext.LoadFunction("SDL_SetWindowFullscreen", "SDL3")
            )
        )(window, fullscreen);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowFullscreen(
        WindowHandle window,
        [NativeTypeName("bool")] byte fullscreen
    ) => DllImport.SetWindowFullscreen(window, fullscreen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowFullscreen(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> fullscreen
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowFullscreen(window, (byte)fullscreen);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowFullscreen(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> fullscreen
    ) => DllImport.SetWindowFullscreen(window, fullscreen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowFullscreenMode(
        WindowHandle window,
        [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
    ) =>
        (
            (delegate* unmanaged<WindowHandle, DisplayMode*, byte>)(
                _slots[767] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[767] = nativeContext.LoadFunction(
                        "SDL_SetWindowFullscreenMode",
                        "SDL3"
                    )
            )
        )(window, mode);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowFullscreenMode(
        WindowHandle window,
        [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
    ) => DllImport.SetWindowFullscreenMode(window, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowFullscreenMode(
        WindowHandle window,
        [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
    )
    {
        fixed (DisplayMode* __dsl_mode = mode)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetWindowFullscreenMode(window, __dsl_mode);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowFullscreenMode(
        WindowHandle window,
        [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
    ) => DllImport.SetWindowFullscreenMode(window, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowHitTest(
        WindowHandle window,
        [NativeTypeName("SDL_HitTest")] HitTest callback,
        void* callback_data
    ) =>
        (
            (delegate* unmanaged<WindowHandle, HitTest, void*, byte>)(
                _slots[768] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[768] = nativeContext.LoadFunction("SDL_SetWindowHitTest", "SDL3")
            )
        )(window, callback, callback_data);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowHitTest(
        WindowHandle window,
        [NativeTypeName("SDL_HitTest")] HitTest callback,
        void* callback_data
    ) => DllImport.SetWindowHitTest(window, callback, callback_data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowHitTest(
        WindowHandle window,
        [NativeTypeName("SDL_HitTest")] HitTest callback,
        Ref callback_data
    )
    {
        fixed (void* __dsl_callback_data = callback_data)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).SetWindowHitTest(window, callback, __dsl_callback_data);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowHitTest(
        WindowHandle window,
        [NativeTypeName("SDL_HitTest")] HitTest callback,
        Ref callback_data
    ) => DllImport.SetWindowHitTest(window, callback, callback_data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowIcon(WindowHandle window, Surface* icon) =>
        (
            (delegate* unmanaged<WindowHandle, Surface*, byte>)(
                _slots[769] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[769] = nativeContext.LoadFunction("SDL_SetWindowIcon", "SDL3")
            )
        )(window, icon);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowIcon(WindowHandle window, Surface* icon) =>
        DllImport.SetWindowIcon(window, icon);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowIcon(WindowHandle window, Ref<Surface> icon)
    {
        fixed (Surface* __dsl_icon = icon)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetWindowIcon(window, __dsl_icon);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowIcon(WindowHandle window, Ref<Surface> icon) =>
        DllImport.SetWindowIcon(window, icon);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowKeyboardGrab(WindowHandle window, [NativeTypeName("bool")] byte grabbed) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[770] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[770] = nativeContext.LoadFunction("SDL_SetWindowKeyboardGrab", "SDL3")
            )
        )(window, grabbed);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowKeyboardGrab(
        WindowHandle window,
        [NativeTypeName("bool")] byte grabbed
    ) => DllImport.SetWindowKeyboardGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowKeyboardGrab(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> grabbed
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowKeyboardGrab(window, (byte)grabbed);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowKeyboardGrab(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> grabbed
    ) => DllImport.SetWindowKeyboardGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowMaximumSize(WindowHandle window, int max_w, int max_h) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowMaximumSizeRaw(window, max_w, max_h);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowMaximumSize(WindowHandle window, int max_w, int max_h) =>
        DllImport.SetWindowMaximumSize(window, max_w, max_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowMaximumSizeRaw(WindowHandle window, int max_w, int max_h) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, byte>)(
                _slots[771] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[771] = nativeContext.LoadFunction("SDL_SetWindowMaximumSize", "SDL3")
            )
        )(window, max_w, max_h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowMaximumSizeRaw(WindowHandle window, int max_w, int max_h) =>
        DllImport.SetWindowMaximumSizeRaw(window, max_w, max_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowMinimumSize(WindowHandle window, int min_w, int min_h) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowMinimumSizeRaw(window, min_w, min_h);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowMinimumSize(WindowHandle window, int min_w, int min_h) =>
        DllImport.SetWindowMinimumSize(window, min_w, min_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowMinimumSizeRaw(WindowHandle window, int min_w, int min_h) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, byte>)(
                _slots[772] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[772] = nativeContext.LoadFunction("SDL_SetWindowMinimumSize", "SDL3")
            )
        )(window, min_w, min_h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowMinimumSizeRaw(WindowHandle window, int min_w, int min_h) =>
        DllImport.SetWindowMinimumSizeRaw(window, min_w, min_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowModal(WindowHandle window, [NativeTypeName("bool")] byte modal) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[773] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[773] = nativeContext.LoadFunction("SDL_SetWindowModal", "SDL3")
            )
        )(window, modal);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowModal(WindowHandle window, [NativeTypeName("bool")] byte modal) =>
        DllImport.SetWindowModal(window, modal);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowModal(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> modal
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowModal(window, (byte)modal);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModal")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowModal(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> modal
    ) => DllImport.SetWindowModal(window, modal);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowMouseGrab(WindowHandle window, [NativeTypeName("bool")] byte grabbed) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[774] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[774] = nativeContext.LoadFunction("SDL_SetWindowMouseGrab", "SDL3")
            )
        )(window, grabbed);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowMouseGrab(
        WindowHandle window,
        [NativeTypeName("bool")] byte grabbed
    ) => DllImport.SetWindowMouseGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowMouseGrab(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> grabbed
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowMouseGrab(window, (byte)grabbed);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowMouseGrab(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> grabbed
    ) => DllImport.SetWindowMouseGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowMouseRect(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*, byte>)(
                _slots[775] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[775] = nativeContext.LoadFunction("SDL_SetWindowMouseRect", "SDL3")
            )
        )(window, rect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowMouseRect(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetWindowMouseRect(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowMouseRect(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetWindowMouseRect(window, __dsl_rect);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowMouseRect(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetWindowMouseRect(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowOpacity(WindowHandle window, float opacity) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowOpacityRaw(window, opacity);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowOpacity(WindowHandle window, float opacity) =>
        DllImport.SetWindowOpacity(window, opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowOpacityRaw(WindowHandle window, float opacity) =>
        (
            (delegate* unmanaged<WindowHandle, float, byte>)(
                _slots[776] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[776] = nativeContext.LoadFunction("SDL_SetWindowOpacity", "SDL3")
            )
        )(window, opacity);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowOpacityRaw(WindowHandle window, float opacity) =>
        DllImport.SetWindowOpacityRaw(window, opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowParent(WindowHandle window, WindowHandle parent) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowParentRaw(window, parent);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowParent(WindowHandle window, WindowHandle parent) =>
        DllImport.SetWindowParent(window, parent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowParentRaw(WindowHandle window, WindowHandle parent) =>
        (
            (delegate* unmanaged<WindowHandle, WindowHandle, byte>)(
                _slots[777] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[777] = nativeContext.LoadFunction("SDL_SetWindowParent", "SDL3")
            )
        )(window, parent);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowParent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowParentRaw(WindowHandle window, WindowHandle parent) =>
        DllImport.SetWindowParentRaw(window, parent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowPosition(WindowHandle window, int x, int y) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowPositionRaw(window, x, y);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowPosition(WindowHandle window, int x, int y) =>
        DllImport.SetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowPositionRaw(WindowHandle window, int x, int y) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, byte>)(
                _slots[778] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[778] = nativeContext.LoadFunction("SDL_SetWindowPosition", "SDL3")
            )
        )(window, x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowPositionRaw(WindowHandle window, int x, int y) =>
        DllImport.SetWindowPositionRaw(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowRelativeMouseMode(
        WindowHandle window,
        [NativeTypeName("bool")] byte enabled
    ) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[779] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[779] = nativeContext.LoadFunction(
                        "SDL_SetWindowRelativeMouseMode",
                        "SDL3"
                    )
            )
        )(window, enabled);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowRelativeMouseMode(
        WindowHandle window,
        [NativeTypeName("bool")] byte enabled
    ) => DllImport.SetWindowRelativeMouseMode(window, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowRelativeMouseMode(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowRelativeMouseMode(window, (byte)enabled);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowRelativeMouseMode(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> enabled
    ) => DllImport.SetWindowRelativeMouseMode(window, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowResizable(WindowHandle window, [NativeTypeName("bool")] byte resizable) =>
        (
            (delegate* unmanaged<WindowHandle, byte, byte>)(
                _slots[780] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[780] = nativeContext.LoadFunction("SDL_SetWindowResizable", "SDL3")
            )
        )(window, resizable);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowResizable(
        WindowHandle window,
        [NativeTypeName("bool")] byte resizable
    ) => DllImport.SetWindowResizable(window, resizable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowResizable(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> resizable
    ) => (MaybeBool<byte>)(byte)((ISdl)this).SetWindowResizable(window, (byte)resizable);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowResizable(
        WindowHandle window,
        [NativeTypeName("bool")] MaybeBool<byte> resizable
    ) => DllImport.SetWindowResizable(window, resizable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowShape(WindowHandle window, Surface* shape) =>
        (
            (delegate* unmanaged<WindowHandle, Surface*, byte>)(
                _slots[781] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[781] = nativeContext.LoadFunction("SDL_SetWindowShape", "SDL3")
            )
        )(window, shape);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowShape(WindowHandle window, Surface* shape) =>
        DllImport.SetWindowShape(window, shape);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowShape(WindowHandle window, Ref<Surface> shape)
    {
        fixed (Surface* __dsl_shape = shape)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetWindowShape(window, __dsl_shape);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowShape(WindowHandle window, Ref<Surface> shape) =>
        DllImport.SetWindowShape(window, shape);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowSize(WindowHandle window, int w, int h) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowSizeRaw(window, w, h);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowSize(WindowHandle window, int w, int h) =>
        DllImport.SetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowSizeRaw(WindowHandle window, int w, int h) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, byte>)(
                _slots[782] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[782] = nativeContext.LoadFunction("SDL_SetWindowSize", "SDL3")
            )
        )(window, w, h);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowSizeRaw(WindowHandle window, int w, int h) =>
        DllImport.SetWindowSizeRaw(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowSurfaceVSync(WindowHandle window, int vsync) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SetWindowSurfaceVSyncRaw(window, vsync);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowSurfaceVSync(WindowHandle window, int vsync) =>
        DllImport.SetWindowSurfaceVSync(window, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowSurfaceVSyncRaw(WindowHandle window, int vsync) =>
        (
            (delegate* unmanaged<WindowHandle, int, byte>)(
                _slots[783] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[783] = nativeContext.LoadFunction("SDL_SetWindowSurfaceVSync", "SDL3")
            )
        )(window, vsync);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSurfaceVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowSurfaceVSyncRaw(WindowHandle window, int vsync) =>
        DllImport.SetWindowSurfaceVSyncRaw(window, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SetWindowTitle(WindowHandle window, [NativeTypeName("const char *")] sbyte* title) =>
        (
            (delegate* unmanaged<WindowHandle, sbyte*, byte>)(
                _slots[784] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[784] = nativeContext.LoadFunction("SDL_SetWindowTitle", "SDL3")
            )
        )(window, title);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SetWindowTitle(
        WindowHandle window,
        [NativeTypeName("const char *")] sbyte* title
    ) => DllImport.SetWindowTitle(window, title);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SetWindowTitle(
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> title
    )
    {
        fixed (sbyte* __dsl_title = title)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SetWindowTitle(window, __dsl_title);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SetWindowTitle(
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> title
    ) => DllImport.SetWindowTitle(window, title);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShouldInit(InitState* state) =>
        (
            (delegate* unmanaged<InitState*, byte>)(
                _slots[785] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[785] = nativeContext.LoadFunction("SDL_ShouldInit", "SDL3")
            )
        )(state);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShouldInit(InitState* state) => DllImport.ShouldInit(state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShouldInit(Ref<InitState> state)
    {
        fixed (InitState* __dsl_state = state)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ShouldInit(__dsl_state);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShouldInit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShouldInit(Ref<InitState> state) => DllImport.ShouldInit(state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShouldQuit(InitState* state) =>
        (
            (delegate* unmanaged<InitState*, byte>)(
                _slots[786] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[786] = nativeContext.LoadFunction("SDL_ShouldQuit", "SDL3")
            )
        )(state);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShouldQuit(InitState* state) => DllImport.ShouldQuit(state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShouldQuit(Ref<InitState> state)
    {
        fixed (InitState* __dsl_state = state)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).ShouldQuit(__dsl_state);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShouldQuit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShouldQuit(Ref<InitState> state) => DllImport.ShouldQuit(state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShowCursor() => (MaybeBool<byte>)(byte)((ISdl)this).ShowCursorRaw();

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShowCursor() => DllImport.ShowCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShowCursorRaw() =>
        (
            (delegate* unmanaged<byte>)(
                _slots[787] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[787] = nativeContext.LoadFunction("SDL_ShowCursor", "SDL3")
            )
        )();

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShowCursorRaw() => DllImport.ShowCursorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
        int* buttonid
    ) =>
        (
            (delegate* unmanaged<MessageBoxData*, int*, byte>)(
                _slots[788] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[788] = nativeContext.LoadFunction("SDL_ShowMessageBox", "SDL3")
            )
        )(messageboxdata, buttonid);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
        int* buttonid
    ) => DllImport.ShowMessageBox(messageboxdata, buttonid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
        Ref<int> buttonid
    )
    {
        fixed (int* __dsl_buttonid = buttonid)
        fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
        Ref<int> buttonid
    ) => DllImport.ShowMessageBox(messageboxdata, buttonid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        int nfilters,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("bool")] byte allow_many
    ) =>
        (
            (delegate* unmanaged<
                DialogFileCallback,
                void*,
                WindowHandle,
                DialogFileFilter*,
                int,
                sbyte*,
                byte,
                void>)(
                _slots[789] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[789] = nativeContext.LoadFunction("SDL_ShowOpenFileDialog", "SDL3")
            )
        )(callback, userdata, window, filters, nfilters, default_location, allow_many);

    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        int nfilters,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("bool")] byte allow_many
    ) =>
        DllImport.ShowOpenFileDialog(
            callback,
            userdata,
            window,
            filters,
            nfilters,
            default_location,
            allow_many
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        int nfilters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("bool")] MaybeBool<byte> allow_many
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (DialogFileFilter* __dsl_filters = filters)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowOpenFileDialog(
                callback,
                __dsl_userdata,
                window,
                __dsl_filters,
                nfilters,
                __dsl_default_location,
                (byte)allow_many
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        int nfilters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("bool")] MaybeBool<byte> allow_many
    ) =>
        DllImport.ShowOpenFileDialog(
            callback,
            userdata,
            window,
            filters,
            nfilters,
            default_location,
            allow_many
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("bool")] byte allow_many
    ) =>
        (
            (delegate* unmanaged<DialogFileCallback, void*, WindowHandle, sbyte*, byte, void>)(
                _slots[790] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[790] = nativeContext.LoadFunction("SDL_ShowOpenFolderDialog", "SDL3")
            )
        )(callback, userdata, window, default_location, allow_many);

    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("bool")] byte allow_many
    ) => DllImport.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("bool")] MaybeBool<byte> allow_many
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowOpenFolderDialog(
                callback,
                __dsl_userdata,
                window,
                __dsl_default_location,
                (byte)allow_many
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("bool")] MaybeBool<byte> allow_many
    ) => DllImport.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        int nfilters,
        [NativeTypeName("const char *")] sbyte* default_location
    ) =>
        (
            (delegate* unmanaged<
                DialogFileCallback,
                void*,
                WindowHandle,
                DialogFileFilter*,
                int,
                sbyte*,
                void>)(
                _slots[791] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[791] = nativeContext.LoadFunction("SDL_ShowSaveFileDialog", "SDL3")
            )
        )(callback, userdata, window, filters, nfilters, default_location);

    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        void* userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        int nfilters,
        [NativeTypeName("const char *")] sbyte* default_location
    ) =>
        DllImport.ShowSaveFileDialog(
            callback,
            userdata,
            window,
            filters,
            nfilters,
            default_location
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        int nfilters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (DialogFileFilter* __dsl_filters = filters)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowSaveFileDialog(
                callback,
                __dsl_userdata,
                window,
                __dsl_filters,
                nfilters,
                __dsl_default_location
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")] DialogFileCallback callback,
        Ref userdata,
        WindowHandle window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        int nfilters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location
    ) =>
        DllImport.ShowSaveFileDialog(
            callback,
            userdata,
            window,
            filters,
            nfilters,
            default_location
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShowSimpleMessageBox(
        [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
        [NativeTypeName("const char *")] sbyte* title,
        [NativeTypeName("const char *")] sbyte* message,
        WindowHandle window
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, WindowHandle, byte>)(
                _slots[792] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[792] = nativeContext.LoadFunction("SDL_ShowSimpleMessageBox", "SDL3")
            )
        )(flags, title, message, window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShowSimpleMessageBox(
        [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
        [NativeTypeName("const char *")] sbyte* title,
        [NativeTypeName("const char *")] sbyte* message,
        WindowHandle window
    ) => DllImport.ShowSimpleMessageBox(flags, title, message, window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShowSimpleMessageBox(
        [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
        [NativeTypeName("const char *")] Ref<sbyte> title,
        [NativeTypeName("const char *")] Ref<sbyte> message,
        WindowHandle window
    )
    {
        fixed (sbyte* __dsl_message = message)
        fixed (sbyte* __dsl_title = title)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, window);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShowSimpleMessageBox(
        [NativeTypeName("SDL_MessageBoxFlags")] uint flags,
        [NativeTypeName("const char *")] Ref<sbyte> title,
        [NativeTypeName("const char *")] Ref<sbyte> message,
        WindowHandle window
    ) => DllImport.ShowSimpleMessageBox(flags, title, message, window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShowWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ShowWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShowWindow(WindowHandle window) => DllImport.ShowWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShowWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[793] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[793] = nativeContext.LoadFunction("SDL_ShowWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShowWindowRaw(WindowHandle window) => DllImport.ShowWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.ShowWindowSystemMenu(WindowHandle window, int x, int y) =>
        (MaybeBool<byte>)(byte)((ISdl)this).ShowWindowSystemMenuRaw(window, x, y);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> ShowWindowSystemMenu(WindowHandle window, int x, int y) =>
        DllImport.ShowWindowSystemMenu(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.ShowWindowSystemMenuRaw(WindowHandle window, int x, int y) =>
        (
            (delegate* unmanaged<WindowHandle, int, int, byte>)(
                _slots[794] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[794] = nativeContext.LoadFunction("SDL_ShowWindowSystemMenu", "SDL3")
            )
        )(window, x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte ShowWindowSystemMenuRaw(WindowHandle window, int x, int y) =>
        DllImport.ShowWindowSystemMenuRaw(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SignalCondition(ConditionHandle cond) =>
        (
            (delegate* unmanaged<ConditionHandle, void>)(
                _slots[795] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[795] = nativeContext.LoadFunction("SDL_SignalCondition", "SDL3")
            )
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SignalCondition(ConditionHandle cond) => DllImport.SignalCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SignalSemaphore(SemaphoreHandle sem) =>
        (
            (delegate* unmanaged<SemaphoreHandle, void>)(
                _slots[796] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[796] = nativeContext.LoadFunction("SDL_SignalSemaphore", "SDL3")
            )
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "SDL_SignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SignalSemaphore(SemaphoreHandle sem) => DllImport.SignalSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StartTextInput(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StartTextInputRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StartTextInput(WindowHandle window) =>
        DllImport.StartTextInput(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StartTextInputRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[797] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[797] = nativeContext.LoadFunction("SDL_StartTextInput", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StartTextInputRaw(WindowHandle window) =>
        DllImport.StartTextInputRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StartTextInputWithProperties(
        WindowHandle window,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => (MaybeBool<byte>)(byte)((ISdl)this).StartTextInputWithPropertiesRaw(window, props);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StartTextInputWithProperties(
        WindowHandle window,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.StartTextInputWithProperties(window, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StartTextInputWithPropertiesRaw(
        WindowHandle window,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<WindowHandle, uint, byte>)(
                _slots[798] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[798] = nativeContext.LoadFunction(
                        "SDL_StartTextInputWithProperties",
                        "SDL3"
                    )
            )
        )(window, props);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StartTextInputWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StartTextInputWithPropertiesRaw(
        WindowHandle window,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.StartTextInputWithPropertiesRaw(window, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StopHapticEffect(HapticHandle haptic, int effect) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StopHapticEffectRaw(haptic, effect);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StopHapticEffect(HapticHandle haptic, int effect) =>
        DllImport.StopHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StopHapticEffectRaw(HapticHandle haptic, int effect) =>
        (
            (delegate* unmanaged<HapticHandle, int, byte>)(
                _slots[799] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[799] = nativeContext.LoadFunction("SDL_StopHapticEffect", "SDL3")
            )
        )(haptic, effect);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StopHapticEffectRaw(HapticHandle haptic, int effect) =>
        DllImport.StopHapticEffectRaw(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StopHapticEffects(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StopHapticEffectsRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StopHapticEffects(HapticHandle haptic) =>
        DllImport.StopHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StopHapticEffectsRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[800] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[800] = nativeContext.LoadFunction("SDL_StopHapticEffects", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StopHapticEffectsRaw(HapticHandle haptic) =>
        DllImport.StopHapticEffectsRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StopHapticRumble(HapticHandle haptic) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StopHapticRumbleRaw(haptic);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StopHapticRumble(HapticHandle haptic) =>
        DllImport.StopHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StopHapticRumbleRaw(HapticHandle haptic) =>
        (
            (delegate* unmanaged<HapticHandle, byte>)(
                _slots[801] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[801] = nativeContext.LoadFunction("SDL_StopHapticRumble", "SDL3")
            )
        )(haptic);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StopHapticRumbleRaw(HapticHandle haptic) =>
        DllImport.StopHapticRumbleRaw(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StopTextInput(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StopTextInputRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StopTextInput(WindowHandle window) =>
        DllImport.StopTextInput(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StopTextInputRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[802] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[802] = nativeContext.LoadFunction("SDL_StopTextInput", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StopTextInputRaw(WindowHandle window) => DllImport.StopTextInputRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.StorageReady(StorageHandle storage) =>
        (MaybeBool<byte>)(byte)((ISdl)this).StorageReadyRaw(storage);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> StorageReady(StorageHandle storage) =>
        DllImport.StorageReady(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.StorageReadyRaw(StorageHandle storage) =>
        (
            (delegate* unmanaged<StorageHandle, byte>)(
                _slots[803] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[803] = nativeContext.LoadFunction("SDL_StorageReady", "SDL3")
            )
        )(storage);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte StorageReadyRaw(StorageHandle storage) => DllImport.StorageReadyRaw(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.StringToGuid([NativeTypeName("const char *")] sbyte* pchGUID) =>
        (
            (delegate* unmanaged<sbyte*, Guid>)(
                _slots[804] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[804] = nativeContext.LoadFunction("SDL_StringToGUID", "SDL3")
            )
        )(pchGUID);

    [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid StringToGuid([NativeTypeName("const char *")] sbyte* pchGUID) =>
        DllImport.StringToGuid(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.StringToGuid([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
    {
        fixed (sbyte* __dsl_pchGUID = pchGUID)
        {
            return (Guid)((ISdl)this).StringToGuid(__dsl_pchGUID);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StringToGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid StringToGuid([NativeTypeName("const char *")] Ref<sbyte> pchGUID) =>
        DllImport.StringToGuid(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SurfaceHasAlternateImages(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, byte>)(
                _slots[805] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[805] = nativeContext.LoadFunction(
                        "SDL_SurfaceHasAlternateImages",
                        "SDL3"
                    )
            )
        )(surface);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SurfaceHasAlternateImages(Surface* surface) =>
        DllImport.SurfaceHasAlternateImages(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SurfaceHasAlternateImages(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SurfaceHasAlternateImages(__dsl_surface);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasAlternateImages")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SurfaceHasAlternateImages(Ref<Surface> surface) =>
        DllImport.SurfaceHasAlternateImages(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SurfaceHasColorKey(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, byte>)(
                _slots[806] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[806] = nativeContext.LoadFunction("SDL_SurfaceHasColorKey", "SDL3")
            )
        )(surface);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SurfaceHasColorKey(Surface* surface) =>
        DllImport.SurfaceHasColorKey(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SurfaceHasColorKey(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SurfaceHasColorKey(__dsl_surface);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SurfaceHasColorKey(Ref<Surface> surface) =>
        DllImport.SurfaceHasColorKey(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SurfaceHasRLE(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, byte>)(
                _slots[807] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[807] = nativeContext.LoadFunction("SDL_SurfaceHasRLE", "SDL3")
            )
        )(surface);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SurfaceHasRLE(Surface* surface) => DllImport.SurfaceHasRLE(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SurfaceHasRLE(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).SurfaceHasRLE(__dsl_surface);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SurfaceHasRLE(Ref<Surface> surface) =>
        DllImport.SurfaceHasRLE(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.SyncWindow(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).SyncWindowRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> SyncWindow(WindowHandle window) => DllImport.SyncWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.SyncWindowRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[808] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[808] = nativeContext.LoadFunction("SDL_SyncWindow", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte SyncWindowRaw(WindowHandle window) => DllImport.SyncWindowRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.TellIO(IOStreamHandle context) =>
        (
            (delegate* unmanaged<IOStreamHandle, long>)(
                _slots[809] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[809] = nativeContext.LoadFunction("SDL_TellIO", "SDL3")
            )
        )(context);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long TellIO(IOStreamHandle context) => DllImport.TellIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TextInputActive(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).TextInputActiveRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TextInputActive(WindowHandle window) =>
        DllImport.TextInputActive(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TextInputActiveRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[810] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[810] = nativeContext.LoadFunction("SDL_TextInputActive", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TextInputActiveRaw(WindowHandle window) =>
        DllImport.TextInputActiveRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.TimeFromWindows(
        [NativeTypeName("Uint32")] uint dwLowDateTime,
        [NativeTypeName("Uint32")] uint dwHighDateTime
    ) =>
        (
            (delegate* unmanaged<uint, uint, long>)(
                _slots[811] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[811] = nativeContext.LoadFunction("SDL_TimeFromWindows", "SDL3")
            )
        )(dwLowDateTime, dwHighDateTime);

    [return: NativeTypeName("SDL_Time")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeFromWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long TimeFromWindows(
        [NativeTypeName("Uint32")] uint dwLowDateTime,
        [NativeTypeName("Uint32")] uint dwHighDateTime
    ) => DllImport.TimeFromWindows(dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        DateTime* dt,
        [NativeTypeName("bool")] byte localTime
    ) =>
        (
            (delegate* unmanaged<long, DateTime*, byte, byte>)(
                _slots[812] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[812] = nativeContext.LoadFunction("SDL_TimeToDateTime", "SDL3")
            )
        )(ticks, dt, localTime);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        DateTime* dt,
        [NativeTypeName("bool")] byte localTime
    ) => DllImport.TimeToDateTime(ticks, dt, localTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        Ref<DateTime> dt,
        [NativeTypeName("bool")] MaybeBool<byte> localTime
    )
    {
        fixed (DateTime* __dsl_dt = dt)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).TimeToDateTime(ticks, __dsl_dt, (byte)localTime);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        Ref<DateTime> dt,
        [NativeTypeName("bool")] MaybeBool<byte> localTime
    ) => DllImport.TimeToDateTime(ticks, dt, localTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
        [NativeTypeName("Uint32 *")] uint* dwHighDateTime
    ) =>
        (
            (delegate* unmanaged<long, uint*, uint*, void>)(
                _slots[813] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[813] = nativeContext.LoadFunction("SDL_TimeToWindows", "SDL3")
            )
        )(ticks, dwLowDateTime, dwHighDateTime);

    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
        [NativeTypeName("Uint32 *")] uint* dwHighDateTime
    ) => DllImport.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
        [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
    )
    {
        fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
        fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
        {
            ((ISdl)this).TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
        [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
    ) => DllImport.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TryLockMutex(MutexHandle mutex) =>
        (MaybeBool<byte>)(byte)((ISdl)this).TryLockMutexRaw(mutex);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TryLockMutex(MutexHandle mutex) => DllImport.TryLockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TryLockMutexRaw(MutexHandle mutex) =>
        (
            (delegate* unmanaged<MutexHandle, byte>)(
                _slots[814] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[814] = nativeContext.LoadFunction("SDL_TryLockMutex", "SDL3")
            )
        )(mutex);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TryLockMutexRaw(MutexHandle mutex) => DllImport.TryLockMutexRaw(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TryLockRWLockForReading(RWLockHandle rwlock) =>
        (MaybeBool<byte>)(byte)((ISdl)this).TryLockRWLockForReadingRaw(rwlock);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TryLockRWLockForReading(RWLockHandle rwlock) =>
        DllImport.TryLockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TryLockRWLockForReadingRaw(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, byte>)(
                _slots[815] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[815] = nativeContext.LoadFunction(
                        "SDL_TryLockRWLockForReading",
                        "SDL3"
                    )
            )
        )(rwlock);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TryLockRWLockForReadingRaw(RWLockHandle rwlock) =>
        DllImport.TryLockRWLockForReadingRaw(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TryLockRWLockForWriting(RWLockHandle rwlock) =>
        (MaybeBool<byte>)(byte)((ISdl)this).TryLockRWLockForWritingRaw(rwlock);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TryLockRWLockForWriting(RWLockHandle rwlock) =>
        DllImport.TryLockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TryLockRWLockForWritingRaw(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, byte>)(
                _slots[816] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[816] = nativeContext.LoadFunction(
                        "SDL_TryLockRWLockForWriting",
                        "SDL3"
                    )
            )
        )(rwlock);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TryLockRWLockForWritingRaw(RWLockHandle rwlock) =>
        DllImport.TryLockRWLockForWritingRaw(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        (
            (delegate* unmanaged<int*, byte>)(
                _slots[817] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[817] = nativeContext.LoadFunction("SDL_TryLockSpinlock", "SDL3")
            )
        )(@lock);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.TryLockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).TryLockSpinlock(__dsl_lock);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TryLockSpinlock(
        [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
    ) => DllImport.TryLockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.TryWaitSemaphore(SemaphoreHandle sem) =>
        (MaybeBool<byte>)(byte)((ISdl)this).TryWaitSemaphoreRaw(sem);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> TryWaitSemaphore(SemaphoreHandle sem) =>
        DllImport.TryWaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.TryWaitSemaphoreRaw(SemaphoreHandle sem) =>
        (
            (delegate* unmanaged<SemaphoreHandle, byte>)(
                _slots[818] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[818] = nativeContext.LoadFunction("SDL_TryWaitSemaphore", "SDL3")
            )
        )(sem);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte TryWaitSemaphoreRaw(SemaphoreHandle sem) =>
        DllImport.TryWaitSemaphoreRaw(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStream(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, void>)(
                _slots[819] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[819] = nativeContext.LoadFunction("SDL_UnbindAudioStream", "SDL3")
            )
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStream(AudioStreamHandle stream) =>
        DllImport.UnbindAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStreams(AudioStreamHandle* streams, int num_streams) =>
        (
            (delegate* unmanaged<AudioStreamHandle*, int, void>)(
                _slots[820] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[820] = nativeContext.LoadFunction("SDL_UnbindAudioStreams", "SDL3")
            )
        )(streams, num_streams);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStreams(AudioStreamHandle* streams, int num_streams) =>
        DllImport.UnbindAudioStreams(streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStreams(Ref<AudioStreamHandle> streams, int num_streams)
    {
        fixed (AudioStreamHandle* __dsl_streams = streams)
        {
            ((ISdl)this).UnbindAudioStreams(__dsl_streams, num_streams);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStreams(Ref<AudioStreamHandle> streams, int num_streams) =>
        DllImport.UnbindAudioStreams(streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnloadObject(SharedObjectHandle handle) =>
        (
            (delegate* unmanaged<SharedObjectHandle, void>)(
                _slots[821] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[821] = nativeContext.LoadFunction("SDL_UnloadObject", "SDL3")
            )
        )(handle);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnloadObject(SharedObjectHandle handle) => DllImport.UnloadObject(handle);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UnlockAudioStream(AudioStreamHandle stream) =>
        (MaybeBool<byte>)(byte)((ISdl)this).UnlockAudioStreamRaw(stream);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UnlockAudioStream(AudioStreamHandle stream) =>
        DllImport.UnlockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UnlockAudioStreamRaw(AudioStreamHandle stream) =>
        (
            (delegate* unmanaged<AudioStreamHandle, byte>)(
                _slots[822] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[822] = nativeContext.LoadFunction("SDL_UnlockAudioStream", "SDL3")
            )
        )(stream);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UnlockAudioStreamRaw(AudioStreamHandle stream) =>
        DllImport.UnlockAudioStreamRaw(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockJoysticks() =>
        (
            (delegate* unmanaged<void>)(
                _slots[823] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[823] = nativeContext.LoadFunction("SDL_UnlockJoysticks", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockJoysticks() => DllImport.UnlockJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockMutex(MutexHandle mutex) =>
        (
            (delegate* unmanaged<MutexHandle, void>)(
                _slots[824] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[824] = nativeContext.LoadFunction("SDL_UnlockMutex", "SDL3")
            )
        )(mutex);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockMutex(MutexHandle mutex) => DllImport.UnlockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        (
            (delegate* unmanaged<uint, void>)(
                _slots[825] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[825] = nativeContext.LoadFunction("SDL_UnlockProperties", "SDL3")
            )
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.UnlockProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockRWLock(RWLockHandle rwlock) =>
        (
            (delegate* unmanaged<RWLockHandle, void>)(
                _slots[826] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[826] = nativeContext.LoadFunction("SDL_UnlockRWLock", "SDL3")
            )
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockRWLock(RWLockHandle rwlock) => DllImport.UnlockRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        (
            (delegate* unmanaged<int*, void>)(
                _slots[827] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[827] = nativeContext.LoadFunction("SDL_UnlockSpinlock", "SDL3")
            )
        )(@lock);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.UnlockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            ((ISdl)this).UnlockSpinlock(__dsl_lock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
        DllImport.UnlockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSurface(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, void>)(
                _slots[828] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[828] = nativeContext.LoadFunction("SDL_UnlockSurface", "SDL3")
            )
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSurface(Surface* surface) => DllImport.UnlockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            ((ISdl)this).UnlockSurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSurface(Ref<Surface> surface) => DllImport.UnlockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockTexture(Texture* texture) =>
        (
            (delegate* unmanaged<Texture*, void>)(
                _slots[829] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[829] = nativeContext.LoadFunction("SDL_UnlockTexture", "SDL3")
            )
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockTexture(Texture* texture) => DllImport.UnlockTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockTexture(Ref<Texture> texture)
    {
        fixed (Texture* __dsl_texture = texture)
        {
            ((ISdl)this).UnlockTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockTexture(Ref<Texture> texture) => DllImport.UnlockTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateGamepads() =>
        (
            (delegate* unmanaged<void>)(
                _slots[830] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[830] = nativeContext.LoadFunction("SDL_UpdateGamepads", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateGamepads() => DllImport.UpdateGamepads();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
    ) =>
        (
            (delegate* unmanaged<HapticHandle, int, HapticEffect*, byte>)(
                _slots[831] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[831] = nativeContext.LoadFunction("SDL_UpdateHapticEffect", "SDL3")
            )
        )(haptic, effect, data);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
    ) => DllImport.UpdateHapticEffect(haptic, effect, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
    )
    {
        fixed (HapticEffect* __dsl_data = data)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).UpdateHapticEffect(haptic, effect, __dsl_data);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateHapticEffect(
        HapticHandle haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
    ) => DllImport.UpdateHapticEffect(haptic, effect, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateJoysticks() =>
        (
            (delegate* unmanaged<void>)(
                _slots[832] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[832] = nativeContext.LoadFunction("SDL_UpdateJoysticks", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateJoysticks() => DllImport.UpdateJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateNVTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* UVplane,
        int UVpitch
    ) =>
        (
            (delegate* unmanaged<Texture*, Rect*, byte*, int, byte*, int, byte>)(
                _slots[833] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[833] = nativeContext.LoadFunction("SDL_UpdateNVTexture", "SDL3")
            )
        )(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateNVTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* UVplane,
        int UVpitch
    ) => DllImport.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateNVTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
        int UVpitch
    )
    {
        fixed (byte* __dsl_UVplane = UVplane)
        fixed (byte* __dsl_Yplane = Yplane)
        fixed (Rect* __dsl_rect = rect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).UpdateNVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_UVplane,
                        UVpitch
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateNVTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
        int UVpitch
    ) => DllImport.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateSensors() =>
        (
            (delegate* unmanaged<void>)(
                _slots[834] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[834] = nativeContext.LoadFunction("SDL_UpdateSensors", "SDL3")
            )
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateSensors() => DllImport.UpdateSensors();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const void *")] void* pixels,
        int pitch
    ) =>
        (
            (delegate* unmanaged<Texture*, Rect*, void*, int, byte>)(
                _slots[835] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[835] = nativeContext.LoadFunction("SDL_UpdateTexture", "SDL3")
            )
        )(texture, rect, pixels, pitch);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const void *")] void* pixels,
        int pitch
    ) => DllImport.UpdateTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const void *")] Ref pixels,
        int pitch
    )
    {
        fixed (void* __dsl_pixels = pixels)
        fixed (Rect* __dsl_rect = rect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const void *")] Ref pixels,
        int pitch
    ) => DllImport.UpdateTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateWindowSurface(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).UpdateWindowSurfaceRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateWindowSurface(WindowHandle window) =>
        DllImport.UpdateWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateWindowSurfaceRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[836] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[836] = nativeContext.LoadFunction("SDL_UpdateWindowSurface", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateWindowSurfaceRaw(WindowHandle window) =>
        DllImport.UpdateWindowSurfaceRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateWindowSurfaceRects(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int numrects
    ) =>
        (
            (delegate* unmanaged<WindowHandle, Rect*, int, byte>)(
                _slots[837] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[837] = nativeContext.LoadFunction(
                        "SDL_UpdateWindowSurfaceRects",
                        "SDL3"
                    )
            )
        )(window, rects, numrects);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateWindowSurfaceRects(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int numrects
    ) => DllImport.UpdateWindowSurfaceRects(window, rects, numrects);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateWindowSurfaceRects(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int numrects
    )
    {
        fixed (Rect* __dsl_rects = rects)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).UpdateWindowSurfaceRects(window, __dsl_rects, numrects);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateWindowSurfaceRects(
        WindowHandle window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int numrects
    ) => DllImport.UpdateWindowSurfaceRects(window, rects, numrects);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.UpdateYUVTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] byte* Vplane,
        int Vpitch
    ) =>
        (
            (delegate* unmanaged<Texture*, Rect*, byte*, int, byte*, int, byte*, int, byte>)(
                _slots[838] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[838] = nativeContext.LoadFunction("SDL_UpdateYUVTexture", "SDL3")
            )
        )(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte UpdateYUVTexture(
        Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] byte* Vplane,
        int Vpitch
    ) => DllImport.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.UpdateYUVTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
        int Vpitch
    )
    {
        fixed (byte* __dsl_Vplane = Vplane)
        fixed (byte* __dsl_Uplane = Uplane)
        fixed (byte* __dsl_Yplane = Yplane)
        fixed (Rect* __dsl_rect = rect)
        fixed (Texture* __dsl_texture = texture)
        {
            return (MaybeBool<byte>)
                (byte)
                    ((ISdl)this).UpdateYUVTexture(
                        __dsl_texture,
                        __dsl_rect,
                        __dsl_Yplane,
                        Ypitch,
                        __dsl_Uplane,
                        Upitch,
                        __dsl_Vplane,
                        Vpitch
                    );
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> UpdateYUVTexture(
        Ref<Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
        int Vpitch
    ) => DllImport.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitCondition(ConditionHandle cond, MutexHandle mutex) =>
        (
            (delegate* unmanaged<ConditionHandle, MutexHandle, void>)(
                _slots[839] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[839] = nativeContext.LoadFunction("SDL_WaitCondition", "SDL3")
            )
        )(cond, mutex);

    [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitCondition(ConditionHandle cond, MutexHandle mutex) =>
        DllImport.WaitCondition(cond, mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WaitConditionTimeout(
        ConditionHandle cond,
        MutexHandle mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => (MaybeBool<byte>)(byte)((ISdl)this).WaitConditionTimeoutRaw(cond, mutex, timeoutMS);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WaitConditionTimeout(
        ConditionHandle cond,
        MutexHandle mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitConditionTimeout(cond, mutex, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WaitConditionTimeoutRaw(
        ConditionHandle cond,
        MutexHandle mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) =>
        (
            (delegate* unmanaged<ConditionHandle, MutexHandle, int, byte>)(
                _slots[840] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[840] = nativeContext.LoadFunction("SDL_WaitConditionTimeout", "SDL3")
            )
        )(cond, mutex, timeoutMS);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WaitConditionTimeoutRaw(
        ConditionHandle cond,
        MutexHandle mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitConditionTimeoutRaw(cond, mutex, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WaitEvent(Event* @event) =>
        (
            (delegate* unmanaged<Event*, byte>)(
                _slots[841] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[841] = nativeContext.LoadFunction("SDL_WaitEvent", "SDL3")
            )
        )(@event);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WaitEvent(Event* @event) => DllImport.WaitEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WaitEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).WaitEvent(__dsl_event);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WaitEvent(Ref<Event> @event) => DllImport.WaitEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
        (
            (delegate* unmanaged<Event*, int, byte>)(
                _slots[842] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[842] = nativeContext.LoadFunction("SDL_WaitEventTimeout", "SDL3")
            )
        )(@event, timeoutMS);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
        DllImport.WaitEventTimeout(@event, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WaitEventTimeout(
        Ref<Event> @event,
        [NativeTypeName("Sint32")] int timeoutMS
    )
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<byte>)(byte)((ISdl)this).WaitEventTimeout(__dsl_event, timeoutMS);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WaitEventTimeout(
        Ref<Event> @event,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitEventTimeout(@event, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitSemaphore(SemaphoreHandle sem) =>
        (
            (delegate* unmanaged<SemaphoreHandle, void>)(
                _slots[843] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[843] = nativeContext.LoadFunction("SDL_WaitSemaphore", "SDL3")
            )
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitSemaphore(SemaphoreHandle sem) => DllImport.WaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WaitSemaphoreTimeout(
        SemaphoreHandle sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => (MaybeBool<byte>)(byte)((ISdl)this).WaitSemaphoreTimeoutRaw(sem, timeoutMS);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WaitSemaphoreTimeout(
        SemaphoreHandle sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitSemaphoreTimeout(sem, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WaitSemaphoreTimeoutRaw(
        SemaphoreHandle sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) =>
        (
            (delegate* unmanaged<SemaphoreHandle, int, byte>)(
                _slots[844] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[844] = nativeContext.LoadFunction("SDL_WaitSemaphoreTimeout", "SDL3")
            )
        )(sem, timeoutMS);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WaitSemaphoreTimeoutRaw(
        SemaphoreHandle sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitSemaphoreTimeoutRaw(sem, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitThread(ThreadHandle thread, int* status) =>
        (
            (delegate* unmanaged<ThreadHandle, int*, void>)(
                _slots[845] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[845] = nativeContext.LoadFunction("SDL_WaitThread", "SDL3")
            )
        )(thread, status);

    [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitThread(ThreadHandle thread, int* status) =>
        DllImport.WaitThread(thread, status);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitThread(ThreadHandle thread, Ref<int> status)
    {
        fixed (int* __dsl_status = status)
        {
            ((ISdl)this).WaitThread(thread, __dsl_status);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitThread(ThreadHandle thread, Ref<int> status) =>
        DllImport.WaitThread(thread, status);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WarpMouseGlobal(float x, float y) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WarpMouseGlobalRaw(x, y);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WarpMouseGlobal(float x, float y) =>
        DllImport.WarpMouseGlobal(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WarpMouseGlobalRaw(float x, float y) =>
        (
            (delegate* unmanaged<float, float, byte>)(
                _slots[846] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[846] = nativeContext.LoadFunction("SDL_WarpMouseGlobal", "SDL3")
            )
        )(x, y);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseGlobal")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WarpMouseGlobalRaw(float x, float y) => DllImport.WarpMouseGlobalRaw(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WarpMouseInWindow(WindowHandle window, float x, float y) =>
        (
            (delegate* unmanaged<WindowHandle, float, float, void>)(
                _slots[847] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[847] = nativeContext.LoadFunction("SDL_WarpMouseInWindow", "SDL3")
            )
        )(window, x, y);

    [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WarpMouseInWindow(WindowHandle window, float x, float y) =>
        DllImport.WarpMouseInWindow(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.WasInit([NativeTypeName("SDL_InitFlags")] uint flags) =>
        (
            (delegate* unmanaged<uint, uint>)(
                _slots[848] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[848] = nativeContext.LoadFunction("SDL_WasInit", "SDL3")
            )
        )(flags);

    [return: NativeTypeName("SDL_InitFlags")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WasInit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint WasInit([NativeTypeName("SDL_InitFlags")] uint flags) =>
        DllImport.WasInit(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WindowHasSurface(WindowHandle window) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WindowHasSurfaceRaw(window);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WindowHasSurface(WindowHandle window) =>
        DllImport.WindowHasSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WindowHasSurfaceRaw(WindowHandle window) =>
        (
            (delegate* unmanaged<WindowHandle, byte>)(
                _slots[849] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[849] = nativeContext.LoadFunction("SDL_WindowHasSurface", "SDL3")
            )
        )(window);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WindowHasSurfaceRaw(WindowHandle window) =>
        DllImport.WindowHasSurfaceRaw(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.WriteIO(
        IOStreamHandle context,
        [NativeTypeName("const void *")] void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) =>
        (
            (delegate* unmanaged<IOStreamHandle, void*, nuint, nuint>)(
                _slots[850] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[850] = nativeContext.LoadFunction("SDL_WriteIO", "SDL3")
            )
        )(context, ptr, size);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint WriteIO(
        IOStreamHandle context,
        [NativeTypeName("const void *")] void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.WriteIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.WriteIO(
        IOStreamHandle context,
        [NativeTypeName("const void *")] Ref ptr,
        [NativeTypeName("size_t")] nuint size
    )
    {
        fixed (void* __dsl_ptr = ptr)
        {
            return (nuint)((ISdl)this).WriteIO(context, __dsl_ptr, size);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint WriteIO(
        IOStreamHandle context,
        [NativeTypeName("const void *")] Ref ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.WriteIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS16BE(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS16BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS16BE(
        IOStreamHandle dst,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.WriteS16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS16BERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        (
            (delegate* unmanaged<IOStreamHandle, short, byte>)(
                _slots[851] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[851] = nativeContext.LoadFunction("SDL_WriteS16BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS16BERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        DllImport.WriteS16BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS16LE(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS16LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS16LE(
        IOStreamHandle dst,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.WriteS16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS16LERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        (
            (delegate* unmanaged<IOStreamHandle, short, byte>)(
                _slots[852] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[852] = nativeContext.LoadFunction("SDL_WriteS16LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS16LERaw(IOStreamHandle dst, [NativeTypeName("Sint16")] short value) =>
        DllImport.WriteS16LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS32BE(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS32BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS32BE(
        IOStreamHandle dst,
        [NativeTypeName("Sint32")] int value
    ) => DllImport.WriteS32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS32BERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        (
            (delegate* unmanaged<IOStreamHandle, int, byte>)(
                _slots[853] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[853] = nativeContext.LoadFunction("SDL_WriteS32BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS32BERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        DllImport.WriteS32BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS32LE(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS32LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS32LE(
        IOStreamHandle dst,
        [NativeTypeName("Sint32")] int value
    ) => DllImport.WriteS32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS32LERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        (
            (delegate* unmanaged<IOStreamHandle, int, byte>)(
                _slots[854] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[854] = nativeContext.LoadFunction("SDL_WriteS32LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS32LERaw(IOStreamHandle dst, [NativeTypeName("Sint32")] int value) =>
        DllImport.WriteS32LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS64BE(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS64BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS64BE(
        IOStreamHandle dst,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.WriteS64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS64BERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        (
            (delegate* unmanaged<IOStreamHandle, long, byte>)(
                _slots[855] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[855] = nativeContext.LoadFunction("SDL_WriteS64BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS64BERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        DllImport.WriteS64BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS64LE(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS64LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS64LE(
        IOStreamHandle dst,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.WriteS64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS64LERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        (
            (delegate* unmanaged<IOStreamHandle, long, byte>)(
                _slots[856] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[856] = nativeContext.LoadFunction("SDL_WriteS64LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS64LERaw(IOStreamHandle dst, [NativeTypeName("Sint64")] long value) =>
        DllImport.WriteS64LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteS8(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteS8Raw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteS8(
        IOStreamHandle dst,
        [NativeTypeName("Sint8")] sbyte value
    ) => DllImport.WriteS8(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteS8Raw(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
        (
            (delegate* unmanaged<IOStreamHandle, sbyte, byte>)(
                _slots[857] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[857] = nativeContext.LoadFunction("SDL_WriteS8", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteS8Raw(IOStreamHandle dst, [NativeTypeName("Sint8")] sbyte value) =>
        DllImport.WriteS8Raw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const void *")] void* source,
        [NativeTypeName("Uint64")] ulong length
    ) =>
        (
            (delegate* unmanaged<StorageHandle, sbyte*, void*, ulong, byte>)(
                _slots[858] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[858] = nativeContext.LoadFunction("SDL_WriteStorageFile", "SDL3")
            )
        )(storage, path, source, length);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const void *")] void* source,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.WriteStorageFile(storage, path, source, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const void *")] Ref source,
        [NativeTypeName("Uint64")] ulong length
    )
    {
        fixed (void* __dsl_source = source)
        fixed (sbyte* __dsl_path = path)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).WriteStorageFile(storage, __dsl_path, __dsl_source, length);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteStorageFile(
        StorageHandle storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const void *")] Ref source,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.WriteStorageFile(storage, path, source, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<Surface*, int, int, byte, byte, byte, byte, byte>)(
                _slots[859] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[859] = nativeContext.LoadFunction("SDL_WriteSurfacePixel", "SDL3")
            )
        )(surface, x, y, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.WriteSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).WriteSurfacePixel(__dsl_surface, x, y, r, g, b, a);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.WriteSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteSurfacePixelFloat(
        Surface* surface,
        int x,
        int y,
        float r,
        float g,
        float b,
        float a
    ) =>
        (
            (delegate* unmanaged<Surface*, int, int, float, float, float, float, byte>)(
                _slots[860] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[860] = nativeContext.LoadFunction("SDL_WriteSurfacePixelFloat", "SDL3")
            )
        )(surface, x, y, r, g, b, a);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteSurfacePixelFloat(
        Surface* surface,
        int x,
        int y,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.WriteSurfacePixelFloat(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteSurfacePixelFloat(
        Ref<Surface> surface,
        int x,
        int y,
        float r,
        float g,
        float b,
        float a
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<byte>)
                (byte)((ISdl)this).WriteSurfacePixelFloat(__dsl_surface, x, y, r, g, b, a);
        }
    }

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteSurfacePixelFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteSurfacePixelFloat(
        Ref<Surface> surface,
        int x,
        int y,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.WriteSurfacePixelFloat(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU16BE(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU16BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU16BE(
        IOStreamHandle dst,
        [NativeTypeName("Uint16")] ushort value
    ) => DllImport.WriteU16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU16BERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ushort, byte>)(
                _slots[861] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[861] = nativeContext.LoadFunction("SDL_WriteU16BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU16BERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        DllImport.WriteU16BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU16LE(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU16LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU16LE(
        IOStreamHandle dst,
        [NativeTypeName("Uint16")] ushort value
    ) => DllImport.WriteU16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU16LERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ushort, byte>)(
                _slots[862] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[862] = nativeContext.LoadFunction("SDL_WriteU16LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU16LERaw(IOStreamHandle dst, [NativeTypeName("Uint16")] ushort value) =>
        DllImport.WriteU16LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU32BE(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU32BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU32BE(
        IOStreamHandle dst,
        [NativeTypeName("Uint32")] uint value
    ) => DllImport.WriteU32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU32BERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        (
            (delegate* unmanaged<IOStreamHandle, uint, byte>)(
                _slots[863] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[863] = nativeContext.LoadFunction("SDL_WriteU32BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU32BERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        DllImport.WriteU32BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU32LE(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU32LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU32LE(
        IOStreamHandle dst,
        [NativeTypeName("Uint32")] uint value
    ) => DllImport.WriteU32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU32LERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        (
            (delegate* unmanaged<IOStreamHandle, uint, byte>)(
                _slots[864] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[864] = nativeContext.LoadFunction("SDL_WriteU32LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU32LERaw(IOStreamHandle dst, [NativeTypeName("Uint32")] uint value) =>
        DllImport.WriteU32LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU64BE(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU64BERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU64BE(
        IOStreamHandle dst,
        [NativeTypeName("Uint64")] ulong value
    ) => DllImport.WriteU64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU64BERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ulong, byte>)(
                _slots[865] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[865] = nativeContext.LoadFunction("SDL_WriteU64BE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU64BERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        DllImport.WriteU64BERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU64LE(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU64LERaw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU64LE(
        IOStreamHandle dst,
        [NativeTypeName("Uint64")] ulong value
    ) => DllImport.WriteU64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU64LERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        (
            (delegate* unmanaged<IOStreamHandle, ulong, byte>)(
                _slots[866] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[866] = nativeContext.LoadFunction("SDL_WriteU64LE", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU64LERaw(IOStreamHandle dst, [NativeTypeName("Uint64")] ulong value) =>
        DllImport.WriteU64LERaw(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<byte> ISdl.WriteU8(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
        (MaybeBool<byte>)(byte)((ISdl)this).WriteU8Raw(dst, value);

    [return: NativeTypeName("bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<byte> WriteU8(
        IOStreamHandle dst,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.WriteU8(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.WriteU8Raw(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
        (
            (delegate* unmanaged<IOStreamHandle, byte, byte>)(
                _slots[867] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[867] = nativeContext.LoadFunction("SDL_WriteU8", "SDL3")
            )
        )(dst, value);

    [return: NativeTypeName("bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte WriteU8Raw(IOStreamHandle dst, [NativeTypeName("Uint8")] byte value) =>
        DllImport.WriteU8Raw(dst, value);
}
